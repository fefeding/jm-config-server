// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "InnerComm.tars" by Client Mode
// **********************************************************************

/* tslint:disable */
/* eslint-disable */

/// <reference types="node" />
import assert = require("assert");
import * as TarsStream from "@tars/stream";

const _hasOwnProperty = Object.prototype.hasOwnProperty;
export namespace JV {
    export enum EPlatForm {
        EPlatFormH5 = 1,
        EPlatFormApp = 2,
        EPlatFormPc = 3,
        EPlatFormApplets = 4
    }

    export namespace EPlatForm {
        export const _classname = "JV.EPlatForm";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }

    export enum EOsType {
        EOsIos = 1,
        EOsAndroid = 2,
        EOsWindows = 3,
        EOsMac = 4,
        EOsOther = 5
    }

    export namespace EOsType {
        export const _classname = "JV.EOsType";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }


    export class TCommReqContext {
        login_id: string = "";
        msgno: string = "";
        platform: number = 0;
        client_ip: string = "";
        device_id: string = "";
        device_name: string = "";
        imei: string = "";
        version: string = "";
        build_code: number = 0;
        channel: string = "";
        os: string = "";
        os_version: string = "";
        uid: string = "";
        broker_id: number = 0;
        client_id: string = "";
        account_id: string = "";
        mac_address: string = "";
        req_token: string = "";
        bury_point: string = "";
        outer_user_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TCommReqContext";
        protected static _classname = "JV.TCommReqContext";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TCommReqContext;
            tmp.login_id = is.readString(0, true, "");
            tmp.msgno = is.readString(1, true, "");
            tmp.platform = is.readInt32(2, false, 0);
            tmp.client_ip = is.readString(3, false, "");
            tmp.device_id = is.readString(4, false, "");
            tmp.device_name = is.readString(5, false, "");
            tmp.imei = is.readString(6, false, "");
            tmp.version = is.readString(7, false, "");
            tmp.build_code = is.readInt32(8, false, 0);
            tmp.channel = is.readString(9, false, "");
            tmp.os = is.readString(10, false, "");
            tmp.os_version = is.readString(11, false, "");
            tmp.uid = is.readString(12, false, "");
            tmp.broker_id = is.readInt32(13, false, 0);
            tmp.client_id = is.readString(14, false, "");
            tmp.account_id = is.readString(15, false, "");
            tmp.mac_address = is.readString(16, false, "");
            tmp.req_token = is.readString(17, false, "");
            tmp.bury_point = is.readString(18, false, "");
            tmp.outer_user_id = is.readString(20, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.login_id);
            os.writeString(1, this.msgno);
            os.writeInt32(2, this.platform);
            os.writeString(3, this.client_ip);
            os.writeString(4, this.device_id);
            os.writeString(5, this.device_name);
            os.writeString(6, this.imei);
            os.writeString(7, this.version);
            os.writeInt32(8, this.build_code);
            os.writeString(9, this.channel);
            os.writeString(10, this.os);
            os.writeString(11, this.os_version);
            os.writeString(12, this.uid);
            os.writeInt32(13, this.broker_id);
            os.writeString(14, this.client_id);
            os.writeString(15, this.account_id);
            os.writeString(16, this.mac_address);
            os.writeString(17, this.req_token);
            os.writeString(18, this.bury_point);
            os.writeString(20, this.outer_user_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TCommReqContext.Object { 
            return {
                login_id: this.login_id,
                msgno: this.msgno,
                platform: this.platform,
                client_ip: this.client_ip,
                device_id: this.device_id,
                device_name: this.device_name,
                imei: this.imei,
                version: this.version,
                build_code: this.build_code,
                channel: this.channel,
                os: this.os,
                os_version: this.os_version,
                uid: this.uid,
                broker_id: this.broker_id,
                client_id: this.client_id,
                account_id: this.account_id,
                mac_address: this.mac_address,
                req_token: this.req_token,
                bury_point: this.bury_point,
                outer_user_id: this.outer_user_id
            };
        }

        readFromObject(json: TCommReqContext.Object) { 
            _hasOwnProperty.call(json, "login_id") && (this.login_id = json.login_id);
            _hasOwnProperty.call(json, "msgno") && (this.msgno = json.msgno);
            _hasOwnProperty.call(json, "platform") && (this.platform = json.platform!);
            _hasOwnProperty.call(json, "client_ip") && (this.client_ip = json.client_ip!);
            _hasOwnProperty.call(json, "device_id") && (this.device_id = json.device_id!);
            _hasOwnProperty.call(json, "device_name") && (this.device_name = json.device_name!);
            _hasOwnProperty.call(json, "imei") && (this.imei = json.imei!);
            _hasOwnProperty.call(json, "version") && (this.version = json.version!);
            _hasOwnProperty.call(json, "build_code") && (this.build_code = json.build_code!);
            _hasOwnProperty.call(json, "channel") && (this.channel = json.channel!);
            _hasOwnProperty.call(json, "os") && (this.os = json.os!);
            _hasOwnProperty.call(json, "os_version") && (this.os_version = json.os_version!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "broker_id") && (this.broker_id = json.broker_id!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "mac_address") && (this.mac_address = json.mac_address!);
            _hasOwnProperty.call(json, "req_token") && (this.req_token = json.req_token!);
            _hasOwnProperty.call(json, "bury_point") && (this.bury_point = json.bury_point!);
            _hasOwnProperty.call(json, "outer_user_id") && (this.outer_user_id = json.outer_user_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TCommReqContext();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TCommReqContext._readFrom(is);
        }
    }

    export namespace TCommReqContext {
        export interface Object {
            login_id: string;
            msgno: string;
            platform?: number;
            client_ip?: string;
            device_id?: string;
            device_name?: string;
            imei?: string;
            version?: string;
            build_code?: number;
            channel?: string;
            os?: string;
            os_version?: string;
            uid?: string;
            broker_id?: number;
            client_id?: string;
            account_id?: string;
            mac_address?: string;
            req_token?: string;
            bury_point?: string;
            outer_user_id?: string;
        }
    }

    export class TLogicRspHead {
        sErrMsg: string = "";
        iTipType: number = 1;
        sCmdName: string = "";
        sReq: string = "";
        sRsp: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TLogicRspHead";
        protected static _classname = "JV.TLogicRspHead";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TLogicRspHead;
            tmp.sErrMsg = is.readString(0, true, "");
            tmp.iTipType = is.readInt32(1, true, 1);
            tmp.sCmdName = is.readString(2, false, "");
            tmp.sReq = is.readString(3, false, "");
            tmp.sRsp = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.sErrMsg);
            os.writeInt32(1, this.iTipType);
            os.writeString(2, this.sCmdName);
            os.writeString(3, this.sReq);
            os.writeString(4, this.sRsp);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TLogicRspHead.Object { 
            return {
                sErrMsg: this.sErrMsg,
                iTipType: this.iTipType,
                sCmdName: this.sCmdName,
                sReq: this.sReq,
                sRsp: this.sRsp
            };
        }

        readFromObject(json: TLogicRspHead.Object) { 
            _hasOwnProperty.call(json, "sErrMsg") && (this.sErrMsg = json.sErrMsg);
            _hasOwnProperty.call(json, "iTipType") && (this.iTipType = json.iTipType);
            _hasOwnProperty.call(json, "sCmdName") && (this.sCmdName = json.sCmdName!);
            _hasOwnProperty.call(json, "sReq") && (this.sReq = json.sReq!);
            _hasOwnProperty.call(json, "sRsp") && (this.sRsp = json.sRsp!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TLogicRspHead();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TLogicRspHead._readFrom(is);
        }
    }

    export namespace TLogicRspHead {
        export interface Object {
            sErrMsg: string;
            iTipType: number;
            sCmdName?: string;
            sReq?: string;
            sRsp?: string;
        }
    }

    export class TWzqReqHead {
        SERVICE_ID: string = "";
        TIME_STAMP: string = "";
        SIGN: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TWzqReqHead";
        protected static _classname = "JV.TWzqReqHead";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TWzqReqHead;
            tmp.SERVICE_ID = is.readString(0, true, "");
            tmp.TIME_STAMP = is.readString(1, true, "");
            tmp.SIGN = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.SERVICE_ID);
            os.writeString(1, this.TIME_STAMP);
            os.writeString(2, this.SIGN);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TWzqReqHead.Object { 
            return {
                SERVICE_ID: this.SERVICE_ID,
                TIME_STAMP: this.TIME_STAMP,
                SIGN: this.SIGN
            };
        }

        readFromObject(json: TWzqReqHead.Object) { 
            _hasOwnProperty.call(json, "SERVICE_ID") && (this.SERVICE_ID = json.SERVICE_ID);
            _hasOwnProperty.call(json, "TIME_STAMP") && (this.TIME_STAMP = json.TIME_STAMP);
            _hasOwnProperty.call(json, "SIGN") && (this.SIGN = json.SIGN);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TWzqReqHead();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TWzqReqHead._readFrom(is);
        }
    }

    export namespace TWzqReqHead {
        export interface Object {
            SERVICE_ID: string;
            TIME_STAMP: string;
            SIGN: string;
        }
    }

    export class TWzqRspHead {
        MSG_CODE: string = "";
        MSG_TEXT: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TWzqRspHead";
        protected static _classname = "JV.TWzqRspHead";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TWzqRspHead;
            tmp.MSG_CODE = is.readString(0, true, "");
            tmp.MSG_TEXT = is.readString(1, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.MSG_CODE);
            os.writeString(1, this.MSG_TEXT);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TWzqRspHead.Object { 
            return {
                MSG_CODE: this.MSG_CODE,
                MSG_TEXT: this.MSG_TEXT
            };
        }

        readFromObject(json: TWzqRspHead.Object) { 
            _hasOwnProperty.call(json, "MSG_CODE") && (this.MSG_CODE = json.MSG_CODE);
            _hasOwnProperty.call(json, "MSG_TEXT") && (this.MSG_TEXT = json.MSG_TEXT);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TWzqRspHead();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TWzqRspHead._readFrom(is);
        }
    }

    export namespace TWzqRspHead {
        export interface Object {
            MSG_CODE: string;
            MSG_TEXT: string;
        }
    }

}


