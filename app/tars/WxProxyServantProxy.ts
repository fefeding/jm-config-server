// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "WxProxyServant.tars" by Client Mode
// **********************************************************************

/* tslint:disable */
/* eslint-disable */

/// <reference types="node" />
import assert = require("assert");
import * as TarsStream from "@tars/stream";
import * as TarsRpc from "@tars/rpc";

const _hasOwnProperty = Object.prototype.hasOwnProperty;
function _castFunctionInfo<Ret, Arg>(data: SharedFunctionInfo<Ret, Arg>) { return data; }
function _makeError(data: TarsRpc.RpcResponse, message: string, type?: number): TarsRpc.RpcError {
    var error: any = new Error(message || "");
    error.request = data.request;
    error.response = {
        costtime: data.request.costtime
    };
    if (type === TarsRpc.error.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            code: type,
            message: message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
}

export interface SharedFunctionInfo<Ret = any, Arg = any> extends TarsRpc.SharedFunctionInfo {
    tarsEncoder (...args: any[]): TarsStream.BinBuffer,
    tarsDecoder (data: TarsRpc.RpcResponse): TarsRpc.ProxyResponse<Ret, Arg>,
    tupEncoder (...args: any[]): TarsStream.UniAttribute,
    tupDecoder (data: TarsRpc.RpcResponse): TarsRpc.ProxyResponse<Ret, Arg>,
    errorResponser (data: TarsRpc.RpcResponse): never
}

export namespace JV {
    export enum EWxPayAuthState {
        EWxPayAuthStateUnknown = 0,
        EWxPayAuthStateAllow = 1,
        EWxPayAuthStateRefuse = 2
    }

    export namespace EWxPayAuthState {
        export const _classname = "JV.EWxPayAuthState";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }


    export class TWeChatAccessToken {
        errcode: number = 0;
        errmsg: string = "";
        access_token: string = "";
        expires_in: number = 0;
        refresh_token: string = "";
        openid: string = "";
        scope: string = "";
        unionid: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TWeChatAccessToken";
        protected static _classname = "JV.TWeChatAccessToken";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TWeChatAccessToken;
            tmp.errcode = is.readInt32(0, false, 0);
            tmp.errmsg = is.readString(1, false, "");
            tmp.access_token = is.readString(2, false, "");
            tmp.expires_in = is.readInt32(3, false, 0);
            tmp.refresh_token = is.readString(4, false, "");
            tmp.openid = is.readString(5, false, "");
            tmp.scope = is.readString(6, false, "");
            tmp.unionid = is.readString(7, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.errcode);
            os.writeString(1, this.errmsg);
            os.writeString(2, this.access_token);
            os.writeInt32(3, this.expires_in);
            os.writeString(4, this.refresh_token);
            os.writeString(5, this.openid);
            os.writeString(6, this.scope);
            os.writeString(7, this.unionid);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TWeChatAccessToken.Object { 
            return {
                errcode: this.errcode,
                errmsg: this.errmsg,
                access_token: this.access_token,
                expires_in: this.expires_in,
                refresh_token: this.refresh_token,
                openid: this.openid,
                scope: this.scope,
                unionid: this.unionid
            };
        }

        readFromObject(json: TWeChatAccessToken.Object) { 
            _hasOwnProperty.call(json, "errcode") && (this.errcode = json.errcode!);
            _hasOwnProperty.call(json, "errmsg") && (this.errmsg = json.errmsg!);
            _hasOwnProperty.call(json, "access_token") && (this.access_token = json.access_token!);
            _hasOwnProperty.call(json, "expires_in") && (this.expires_in = json.expires_in!);
            _hasOwnProperty.call(json, "refresh_token") && (this.refresh_token = json.refresh_token!);
            _hasOwnProperty.call(json, "openid") && (this.openid = json.openid!);
            _hasOwnProperty.call(json, "scope") && (this.scope = json.scope!);
            _hasOwnProperty.call(json, "unionid") && (this.unionid = json.unionid!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TWeChatAccessToken();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TWeChatAccessToken._readFrom(is);
        }
    }

    export namespace TWeChatAccessToken {
        export interface Object {
            errcode?: number;
            errmsg?: string;
            access_token?: string;
            expires_in?: number;
            refresh_token?: string;
            openid?: string;
            scope?: string;
            unionid?: string;
        }
    }

    export class TWeChatUserInfo {
        errcode: number = 0;
        errmsg: string = "";
        openid: string = "";
        nickname: string = "";
        sex: string = "";
        province: string = "";
        city: string = "";
        country: string = "";
        headimgurl: string = "";
        privilege: TarsStream.List<string> = new TarsStream.List(TarsStream.String);
        unionid: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TWeChatUserInfo";
        protected static _classname = "JV.TWeChatUserInfo";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TWeChatUserInfo;
            tmp.errcode = is.readInt32(0, false, 0);
            tmp.errmsg = is.readString(1, false, "");
            tmp.openid = is.readString(2, false, "");
            tmp.nickname = is.readString(3, false, "");
            tmp.sex = is.readString(4, false, "");
            tmp.province = is.readString(5, false, "");
            tmp.city = is.readString(6, false, "");
            tmp.country = is.readString(7, false, "");
            tmp.headimgurl = is.readString(8, false, "");
            tmp.privilege = is.readList(9, false, TarsStream.List(TarsStream.String));
            tmp.unionid = is.readString(10, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.errcode);
            os.writeString(1, this.errmsg);
            os.writeString(2, this.openid);
            os.writeString(3, this.nickname);
            os.writeString(4, this.sex);
            os.writeString(5, this.province);
            os.writeString(6, this.city);
            os.writeString(7, this.country);
            os.writeString(8, this.headimgurl);
            os.writeList(9, this.privilege);
            os.writeString(10, this.unionid);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TWeChatUserInfo.Object { 
            return {
                errcode: this.errcode,
                errmsg: this.errmsg,
                openid: this.openid,
                nickname: this.nickname,
                sex: this.sex,
                province: this.province,
                city: this.city,
                country: this.country,
                headimgurl: this.headimgurl,
                privilege: this.privilege.toObject(),
                unionid: this.unionid
            };
        }

        readFromObject(json: TWeChatUserInfo.Object) { 
            _hasOwnProperty.call(json, "errcode") && (this.errcode = json.errcode!);
            _hasOwnProperty.call(json, "errmsg") && (this.errmsg = json.errmsg!);
            _hasOwnProperty.call(json, "openid") && (this.openid = json.openid!);
            _hasOwnProperty.call(json, "nickname") && (this.nickname = json.nickname!);
            _hasOwnProperty.call(json, "sex") && (this.sex = json.sex!);
            _hasOwnProperty.call(json, "province") && (this.province = json.province!);
            _hasOwnProperty.call(json, "city") && (this.city = json.city!);
            _hasOwnProperty.call(json, "country") && (this.country = json.country!);
            _hasOwnProperty.call(json, "headimgurl") && (this.headimgurl = json.headimgurl!);
            _hasOwnProperty.call(json, "privilege") && (this.privilege.readFromObject(json.privilege!));
            _hasOwnProperty.call(json, "unionid") && (this.unionid = json.unionid!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TWeChatUserInfo();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TWeChatUserInfo._readFrom(is);
        }
    }

    export namespace TWeChatUserInfo {
        export interface Object {
            errcode?: number;
            errmsg?: string;
            openid?: string;
            nickname?: string;
            sex?: string;
            province?: string;
            city?: string;
            country?: string;
            headimgurl?: string;
            privilege?: Array<string>;
            unionid?: string;
        }
    }

    export class TWeChatJsApiTicket {
        errcode: number = 0;
        errmsg: string = "";
        ticket: string = "";
        expires_in: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TWeChatJsApiTicket";
        protected static _classname = "JV.TWeChatJsApiTicket";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TWeChatJsApiTicket;
            tmp.errcode = is.readInt32(0, false, 0);
            tmp.errmsg = is.readString(1, false, "");
            tmp.ticket = is.readString(2, false, "");
            tmp.expires_in = is.readInt32(3, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.errcode);
            os.writeString(1, this.errmsg);
            os.writeString(2, this.ticket);
            os.writeInt32(3, this.expires_in);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TWeChatJsApiTicket.Object { 
            return {
                errcode: this.errcode,
                errmsg: this.errmsg,
                ticket: this.ticket,
                expires_in: this.expires_in
            };
        }

        readFromObject(json: TWeChatJsApiTicket.Object) { 
            _hasOwnProperty.call(json, "errcode") && (this.errcode = json.errcode!);
            _hasOwnProperty.call(json, "errmsg") && (this.errmsg = json.errmsg!);
            _hasOwnProperty.call(json, "ticket") && (this.ticket = json.ticket!);
            _hasOwnProperty.call(json, "expires_in") && (this.expires_in = json.expires_in!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TWeChatJsApiTicket();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TWeChatJsApiTicket._readFrom(is);
        }
    }

    export namespace TWeChatJsApiTicket {
        export interface Object {
            errcode?: number;
            errmsg?: string;
            ticket?: string;
            expires_in?: number;
        }
    }

    export class TWechatAppQrErrorCode {
        errcode: number = 0;
        errmsg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TWechatAppQrErrorCode";
        protected static _classname = "JV.TWechatAppQrErrorCode";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TWechatAppQrErrorCode;
            tmp.errcode = is.readInt32(0, false, 0);
            tmp.errmsg = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.errcode);
            os.writeString(1, this.errmsg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TWechatAppQrErrorCode.Object { 
            return {
                errcode: this.errcode,
                errmsg: this.errmsg
            };
        }

        readFromObject(json: TWechatAppQrErrorCode.Object) { 
            _hasOwnProperty.call(json, "errcode") && (this.errcode = json.errcode!);
            _hasOwnProperty.call(json, "errmsg") && (this.errmsg = json.errmsg!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TWechatAppQrErrorCode();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TWechatAppQrErrorCode._readFrom(is);
        }
    }

    export namespace TWechatAppQrErrorCode {
        export interface Object {
            errcode?: number;
            errmsg?: string;
        }
    }

    export class TGetFaceVerifyResultReq {
        verify_token: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TGetFaceVerifyResultReq";
        protected static _classname = "JV.TGetFaceVerifyResultReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TGetFaceVerifyResultReq;
            tmp.verify_token = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.verify_token);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TGetFaceVerifyResultReq.Object { 
            return {
                verify_token: this.verify_token
            };
        }

        readFromObject(json: TGetFaceVerifyResultReq.Object) { 
            _hasOwnProperty.call(json, "verify_token") && (this.verify_token = json.verify_token!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TGetFaceVerifyResultReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TGetFaceVerifyResultReq._readFrom(is);
        }
    }

    export namespace TGetFaceVerifyResultReq {
        export interface Object {
            verify_token?: string;
        }
    }

    export class TGetFaceVerifyResultRsp {
        identify_ret: number = 0;
        identify_time: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TGetFaceVerifyResultRsp";
        protected static _classname = "JV.TGetFaceVerifyResultRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TGetFaceVerifyResultRsp;
            tmp.identify_ret = is.readInt32(0, false, 0);
            tmp.identify_time = is.readInt32(1, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.identify_ret);
            os.writeInt32(1, this.identify_time);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TGetFaceVerifyResultRsp.Object { 
            return {
                identify_ret: this.identify_ret,
                identify_time: this.identify_time
            };
        }

        readFromObject(json: TGetFaceVerifyResultRsp.Object) { 
            _hasOwnProperty.call(json, "identify_ret") && (this.identify_ret = json.identify_ret!);
            _hasOwnProperty.call(json, "identify_time") && (this.identify_time = json.identify_time!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TGetFaceVerifyResultRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TGetFaceVerifyResultRsp._readFrom(is);
        }
    }

    export namespace TGetFaceVerifyResultRsp {
        export interface Object {
            identify_ret?: number;
            identify_time?: number;
        }
    }

    export class TWeChatDeveloperAccessToken {
        access_token: string = "";
        jsapi_ticket: string = "";
        expires_at: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TWeChatDeveloperAccessToken";
        protected static _classname = "JV.TWeChatDeveloperAccessToken";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TWeChatDeveloperAccessToken;
            tmp.access_token = is.readString(0, false, "");
            tmp.jsapi_ticket = is.readString(1, false, "");
            tmp.expires_at = is.readInt32(2, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.access_token);
            os.writeString(1, this.jsapi_ticket);
            os.writeInt32(2, this.expires_at);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TWeChatDeveloperAccessToken.Object { 
            return {
                access_token: this.access_token,
                jsapi_ticket: this.jsapi_ticket,
                expires_at: this.expires_at
            };
        }

        readFromObject(json: TWeChatDeveloperAccessToken.Object) { 
            _hasOwnProperty.call(json, "access_token") && (this.access_token = json.access_token!);
            _hasOwnProperty.call(json, "jsapi_ticket") && (this.jsapi_ticket = json.jsapi_ticket!);
            _hasOwnProperty.call(json, "expires_at") && (this.expires_at = json.expires_at!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TWeChatDeveloperAccessToken();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TWeChatDeveloperAccessToken._readFrom(is);
        }
    }

    export namespace TWeChatDeveloperAccessToken {
        export interface Object {
            access_token?: string;
            jsapi_ticket?: string;
            expires_at?: number;
        }
    }

    export class TAppletsSession {
        errcode: number = 0;
        errmsg: string = "";
        openid: string = "";
        session_key: string = "";
        unionid: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAppletsSession";
        protected static _classname = "JV.TAppletsSession";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAppletsSession;
            tmp.errcode = is.readInt32(0, false, 0);
            tmp.errmsg = is.readString(1, false, "");
            tmp.openid = is.readString(2, false, "");
            tmp.session_key = is.readString(3, false, "");
            tmp.unionid = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.errcode);
            os.writeString(1, this.errmsg);
            os.writeString(2, this.openid);
            os.writeString(3, this.session_key);
            os.writeString(4, this.unionid);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAppletsSession.Object { 
            return {
                errcode: this.errcode,
                errmsg: this.errmsg,
                openid: this.openid,
                session_key: this.session_key,
                unionid: this.unionid
            };
        }

        readFromObject(json: TAppletsSession.Object) { 
            _hasOwnProperty.call(json, "errcode") && (this.errcode = json.errcode!);
            _hasOwnProperty.call(json, "errmsg") && (this.errmsg = json.errmsg!);
            _hasOwnProperty.call(json, "openid") && (this.openid = json.openid!);
            _hasOwnProperty.call(json, "session_key") && (this.session_key = json.session_key!);
            _hasOwnProperty.call(json, "unionid") && (this.unionid = json.unionid!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAppletsSession();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAppletsSession._readFrom(is);
        }
    }

    export namespace TAppletsSession {
        export interface Object {
            errcode?: number;
            errmsg?: string;
            openid?: string;
            session_key?: string;
            unionid?: string;
        }
    }

    export class TGenWechatAppQrCodeReq {
        scene: string = "";
        appid: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TGenWechatAppQrCodeReq";
        protected static _classname = "JV.TGenWechatAppQrCodeReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TGenWechatAppQrCodeReq;
            tmp.scene = is.readString(0, false, "");
            tmp.appid = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.scene);
            os.writeString(1, this.appid);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TGenWechatAppQrCodeReq.Object { 
            return {
                scene: this.scene,
                appid: this.appid
            };
        }

        readFromObject(json: TGenWechatAppQrCodeReq.Object) { 
            _hasOwnProperty.call(json, "scene") && (this.scene = json.scene!);
            _hasOwnProperty.call(json, "appid") && (this.appid = json.appid!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TGenWechatAppQrCodeReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TGenWechatAppQrCodeReq._readFrom(is);
        }
    }

    export namespace TGenWechatAppQrCodeReq {
        export interface Object {
            scene?: string;
            appid?: string;
        }
    }

    export class TGenWechatAppQrCodeRsp {
        img_encode: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TGenWechatAppQrCodeRsp";
        protected static _classname = "JV.TGenWechatAppQrCodeRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TGenWechatAppQrCodeRsp;
            tmp.img_encode = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_encode);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TGenWechatAppQrCodeRsp.Object { 
            return {
                img_encode: this.img_encode
            };
        }

        readFromObject(json: TGenWechatAppQrCodeRsp.Object) { 
            _hasOwnProperty.call(json, "img_encode") && (this.img_encode = json.img_encode!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TGenWechatAppQrCodeRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TGenWechatAppQrCodeRsp._readFrom(is);
        }
    }

    export namespace TGenWechatAppQrCodeRsp {
        export interface Object {
            img_encode?: string;
        }
    }

    export class TBGetWxPayAuthUrlReq {
        redirect_url: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TBGetWxPayAuthUrlReq";
        protected static _classname = "JV.TBGetWxPayAuthUrlReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TBGetWxPayAuthUrlReq;
            tmp.redirect_url = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.redirect_url);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TBGetWxPayAuthUrlReq.Object { 
            return {
                redirect_url: this.redirect_url
            };
        }

        readFromObject(json: TBGetWxPayAuthUrlReq.Object) { 
            _hasOwnProperty.call(json, "redirect_url") && (this.redirect_url = json.redirect_url!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TBGetWxPayAuthUrlReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TBGetWxPayAuthUrlReq._readFrom(is);
        }
    }

    export namespace TBGetWxPayAuthUrlReq {
        export interface Object {
            redirect_url?: string;
        }
    }

    export class TBGetWxPayAuthUrlRsp {
        auth_url: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TBGetWxPayAuthUrlRsp";
        protected static _classname = "JV.TBGetWxPayAuthUrlRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TBGetWxPayAuthUrlRsp;
            tmp.auth_url = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.auth_url);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TBGetWxPayAuthUrlRsp.Object { 
            return {
                auth_url: this.auth_url
            };
        }

        readFromObject(json: TBGetWxPayAuthUrlRsp.Object) { 
            _hasOwnProperty.call(json, "auth_url") && (this.auth_url = json.auth_url!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TBGetWxPayAuthUrlRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TBGetWxPayAuthUrlRsp._readFrom(is);
        }
    }

    export namespace TBGetWxPayAuthUrlRsp {
        export interface Object {
            auth_url?: string;
        }
    }

    export class TBNotifyWxPayAuthReq {
        auth_token: string = "";
        auth_state: number = 0;
        login_id: string = "";
        openid: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TBNotifyWxPayAuthReq";
        protected static _classname = "JV.TBNotifyWxPayAuthReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TBNotifyWxPayAuthReq;
            tmp.auth_token = is.readString(0, false, "");
            tmp.auth_state = is.readInt32(1, false, 0);
            tmp.login_id = is.readString(2, false, "");
            tmp.openid = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.auth_token);
            os.writeInt32(1, this.auth_state);
            os.writeString(2, this.login_id);
            os.writeString(3, this.openid);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TBNotifyWxPayAuthReq.Object { 
            return {
                auth_token: this.auth_token,
                auth_state: this.auth_state,
                login_id: this.login_id,
                openid: this.openid
            };
        }

        readFromObject(json: TBNotifyWxPayAuthReq.Object) { 
            _hasOwnProperty.call(json, "auth_token") && (this.auth_token = json.auth_token!);
            _hasOwnProperty.call(json, "auth_state") && (this.auth_state = json.auth_state!);
            _hasOwnProperty.call(json, "login_id") && (this.login_id = json.login_id!);
            _hasOwnProperty.call(json, "openid") && (this.openid = json.openid!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TBNotifyWxPayAuthReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TBNotifyWxPayAuthReq._readFrom(is);
        }
    }

    export namespace TBNotifyWxPayAuthReq {
        export interface Object {
            auth_token?: string;
            auth_state?: number;
            login_id?: string;
            openid?: string;
        }
    }

    export class TBNotifyWxPayAuthRsp {
        dummy: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TBNotifyWxPayAuthRsp";
        protected static _classname = "JV.TBNotifyWxPayAuthRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TBNotifyWxPayAuthRsp;
            tmp.dummy = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.dummy);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TBNotifyWxPayAuthRsp.Object { 
            return {
                dummy: this.dummy
            };
        }

        readFromObject(json: TBNotifyWxPayAuthRsp.Object) { 
            _hasOwnProperty.call(json, "dummy") && (this.dummy = json.dummy!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TBNotifyWxPayAuthRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TBNotifyWxPayAuthRsp._readFrom(is);
        }
    }

    export namespace TBNotifyWxPayAuthRsp {
        export interface Object {
            dummy?: string;
        }
    }

    export class WxProxyServantProxy {
        protected _name!: string
        protected _worker!: TarsRpc.ObjectProxy

        setTimeout (iTimeout: number) { this._worker.timeout = iTimeout; }
        getTimeout () { return this._worker.timeout; }
        setVersion (iVersion: number) { this._worker.version = iVersion; }
        getVersion () { return this._worker.version; }

        static genWechatAppQrCode = _castFunctionInfo({
            name: "genWechatAppQrCode",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TGenWechatAppQrCodeReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TGenWechatAppQrCodeRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TGenWechatAppQrCodeReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TGenWechatAppQrCodeRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TGenWechatAppQrCodeReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TGenWechatAppQrCodeRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call WxProxyServant::genWechatAppQrCode failed");
            }
        })

        genWechatAppQrCode(req: JV.TGenWechatAppQrCodeReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("genWechatAppQrCode", WxProxyServantProxy.genWechatAppQrCode.tupEncoder(req, version), options, WxProxyServantProxy.genWechatAppQrCode).then(WxProxyServantProxy.genWechatAppQrCode.tupDecoder, WxProxyServantProxy.genWechatAppQrCode.errorResponser);
            } else {
                return this._worker.tars_invoke("genWechatAppQrCode", WxProxyServantProxy.genWechatAppQrCode.tarsEncoder(req), options, WxProxyServantProxy.genWechatAppQrCode).then(WxProxyServantProxy.genWechatAppQrCode.tarsDecoder, WxProxyServantProxy.genWechatAppQrCode.errorResponser);
            }
        }

        static getDeveloperAccessToken = _castFunctionInfo({
            name: "getDeveloperAccessToken",
            return: "int32",
            arguments: [{
                name: "appid",
                class: "string",
                direction: "in"
            }, {
                name: "access_token",
                class: "string",
                direction: "out"
            }],
            tarsEncoder(appid: string) {
                const os = new TarsStream.TarsOutputStream();
                os.writeString(1, appid);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                access_token: is.readString(2, true, "")
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(appid: string, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeString("appid", appid);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                access_token: tup.readString("access_token")
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call WxProxyServant::getDeveloperAccessToken failed");
            }
        })

        getDeveloperAccessToken(appid: string, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("getDeveloperAccessToken", WxProxyServantProxy.getDeveloperAccessToken.tupEncoder(appid, version), options, WxProxyServantProxy.getDeveloperAccessToken).then(WxProxyServantProxy.getDeveloperAccessToken.tupDecoder, WxProxyServantProxy.getDeveloperAccessToken.errorResponser);
            } else {
                return this._worker.tars_invoke("getDeveloperAccessToken", WxProxyServantProxy.getDeveloperAccessToken.tarsEncoder(appid), options, WxProxyServantProxy.getDeveloperAccessToken).then(WxProxyServantProxy.getDeveloperAccessToken.tarsDecoder, WxProxyServantProxy.getDeveloperAccessToken.errorResponser);
            }
        }

        static getFaceVerifyResult = _castFunctionInfo({
            name: "getFaceVerifyResult",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TGetFaceVerifyResultReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TGetFaceVerifyResultRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TGetFaceVerifyResultReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TGetFaceVerifyResultRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TGetFaceVerifyResultReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TGetFaceVerifyResultRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call WxProxyServant::getFaceVerifyResult failed");
            }
        })

        getFaceVerifyResult(req: JV.TGetFaceVerifyResultReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("getFaceVerifyResult", WxProxyServantProxy.getFaceVerifyResult.tupEncoder(req, version), options, WxProxyServantProxy.getFaceVerifyResult).then(WxProxyServantProxy.getFaceVerifyResult.tupDecoder, WxProxyServantProxy.getFaceVerifyResult.errorResponser);
            } else {
                return this._worker.tars_invoke("getFaceVerifyResult", WxProxyServantProxy.getFaceVerifyResult.tarsEncoder(req), options, WxProxyServantProxy.getFaceVerifyResult).then(WxProxyServantProxy.getFaceVerifyResult.tarsDecoder, WxProxyServantProxy.getFaceVerifyResult.errorResponser);
            }
        }

        static getJsApiTicket = _castFunctionInfo({
            name: "getJsApiTicket",
            return: "int32",
            arguments: [{
                name: "appid",
                class: "string",
                direction: "in"
            }, {
                name: "jsapi_ticket",
                class: "string",
                direction: "out"
            }],
            tarsEncoder(appid: string) {
                const os = new TarsStream.TarsOutputStream();
                os.writeString(1, appid);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                jsapi_ticket: is.readString(2, true, "")
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(appid: string, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeString("appid", appid);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                jsapi_ticket: tup.readString("jsapi_ticket")
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call WxProxyServant::getJsApiTicket failed");
            }
        })

        getJsApiTicket(appid: string, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("getJsApiTicket", WxProxyServantProxy.getJsApiTicket.tupEncoder(appid, version), options, WxProxyServantProxy.getJsApiTicket).then(WxProxyServantProxy.getJsApiTicket.tupDecoder, WxProxyServantProxy.getJsApiTicket.errorResponser);
            } else {
                return this._worker.tars_invoke("getJsApiTicket", WxProxyServantProxy.getJsApiTicket.tarsEncoder(appid), options, WxProxyServantProxy.getJsApiTicket).then(WxProxyServantProxy.getJsApiTicket.tarsDecoder, WxProxyServantProxy.getJsApiTicket.errorResponser);
            }
        }

        static getWeChatToken = _castFunctionInfo({
            name: "getWeChatToken",
            return: "int32",
            arguments: [{
                name: "code",
                class: "string",
                direction: "in"
            }, {
                name: "appid",
                class: "string",
                direction: "in"
            }, {
                name: "access_token",
                class: "JV.TWeChatAccessToken",
                direction: "out"
            }],
            tarsEncoder(code: string, appid: string) {
                const os = new TarsStream.TarsOutputStream();
                os.writeString(1, code);
                os.writeString(2, appid);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                access_token: is.readStruct(3, true, JV.TWeChatAccessToken)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(code: string, appid: string, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeString("code", code);
                tup.writeString("appid", appid);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                access_token: tup.readStruct("access_token", JV.TWeChatAccessToken)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call WxProxyServant::getWeChatToken failed");
            }
        })

        getWeChatToken(code: string, appid: string, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("getWeChatToken", WxProxyServantProxy.getWeChatToken.tupEncoder(code, appid, version), options, WxProxyServantProxy.getWeChatToken).then(WxProxyServantProxy.getWeChatToken.tupDecoder, WxProxyServantProxy.getWeChatToken.errorResponser);
            } else {
                return this._worker.tars_invoke("getWeChatToken", WxProxyServantProxy.getWeChatToken.tarsEncoder(code, appid), options, WxProxyServantProxy.getWeChatToken).then(WxProxyServantProxy.getWeChatToken.tarsDecoder, WxProxyServantProxy.getWeChatToken.errorResponser);
            }
        }

        static getWeChatUserInfo = _castFunctionInfo({
            name: "getWeChatUserInfo",
            return: "int32",
            arguments: [{
                name: "openid",
                class: "string",
                direction: "in"
            }, {
                name: "access_token",
                class: "string",
                direction: "in"
            }, {
                name: "wechat_user_info",
                class: "JV.TWeChatUserInfo",
                direction: "out"
            }],
            tarsEncoder(openid: string, access_token: string) {
                const os = new TarsStream.TarsOutputStream();
                os.writeString(1, openid);
                os.writeString(2, access_token);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                wechat_user_info: is.readStruct(3, true, JV.TWeChatUserInfo)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(openid: string, access_token: string, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeString("openid", openid);
                tup.writeString("access_token", access_token);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                wechat_user_info: tup.readStruct("wechat_user_info", JV.TWeChatUserInfo)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call WxProxyServant::getWeChatUserInfo failed");
            }
        })

        getWeChatUserInfo(openid: string, access_token: string, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("getWeChatUserInfo", WxProxyServantProxy.getWeChatUserInfo.tupEncoder(openid, access_token, version), options, WxProxyServantProxy.getWeChatUserInfo).then(WxProxyServantProxy.getWeChatUserInfo.tupDecoder, WxProxyServantProxy.getWeChatUserInfo.errorResponser);
            } else {
                return this._worker.tars_invoke("getWeChatUserInfo", WxProxyServantProxy.getWeChatUserInfo.tarsEncoder(openid, access_token), options, WxProxyServantProxy.getWeChatUserInfo).then(WxProxyServantProxy.getWeChatUserInfo.tarsDecoder, WxProxyServantProxy.getWeChatUserInfo.errorResponser);
            }
        }

        static getWxPayAuthUrl = _castFunctionInfo({
            name: "getWxPayAuthUrl",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TBGetWxPayAuthUrlReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TBGetWxPayAuthUrlRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TBGetWxPayAuthUrlReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TBGetWxPayAuthUrlRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TBGetWxPayAuthUrlReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TBGetWxPayAuthUrlRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call WxProxyServant::getWxPayAuthUrl failed");
            }
        })

        getWxPayAuthUrl(req: JV.TBGetWxPayAuthUrlReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("getWxPayAuthUrl", WxProxyServantProxy.getWxPayAuthUrl.tupEncoder(req, version), options, WxProxyServantProxy.getWxPayAuthUrl).then(WxProxyServantProxy.getWxPayAuthUrl.tupDecoder, WxProxyServantProxy.getWxPayAuthUrl.errorResponser);
            } else {
                return this._worker.tars_invoke("getWxPayAuthUrl", WxProxyServantProxy.getWxPayAuthUrl.tarsEncoder(req), options, WxProxyServantProxy.getWxPayAuthUrl).then(WxProxyServantProxy.getWxPayAuthUrl.tarsDecoder, WxProxyServantProxy.getWxPayAuthUrl.errorResponser);
            }
        }

        static jscodeToSession = _castFunctionInfo({
            name: "jscodeToSession",
            return: "int32",
            arguments: [{
                name: "code",
                class: "string",
                direction: "in"
            }, {
                name: "appid",
                class: "string",
                direction: "in"
            }, {
                name: "applets_session",
                class: "JV.TAppletsSession",
                direction: "out"
            }],
            tarsEncoder(code: string, appid: string) {
                const os = new TarsStream.TarsOutputStream();
                os.writeString(1, code);
                os.writeString(2, appid);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                applets_session: is.readStruct(3, true, JV.TAppletsSession)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(code: string, appid: string, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeString("code", code);
                tup.writeString("appid", appid);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                applets_session: tup.readStruct("applets_session", JV.TAppletsSession)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call WxProxyServant::jscodeToSession failed");
            }
        })

        jscodeToSession(code: string, appid: string, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("jscodeToSession", WxProxyServantProxy.jscodeToSession.tupEncoder(code, appid, version), options, WxProxyServantProxy.jscodeToSession).then(WxProxyServantProxy.jscodeToSession.tupDecoder, WxProxyServantProxy.jscodeToSession.errorResponser);
            } else {
                return this._worker.tars_invoke("jscodeToSession", WxProxyServantProxy.jscodeToSession.tarsEncoder(code, appid), options, WxProxyServantProxy.jscodeToSession).then(WxProxyServantProxy.jscodeToSession.tarsDecoder, WxProxyServantProxy.jscodeToSession.errorResponser);
            }
        }

        static notifyWxPayAuth = _castFunctionInfo({
            name: "notifyWxPayAuth",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TBNotifyWxPayAuthReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TBNotifyWxPayAuthRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TBNotifyWxPayAuthReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TBNotifyWxPayAuthRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TBNotifyWxPayAuthReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TBNotifyWxPayAuthRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call WxProxyServant::notifyWxPayAuth failed");
            }
        })

        notifyWxPayAuth(req: JV.TBNotifyWxPayAuthReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("notifyWxPayAuth", WxProxyServantProxy.notifyWxPayAuth.tupEncoder(req, version), options, WxProxyServantProxy.notifyWxPayAuth).then(WxProxyServantProxy.notifyWxPayAuth.tupDecoder, WxProxyServantProxy.notifyWxPayAuth.errorResponser);
            } else {
                return this._worker.tars_invoke("notifyWxPayAuth", WxProxyServantProxy.notifyWxPayAuth.tarsEncoder(req), options, WxProxyServantProxy.notifyWxPayAuth).then(WxProxyServantProxy.notifyWxPayAuth.tarsDecoder, WxProxyServantProxy.notifyWxPayAuth.errorResponser);
            }
        }


    }

}


