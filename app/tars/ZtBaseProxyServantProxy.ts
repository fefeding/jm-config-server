// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "ZtBaseProxyServant.tars" by Client Mode
// **********************************************************************

/* tslint:disable */
/* eslint-disable */

/// <reference types="node" />
import assert = require("assert");
import * as TarsStream from "@tars/stream";
import * as TarsRpc from "@tars/rpc";

const _hasOwnProperty = Object.prototype.hasOwnProperty;
function _castFunctionInfo<Ret, Arg>(data: SharedFunctionInfo<Ret, Arg>) { return data; }
function _makeError(data: TarsRpc.RpcResponse, message: string, type?: number): TarsRpc.RpcError {
    var error: any = new Error(message || "");
    error.request = data.request;
    error.response = {
        costtime: data.request.costtime
    };
    if (type === TarsRpc.error.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            code: type,
            message: message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
}

export interface SharedFunctionInfo<Ret = any, Arg = any> extends TarsRpc.SharedFunctionInfo {
    tarsEncoder (...args: any[]): TarsStream.BinBuffer,
    tarsDecoder (data: TarsRpc.RpcResponse): TarsRpc.ProxyResponse<Ret, Arg>,
    tupEncoder (...args: any[]): TarsStream.UniAttribute,
    tupDecoder (data: TarsRpc.RpcResponse): TarsRpc.ProxyResponse<Ret, Arg>,
    errorResponser (data: TarsRpc.RpcResponse): never
}

export namespace JV {
    export enum EAgreementFileType {
        EAgreementFileTypePdf = 0,
        EAgreementFileTypeHtml = 1
    }

    export namespace EAgreementFileType {
        export const _classname = "JV.EAgreementFileType";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }

    export enum EAgreementUploadUserType {
        EAgreementUploadUserTypeIndividual = 0,
        EAgreementUploadUserTypeCompany = 1,
        EAgreementUploadUserTypeProduct = 2
    }

    export namespace EAgreementUploadUserType {
        export const _classname = "JV.EAgreementUploadUserType";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }

    export enum EAgreementImgGetMode {
        EAgreementImgGetModeVideo = 3,
        EAgreementImgGetModeAgreement = 5
    }

    export namespace EAgreementImgGetMode {
        export const _classname = "JV.EAgreementImgGetMode";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }

    export enum EAgreementImgGroup {
        EAgreementImgGroupGm = 11,
        EAgreementImgGroupSm = 12,
        EAgreementImgGroupSypz = 13,
        EAgreementImgGroupJv = 15
    }

    export namespace EAgreementImgGroup {
        export const _classname = "JV.EAgreementImgGroup";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }

    export enum EAgreementValidState {
        EAgreementValid = 0,
        EAgreementInvalid = 1
    }

    export namespace EAgreementValidState {
        export const _classname = "JV.EAgreementValidState";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }

    export enum ECallType {
        ECallTypeSeat = 1,
        ECallTypeKey = 2,
        ECallTypeRecFile = 3
    }

    export namespace ECallType {
        export const _classname = "JV.ECallType";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }


    export class TAgreementGetSerialNoReq {
        sno_type: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementGetSerialNoReq";
        protected static _classname = "JV.TAgreementGetSerialNoReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementGetSerialNoReq;
            tmp.sno_type = is.readString(0, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.sno_type);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementGetSerialNoReq.Object { 
            return {
                sno_type: this.sno_type
            };
        }

        readFromObject(json: TAgreementGetSerialNoReq.Object) { 
            _hasOwnProperty.call(json, "sno_type") && (this.sno_type = json.sno_type);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementGetSerialNoReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementGetSerialNoReq._readFrom(is);
        }
    }

    export namespace TAgreementGetSerialNoReq {
        export interface Object {
            sno_type: string;
        }
    }

    export class TAgreementGetSerialNoRsp {
        sno: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementGetSerialNoRsp";
        protected static _classname = "JV.TAgreementGetSerialNoRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementGetSerialNoRsp;
            tmp.sno = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.sno);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementGetSerialNoRsp.Object { 
            return {
                sno: this.sno
            };
        }

        readFromObject(json: TAgreementGetSerialNoRsp.Object) { 
            _hasOwnProperty.call(json, "sno") && (this.sno = json.sno!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementGetSerialNoRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementGetSerialNoRsp._readFrom(is);
        }
    }

    export namespace TAgreementGetSerialNoRsp {
        export interface Object {
            sno?: string;
        }
    }

    export class TAgreementSignReq {
        b_sno: string = "";
        busi_code: string = "";
        busi_detail: string = "";
        channel: string = "";
        org_code: string = "";
        sys_cust_no: string = "";
        cust_name: string = "";
        id_type: string = "";
        id_card: string = "";
        sys_code: string = "";
        phone_number: string = "";
        ext_info: string = "";
        user_type: string = "";
        font_type: string = "";
        accept_param: TarsStream.Map<string, string> = new TarsStream.Map(TarsStream.String, TarsStream.String);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementSignReq";
        protected static _classname = "JV.TAgreementSignReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementSignReq;
            tmp.b_sno = is.readString(0, true, "");
            tmp.busi_code = is.readString(1, true, "");
            tmp.busi_detail = is.readString(2, true, "");
            tmp.channel = is.readString(3, true, "");
            tmp.org_code = is.readString(4, true, "");
            tmp.sys_cust_no = is.readString(5, true, "");
            tmp.cust_name = is.readString(6, true, "");
            tmp.id_type = is.readString(7, true, "");
            tmp.id_card = is.readString(8, true, "");
            tmp.sys_code = is.readString(9, true, "");
            tmp.phone_number = is.readString(10, true, "");
            tmp.ext_info = is.readString(11, true, "");
            tmp.user_type = is.readString(12, true, "");
            tmp.font_type = is.readString(13, true, "");
            tmp.accept_param = is.readMap(14, false, TarsStream.Map(TarsStream.String, TarsStream.String));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.b_sno);
            os.writeString(1, this.busi_code);
            os.writeString(2, this.busi_detail);
            os.writeString(3, this.channel);
            os.writeString(4, this.org_code);
            os.writeString(5, this.sys_cust_no);
            os.writeString(6, this.cust_name);
            os.writeString(7, this.id_type);
            os.writeString(8, this.id_card);
            os.writeString(9, this.sys_code);
            os.writeString(10, this.phone_number);
            os.writeString(11, this.ext_info);
            os.writeString(12, this.user_type);
            os.writeString(13, this.font_type);
            os.writeMap(14, this.accept_param);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementSignReq.Object { 
            return {
                b_sno: this.b_sno,
                busi_code: this.busi_code,
                busi_detail: this.busi_detail,
                channel: this.channel,
                org_code: this.org_code,
                sys_cust_no: this.sys_cust_no,
                cust_name: this.cust_name,
                id_type: this.id_type,
                id_card: this.id_card,
                sys_code: this.sys_code,
                phone_number: this.phone_number,
                ext_info: this.ext_info,
                user_type: this.user_type,
                font_type: this.font_type,
                accept_param: this.accept_param.toObject()
            };
        }

        readFromObject(json: TAgreementSignReq.Object) { 
            _hasOwnProperty.call(json, "b_sno") && (this.b_sno = json.b_sno);
            _hasOwnProperty.call(json, "busi_code") && (this.busi_code = json.busi_code);
            _hasOwnProperty.call(json, "busi_detail") && (this.busi_detail = json.busi_detail);
            _hasOwnProperty.call(json, "channel") && (this.channel = json.channel);
            _hasOwnProperty.call(json, "org_code") && (this.org_code = json.org_code);
            _hasOwnProperty.call(json, "sys_cust_no") && (this.sys_cust_no = json.sys_cust_no);
            _hasOwnProperty.call(json, "cust_name") && (this.cust_name = json.cust_name);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type);
            _hasOwnProperty.call(json, "id_card") && (this.id_card = json.id_card);
            _hasOwnProperty.call(json, "sys_code") && (this.sys_code = json.sys_code);
            _hasOwnProperty.call(json, "phone_number") && (this.phone_number = json.phone_number);
            _hasOwnProperty.call(json, "ext_info") && (this.ext_info = json.ext_info);
            _hasOwnProperty.call(json, "user_type") && (this.user_type = json.user_type);
            _hasOwnProperty.call(json, "font_type") && (this.font_type = json.font_type);
            _hasOwnProperty.call(json, "accept_param") && (this.accept_param.readFromObject(json.accept_param!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementSignReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementSignReq._readFrom(is);
        }
    }

    export namespace TAgreementSignReq {
        export interface Object {
            b_sno: string;
            busi_code: string;
            busi_detail: string;
            channel: string;
            org_code: string;
            sys_cust_no: string;
            cust_name: string;
            id_type: string;
            id_card: string;
            sys_code: string;
            phone_number: string;
            ext_info: string;
            user_type: string;
            font_type: string;
            accept_param?: Record<string, string>;
        }
    }

    export class TAgreementSignRsp {
        dummy: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementSignRsp";
        protected static _classname = "JV.TAgreementSignRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementSignRsp;
            tmp.dummy = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.dummy);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementSignRsp.Object { 
            return {
                dummy: this.dummy
            };
        }

        readFromObject(json: TAgreementSignRsp.Object) { 
            _hasOwnProperty.call(json, "dummy") && (this.dummy = json.dummy!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementSignRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementSignRsp._readFrom(is);
        }
    }

    export namespace TAgreementSignRsp {
        export interface Object {
            dummy?: string;
        }
    }

    export class TAgreementImgSaveReq {
        b_sno: string = "";
        img_cls: string = "";
        org_code: string = "";
        img_fmt: string = "";
        page_num: string = "";
        img_data: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementImgSaveReq";
        protected static _classname = "JV.TAgreementImgSaveReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementImgSaveReq;
            tmp.b_sno = is.readString(0, true, "");
            tmp.img_cls = is.readString(1, true, "");
            tmp.org_code = is.readString(2, true, "");
            tmp.img_fmt = is.readString(3, true, "");
            tmp.page_num = is.readString(4, false, "");
            tmp.img_data = is.readString(5, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.b_sno);
            os.writeString(1, this.img_cls);
            os.writeString(2, this.org_code);
            os.writeString(3, this.img_fmt);
            os.writeString(4, this.page_num);
            os.writeString(5, this.img_data);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementImgSaveReq.Object { 
            return {
                b_sno: this.b_sno,
                img_cls: this.img_cls,
                org_code: this.org_code,
                img_fmt: this.img_fmt,
                page_num: this.page_num,
                img_data: this.img_data
            };
        }

        readFromObject(json: TAgreementImgSaveReq.Object) { 
            _hasOwnProperty.call(json, "b_sno") && (this.b_sno = json.b_sno);
            _hasOwnProperty.call(json, "img_cls") && (this.img_cls = json.img_cls);
            _hasOwnProperty.call(json, "org_code") && (this.org_code = json.org_code);
            _hasOwnProperty.call(json, "img_fmt") && (this.img_fmt = json.img_fmt);
            _hasOwnProperty.call(json, "page_num") && (this.page_num = json.page_num!);
            _hasOwnProperty.call(json, "img_data") && (this.img_data = json.img_data);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementImgSaveReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementImgSaveReq._readFrom(is);
        }
    }

    export namespace TAgreementImgSaveReq {
        export interface Object {
            b_sno: string;
            img_cls: string;
            org_code: string;
            img_fmt: string;
            page_num?: string;
            img_data: string;
        }
    }

    export class TAgreementImgSaveRsp {
        img_sn: string = "";
        page_num: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementImgSaveRsp";
        protected static _classname = "JV.TAgreementImgSaveRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementImgSaveRsp;
            tmp.img_sn = is.readString(0, false, "");
            tmp.page_num = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_sn);
            os.writeString(1, this.page_num);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementImgSaveRsp.Object { 
            return {
                img_sn: this.img_sn,
                page_num: this.page_num
            };
        }

        readFromObject(json: TAgreementImgSaveRsp.Object) { 
            _hasOwnProperty.call(json, "img_sn") && (this.img_sn = json.img_sn!);
            _hasOwnProperty.call(json, "page_num") && (this.page_num = json.page_num!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementImgSaveRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementImgSaveRsp._readFrom(is);
        }
    }

    export namespace TAgreementImgSaveRsp {
        export interface Object {
            img_sn?: string;
            page_num?: string;
        }
    }

    export class TAgreementQueryReq {
        b_sno: string = "";
        img_cls: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementQueryReq";
        protected static _classname = "JV.TAgreementQueryReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementQueryReq;
            tmp.b_sno = is.readString(0, true, "");
            tmp.img_cls = is.readString(1, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.b_sno);
            os.writeString(1, this.img_cls);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementQueryReq.Object { 
            return {
                b_sno: this.b_sno,
                img_cls: this.img_cls
            };
        }

        readFromObject(json: TAgreementQueryReq.Object) { 
            _hasOwnProperty.call(json, "b_sno") && (this.b_sno = json.b_sno);
            _hasOwnProperty.call(json, "img_cls") && (this.img_cls = json.img_cls);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementQueryReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementQueryReq._readFrom(is);
        }
    }

    export namespace TAgreementQueryReq {
        export interface Object {
            b_sno: string;
            img_cls: string;
        }
    }

    export class TAgreementQueryRspItem {
        img_sn: string = "";
        page_num: string = "";
        img_fmt: string = "";
        img_cls: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementQueryRspItem";
        protected static _classname = "JV.TAgreementQueryRspItem";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementQueryRspItem;
            tmp.img_sn = is.readString(0, false, "");
            tmp.page_num = is.readString(1, false, "");
            tmp.img_fmt = is.readString(2, false, "");
            tmp.img_cls = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_sn);
            os.writeString(1, this.page_num);
            os.writeString(2, this.img_fmt);
            os.writeString(3, this.img_cls);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementQueryRspItem.Object { 
            return {
                img_sn: this.img_sn,
                page_num: this.page_num,
                img_fmt: this.img_fmt,
                img_cls: this.img_cls
            };
        }

        readFromObject(json: TAgreementQueryRspItem.Object) { 
            _hasOwnProperty.call(json, "img_sn") && (this.img_sn = json.img_sn!);
            _hasOwnProperty.call(json, "page_num") && (this.page_num = json.page_num!);
            _hasOwnProperty.call(json, "img_fmt") && (this.img_fmt = json.img_fmt!);
            _hasOwnProperty.call(json, "img_cls") && (this.img_cls = json.img_cls!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementQueryRspItem();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementQueryRspItem._readFrom(is);
        }
    }

    export namespace TAgreementQueryRspItem {
        export interface Object {
            img_sn?: string;
            page_num?: string;
            img_fmt?: string;
            img_cls?: string;
        }
    }

    export class TAgreementQueryRsp {
        agreement_list: TarsStream.List<JV.TAgreementQueryRspItem> = new TarsStream.List(JV.TAgreementQueryRspItem);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementQueryRsp";
        protected static _classname = "JV.TAgreementQueryRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementQueryRsp;
            tmp.agreement_list = is.readList(0, false, TarsStream.List(JV.TAgreementQueryRspItem));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeList(0, this.agreement_list);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementQueryRsp.Object { 
            return {
                agreement_list: this.agreement_list.toObject()
            };
        }

        readFromObject(json: TAgreementQueryRsp.Object) { 
            _hasOwnProperty.call(json, "agreement_list") && (this.agreement_list.readFromObject(json.agreement_list!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementQueryRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementQueryRsp._readFrom(is);
        }
    }

    export namespace TAgreementQueryRsp {
        export interface Object {
            agreement_list?: Array<JV.TAgreementQueryRspItem.Object>;
        }
    }

    export class TAgreementDownloadReq {
        b_sno: string = "";
        img_cls: string = "";
        img_sn: string = "";
        page_num: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementDownloadReq";
        protected static _classname = "JV.TAgreementDownloadReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementDownloadReq;
            tmp.b_sno = is.readString(0, true, "");
            tmp.img_cls = is.readString(1, true, "");
            tmp.img_sn = is.readString(2, true, "");
            tmp.page_num = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.b_sno);
            os.writeString(1, this.img_cls);
            os.writeString(2, this.img_sn);
            os.writeString(3, this.page_num);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementDownloadReq.Object { 
            return {
                b_sno: this.b_sno,
                img_cls: this.img_cls,
                img_sn: this.img_sn,
                page_num: this.page_num
            };
        }

        readFromObject(json: TAgreementDownloadReq.Object) { 
            _hasOwnProperty.call(json, "b_sno") && (this.b_sno = json.b_sno);
            _hasOwnProperty.call(json, "img_cls") && (this.img_cls = json.img_cls);
            _hasOwnProperty.call(json, "img_sn") && (this.img_sn = json.img_sn);
            _hasOwnProperty.call(json, "page_num") && (this.page_num = json.page_num!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementDownloadReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementDownloadReq._readFrom(is);
        }
    }

    export namespace TAgreementDownloadReq {
        export interface Object {
            b_sno: string;
            img_cls: string;
            img_sn: string;
            page_num?: string;
        }
    }

    export class TAgreementDownloadRsp {
        img_sn: string = "";
        page_num: string = "";
        page_name: string = "";
        img_fmt: string = "";
        md5_code: string = "";
        img_data: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementDownloadRsp";
        protected static _classname = "JV.TAgreementDownloadRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementDownloadRsp;
            tmp.img_sn = is.readString(0, true, "");
            tmp.page_num = is.readString(1, true, "");
            tmp.page_name = is.readString(2, true, "");
            tmp.img_fmt = is.readString(3, true, "");
            tmp.md5_code = is.readString(4, true, "");
            tmp.img_data = is.readString(5, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_sn);
            os.writeString(1, this.page_num);
            os.writeString(2, this.page_name);
            os.writeString(3, this.img_fmt);
            os.writeString(4, this.md5_code);
            os.writeString(5, this.img_data);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementDownloadRsp.Object { 
            return {
                img_sn: this.img_sn,
                page_num: this.page_num,
                page_name: this.page_name,
                img_fmt: this.img_fmt,
                md5_code: this.md5_code,
                img_data: this.img_data
            };
        }

        readFromObject(json: TAgreementDownloadRsp.Object) { 
            _hasOwnProperty.call(json, "img_sn") && (this.img_sn = json.img_sn);
            _hasOwnProperty.call(json, "page_num") && (this.page_num = json.page_num);
            _hasOwnProperty.call(json, "page_name") && (this.page_name = json.page_name);
            _hasOwnProperty.call(json, "img_fmt") && (this.img_fmt = json.img_fmt);
            _hasOwnProperty.call(json, "md5_code") && (this.md5_code = json.md5_code);
            _hasOwnProperty.call(json, "img_data") && (this.img_data = json.img_data);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementDownloadRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementDownloadRsp._readFrom(is);
        }
    }

    export namespace TAgreementDownloadRsp {
        export interface Object {
            img_sn: string;
            page_num: string;
            page_name: string;
            img_fmt: string;
            md5_code: string;
            img_data: string;
        }
    }

    export class TAgreementUploadReq {
        img_cls: string = "";
        img_cls_name: string = "";
        img_url: string = "";
        busi_code: string = "";
        busi_name: string = "";
        busi_detail: string = "";
        busi_detail_name: string = "";
        img_group: JV.EAgreementImgGroup = JV.EAgreementImgGroup.EAgreementImgGroupGm;
        is_can_use: JV.EAgreementValidState = JV.EAgreementValidState.EAgreementValid;
        dpi: string = "";
        template_params: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementUploadReq";
        protected static _classname = "JV.TAgreementUploadReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementUploadReq;
            tmp.img_cls = is.readString(0, true, "");
            tmp.img_cls_name = is.readString(1, true, "");
            tmp.img_url = is.readString(2, false, "");
            tmp.busi_code = is.readString(3, false, "");
            tmp.busi_name = is.readString(4, false, "");
            tmp.busi_detail = is.readString(5, false, "");
            tmp.busi_detail_name = is.readString(6, false, "");
            tmp.img_group = is.readInt32(7, false, JV.EAgreementImgGroup.EAgreementImgGroupGm);
            tmp.is_can_use = is.readInt32(8, false, JV.EAgreementValidState.EAgreementValid);
            tmp.dpi = is.readString(9, false, "");
            tmp.template_params = is.readString(10, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_cls);
            os.writeString(1, this.img_cls_name);
            os.writeString(2, this.img_url);
            os.writeString(3, this.busi_code);
            os.writeString(4, this.busi_name);
            os.writeString(5, this.busi_detail);
            os.writeString(6, this.busi_detail_name);
            os.writeInt32(7, this.img_group);
            os.writeInt32(8, this.is_can_use);
            os.writeString(9, this.dpi);
            os.writeString(10, this.template_params);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementUploadReq.Object { 
            return {
                img_cls: this.img_cls,
                img_cls_name: this.img_cls_name,
                img_url: this.img_url,
                busi_code: this.busi_code,
                busi_name: this.busi_name,
                busi_detail: this.busi_detail,
                busi_detail_name: this.busi_detail_name,
                img_group: this.img_group,
                is_can_use: this.is_can_use,
                dpi: this.dpi,
                template_params: this.template_params
            };
        }

        readFromObject(json: TAgreementUploadReq.Object) { 
            _hasOwnProperty.call(json, "img_cls") && (this.img_cls = json.img_cls);
            _hasOwnProperty.call(json, "img_cls_name") && (this.img_cls_name = json.img_cls_name);
            _hasOwnProperty.call(json, "img_url") && (this.img_url = json.img_url!);
            _hasOwnProperty.call(json, "busi_code") && (this.busi_code = json.busi_code!);
            _hasOwnProperty.call(json, "busi_name") && (this.busi_name = json.busi_name!);
            _hasOwnProperty.call(json, "busi_detail") && (this.busi_detail = json.busi_detail!);
            _hasOwnProperty.call(json, "busi_detail_name") && (this.busi_detail_name = json.busi_detail_name!);
            _hasOwnProperty.call(json, "img_group") && (this.img_group = json.img_group!);
            _hasOwnProperty.call(json, "is_can_use") && (this.is_can_use = json.is_can_use!);
            _hasOwnProperty.call(json, "dpi") && (this.dpi = json.dpi!);
            _hasOwnProperty.call(json, "template_params") && (this.template_params = json.template_params!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementUploadReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementUploadReq._readFrom(is);
        }
    }

    export namespace TAgreementUploadReq {
        export interface Object {
            img_cls: string;
            img_cls_name: string;
            img_url?: string;
            busi_code?: string;
            busi_name?: string;
            busi_detail?: string;
            busi_detail_name?: string;
            img_group?: JV.EAgreementImgGroup;
            is_can_use?: JV.EAgreementValidState;
            dpi?: string;
            template_params?: string;
        }
    }

    export class TAgreementUploadRsp {
        version: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementUploadRsp";
        protected static _classname = "JV.TAgreementUploadRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementUploadRsp;
            tmp.version = is.readString(0, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.version);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementUploadRsp.Object { 
            return {
                version: this.version
            };
        }

        readFromObject(json: TAgreementUploadRsp.Object) { 
            _hasOwnProperty.call(json, "version") && (this.version = json.version);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementUploadRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementUploadRsp._readFrom(is);
        }
    }

    export namespace TAgreementUploadRsp {
        export interface Object {
            version: string;
        }
    }

    export class TAgreementUploadV2Req {
        img_cls: string = "";
        img_cls_name: string = "";
        img_url: string = "";
        img_group: JV.EAgreementImgGroup = JV.EAgreementImgGroup.EAgreementImgGroupGm;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementUploadV2Req";
        protected static _classname = "JV.TAgreementUploadV2Req";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementUploadV2Req;
            tmp.img_cls = is.readString(0, true, "");
            tmp.img_cls_name = is.readString(1, true, "");
            tmp.img_url = is.readString(2, false, "");
            tmp.img_group = is.readInt32(3, false, JV.EAgreementImgGroup.EAgreementImgGroupGm);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_cls);
            os.writeString(1, this.img_cls_name);
            os.writeString(2, this.img_url);
            os.writeInt32(3, this.img_group);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementUploadV2Req.Object { 
            return {
                img_cls: this.img_cls,
                img_cls_name: this.img_cls_name,
                img_url: this.img_url,
                img_group: this.img_group
            };
        }

        readFromObject(json: TAgreementUploadV2Req.Object) { 
            _hasOwnProperty.call(json, "img_cls") && (this.img_cls = json.img_cls);
            _hasOwnProperty.call(json, "img_cls_name") && (this.img_cls_name = json.img_cls_name);
            _hasOwnProperty.call(json, "img_url") && (this.img_url = json.img_url!);
            _hasOwnProperty.call(json, "img_group") && (this.img_group = json.img_group!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementUploadV2Req();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementUploadV2Req._readFrom(is);
        }
    }

    export namespace TAgreementUploadV2Req {
        export interface Object {
            img_cls: string;
            img_cls_name: string;
            img_url?: string;
            img_group?: JV.EAgreementImgGroup;
        }
    }

    export class TAgreementUploadV2Rsp {
        version: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementUploadV2Rsp";
        protected static _classname = "JV.TAgreementUploadV2Rsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementUploadV2Rsp;
            tmp.version = is.readString(0, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.version);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementUploadV2Rsp.Object { 
            return {
                version: this.version
            };
        }

        readFromObject(json: TAgreementUploadV2Rsp.Object) { 
            _hasOwnProperty.call(json, "version") && (this.version = json.version);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementUploadV2Rsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementUploadV2Rsp._readFrom(is);
        }
    }

    export namespace TAgreementUploadV2Rsp {
        export interface Object {
            version: string;
        }
    }

    export class TAgreementTemplateConfigSaveReq {
        img_cls: string = "";
        version: string = "";
        template_params: string = "";
        dpi: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementTemplateConfigSaveReq";
        protected static _classname = "JV.TAgreementTemplateConfigSaveReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementTemplateConfigSaveReq;
            tmp.img_cls = is.readString(0, true, "");
            tmp.version = is.readString(1, true, "");
            tmp.template_params = is.readString(2, false, "");
            tmp.dpi = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_cls);
            os.writeString(1, this.version);
            os.writeString(2, this.template_params);
            os.writeString(3, this.dpi);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementTemplateConfigSaveReq.Object { 
            return {
                img_cls: this.img_cls,
                version: this.version,
                template_params: this.template_params,
                dpi: this.dpi
            };
        }

        readFromObject(json: TAgreementTemplateConfigSaveReq.Object) { 
            _hasOwnProperty.call(json, "img_cls") && (this.img_cls = json.img_cls);
            _hasOwnProperty.call(json, "version") && (this.version = json.version);
            _hasOwnProperty.call(json, "template_params") && (this.template_params = json.template_params!);
            _hasOwnProperty.call(json, "dpi") && (this.dpi = json.dpi!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementTemplateConfigSaveReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementTemplateConfigSaveReq._readFrom(is);
        }
    }

    export namespace TAgreementTemplateConfigSaveReq {
        export interface Object {
            img_cls: string;
            version: string;
            template_params?: string;
            dpi?: string;
        }
    }

    export class TAgreementTemplateConfigSaveRsp {
        dummy: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementTemplateConfigSaveRsp";
        protected static _classname = "JV.TAgreementTemplateConfigSaveRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementTemplateConfigSaveRsp;
            tmp.dummy = is.readString(0, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.dummy);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementTemplateConfigSaveRsp.Object { 
            return {
                dummy: this.dummy
            };
        }

        readFromObject(json: TAgreementTemplateConfigSaveRsp.Object) { 
            _hasOwnProperty.call(json, "dummy") && (this.dummy = json.dummy);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementTemplateConfigSaveRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementTemplateConfigSaveRsp._readFrom(is);
        }
    }

    export namespace TAgreementTemplateConfigSaveRsp {
        export interface Object {
            dummy: string;
        }
    }

    export class TAgreementBindProductReq {
        img_cls: string = "";
        busi_code: string = "";
        busi_name: string = "";
        busi_detail: string = "";
        busi_detail_name: string = "";
        is_can_use: JV.EAgreementValidState = JV.EAgreementValidState.EAgreementValid;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementBindProductReq";
        protected static _classname = "JV.TAgreementBindProductReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementBindProductReq;
            tmp.img_cls = is.readString(0, true, "");
            tmp.busi_code = is.readString(3, false, "");
            tmp.busi_name = is.readString(4, false, "");
            tmp.busi_detail = is.readString(5, false, "");
            tmp.busi_detail_name = is.readString(6, false, "");
            tmp.is_can_use = is.readInt32(8, false, JV.EAgreementValidState.EAgreementValid);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_cls);
            os.writeString(3, this.busi_code);
            os.writeString(4, this.busi_name);
            os.writeString(5, this.busi_detail);
            os.writeString(6, this.busi_detail_name);
            os.writeInt32(8, this.is_can_use);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementBindProductReq.Object { 
            return {
                img_cls: this.img_cls,
                busi_code: this.busi_code,
                busi_name: this.busi_name,
                busi_detail: this.busi_detail,
                busi_detail_name: this.busi_detail_name,
                is_can_use: this.is_can_use
            };
        }

        readFromObject(json: TAgreementBindProductReq.Object) { 
            _hasOwnProperty.call(json, "img_cls") && (this.img_cls = json.img_cls);
            _hasOwnProperty.call(json, "busi_code") && (this.busi_code = json.busi_code!);
            _hasOwnProperty.call(json, "busi_name") && (this.busi_name = json.busi_name!);
            _hasOwnProperty.call(json, "busi_detail") && (this.busi_detail = json.busi_detail!);
            _hasOwnProperty.call(json, "busi_detail_name") && (this.busi_detail_name = json.busi_detail_name!);
            _hasOwnProperty.call(json, "is_can_use") && (this.is_can_use = json.is_can_use!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementBindProductReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementBindProductReq._readFrom(is);
        }
    }

    export namespace TAgreementBindProductReq {
        export interface Object {
            img_cls: string;
            busi_code?: string;
            busi_name?: string;
            busi_detail?: string;
            busi_detail_name?: string;
            is_can_use?: JV.EAgreementValidState;
        }
    }

    export class TAgreementBindProductRsp {
        dummy: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementBindProductRsp";
        protected static _classname = "JV.TAgreementBindProductRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementBindProductRsp;
            tmp.dummy = is.readString(0, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.dummy);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementBindProductRsp.Object { 
            return {
                dummy: this.dummy
            };
        }

        readFromObject(json: TAgreementBindProductRsp.Object) { 
            _hasOwnProperty.call(json, "dummy") && (this.dummy = json.dummy);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementBindProductRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementBindProductRsp._readFrom(is);
        }
    }

    export namespace TAgreementBindProductRsp {
        export interface Object {
            dummy: string;
        }
    }

    export class TAgreementListByProductReq {
        busi_code: string = "";
        busi_detail: string = "";
        is_can_use: JV.EAgreementValidState = JV.EAgreementValidState.EAgreementValid;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementListByProductReq";
        protected static _classname = "JV.TAgreementListByProductReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementListByProductReq;
            tmp.busi_code = is.readString(0, false, "");
            tmp.busi_detail = is.readString(1, false, "");
            tmp.is_can_use = is.readInt32(2, false, JV.EAgreementValidState.EAgreementValid);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.busi_code);
            os.writeString(1, this.busi_detail);
            os.writeInt32(2, this.is_can_use);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementListByProductReq.Object { 
            return {
                busi_code: this.busi_code,
                busi_detail: this.busi_detail,
                is_can_use: this.is_can_use
            };
        }

        readFromObject(json: TAgreementListByProductReq.Object) { 
            _hasOwnProperty.call(json, "busi_code") && (this.busi_code = json.busi_code!);
            _hasOwnProperty.call(json, "busi_detail") && (this.busi_detail = json.busi_detail!);
            _hasOwnProperty.call(json, "is_can_use") && (this.is_can_use = json.is_can_use!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementListByProductReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementListByProductReq._readFrom(is);
        }
    }

    export namespace TAgreementListByProductReq {
        export interface Object {
            busi_code?: string;
            busi_detail?: string;
            is_can_use?: JV.EAgreementValidState;
        }
    }

    export class TAgreementListItemByProduct {
        img_cls: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementListItemByProduct";
        protected static _classname = "JV.TAgreementListItemByProduct";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementListItemByProduct;
            tmp.img_cls = is.readString(0, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_cls);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementListItemByProduct.Object { 
            return {
                img_cls: this.img_cls
            };
        }

        readFromObject(json: TAgreementListItemByProduct.Object) { 
            _hasOwnProperty.call(json, "img_cls") && (this.img_cls = json.img_cls);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementListItemByProduct();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementListItemByProduct._readFrom(is);
        }
    }

    export namespace TAgreementListItemByProduct {
        export interface Object {
            img_cls: string;
        }
    }

    export class TAgreementListByProductRsp {
        img_cls_list: TarsStream.List<JV.TAgreementListItemByProduct> = new TarsStream.List(JV.TAgreementListItemByProduct);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementListByProductRsp";
        protected static _classname = "JV.TAgreementListByProductRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementListByProductRsp;
            tmp.img_cls_list = is.readList(0, false, TarsStream.List(JV.TAgreementListItemByProduct));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeList(0, this.img_cls_list);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementListByProductRsp.Object { 
            return {
                img_cls_list: this.img_cls_list.toObject()
            };
        }

        readFromObject(json: TAgreementListByProductRsp.Object) { 
            _hasOwnProperty.call(json, "img_cls_list") && (this.img_cls_list.readFromObject(json.img_cls_list!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementListByProductRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementListByProductRsp._readFrom(is);
        }
    }

    export namespace TAgreementListByProductRsp {
        export interface Object {
            img_cls_list?: Array<JV.TAgreementListItemByProduct.Object>;
        }
    }

    export class TAgreementBindProductResetReq {
        img_clss: string = "";
        busi_code: string = "";
        busi_detail: string = "";
        is_can_use: JV.EAgreementValidState = JV.EAgreementValidState.EAgreementValid;
        busi_name: string = "";
        busi_detail_name: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementBindProductResetReq";
        protected static _classname = "JV.TAgreementBindProductResetReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementBindProductResetReq;
            tmp.img_clss = is.readString(0, true, "");
            tmp.busi_code = is.readString(1, false, "");
            tmp.busi_detail = is.readString(2, false, "");
            tmp.is_can_use = is.readInt32(3, false, JV.EAgreementValidState.EAgreementValid);
            tmp.busi_name = is.readString(4, false, "");
            tmp.busi_detail_name = is.readString(5, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_clss);
            os.writeString(1, this.busi_code);
            os.writeString(2, this.busi_detail);
            os.writeInt32(3, this.is_can_use);
            os.writeString(4, this.busi_name);
            os.writeString(5, this.busi_detail_name);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementBindProductResetReq.Object { 
            return {
                img_clss: this.img_clss,
                busi_code: this.busi_code,
                busi_detail: this.busi_detail,
                is_can_use: this.is_can_use,
                busi_name: this.busi_name,
                busi_detail_name: this.busi_detail_name
            };
        }

        readFromObject(json: TAgreementBindProductResetReq.Object) { 
            _hasOwnProperty.call(json, "img_clss") && (this.img_clss = json.img_clss);
            _hasOwnProperty.call(json, "busi_code") && (this.busi_code = json.busi_code!);
            _hasOwnProperty.call(json, "busi_detail") && (this.busi_detail = json.busi_detail!);
            _hasOwnProperty.call(json, "is_can_use") && (this.is_can_use = json.is_can_use!);
            _hasOwnProperty.call(json, "busi_name") && (this.busi_name = json.busi_name!);
            _hasOwnProperty.call(json, "busi_detail_name") && (this.busi_detail_name = json.busi_detail_name!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementBindProductResetReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementBindProductResetReq._readFrom(is);
        }
    }

    export namespace TAgreementBindProductResetReq {
        export interface Object {
            img_clss: string;
            busi_code?: string;
            busi_detail?: string;
            is_can_use?: JV.EAgreementValidState;
            busi_name?: string;
            busi_detail_name?: string;
        }
    }

    export class TAgreementBindProductResetRsp {
        dummy: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementBindProductResetRsp";
        protected static _classname = "JV.TAgreementBindProductResetRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementBindProductResetRsp;
            tmp.dummy = is.readString(0, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.dummy);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementBindProductResetRsp.Object { 
            return {
                dummy: this.dummy
            };
        }

        readFromObject(json: TAgreementBindProductResetRsp.Object) { 
            _hasOwnProperty.call(json, "dummy") && (this.dummy = json.dummy);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementBindProductResetRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementBindProductResetRsp._readFrom(is);
        }
    }

    export namespace TAgreementBindProductResetRsp {
        export interface Object {
            dummy: string;
        }
    }

    export class TAgreementVariableReq {
        dummy: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementVariableReq";
        protected static _classname = "JV.TAgreementVariableReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementVariableReq;
            tmp.dummy = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.dummy);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementVariableReq.Object { 
            return {
                dummy: this.dummy
            };
        }

        readFromObject(json: TAgreementVariableReq.Object) { 
            _hasOwnProperty.call(json, "dummy") && (this.dummy = json.dummy!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementVariableReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementVariableReq._readFrom(is);
        }
    }

    export namespace TAgreementVariableReq {
        export interface Object {
            dummy?: string;
        }
    }

    export class TAgreementVariableRspItem {
        para_code: string = "";
        para_name: string = "";
        para_dict: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementVariableRspItem";
        protected static _classname = "JV.TAgreementVariableRspItem";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementVariableRspItem;
            tmp.para_code = is.readString(0, false, "");
            tmp.para_name = is.readString(1, false, "");
            tmp.para_dict = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.para_code);
            os.writeString(1, this.para_name);
            os.writeString(2, this.para_dict);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementVariableRspItem.Object { 
            return {
                para_code: this.para_code,
                para_name: this.para_name,
                para_dict: this.para_dict
            };
        }

        readFromObject(json: TAgreementVariableRspItem.Object) { 
            _hasOwnProperty.call(json, "para_code") && (this.para_code = json.para_code!);
            _hasOwnProperty.call(json, "para_name") && (this.para_name = json.para_name!);
            _hasOwnProperty.call(json, "para_dict") && (this.para_dict = json.para_dict!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementVariableRspItem();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementVariableRspItem._readFrom(is);
        }
    }

    export namespace TAgreementVariableRspItem {
        export interface Object {
            para_code?: string;
            para_name?: string;
            para_dict?: string;
        }
    }

    export class TAgreementVariableRsp {
        para_list: TarsStream.List<JV.TAgreementVariableRspItem> = new TarsStream.List(JV.TAgreementVariableRspItem);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementVariableRsp";
        protected static _classname = "JV.TAgreementVariableRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementVariableRsp;
            tmp.para_list = is.readList(0, false, TarsStream.List(JV.TAgreementVariableRspItem));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeList(0, this.para_list);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementVariableRsp.Object { 
            return {
                para_list: this.para_list.toObject()
            };
        }

        readFromObject(json: TAgreementVariableRsp.Object) { 
            _hasOwnProperty.call(json, "para_list") && (this.para_list.readFromObject(json.para_list!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementVariableRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementVariableRsp._readFrom(is);
        }
    }

    export namespace TAgreementVariableRsp {
        export interface Object {
            para_list?: Array<JV.TAgreementVariableRspItem.Object>;
        }
    }

    export class TAgreementDictReq {
        dict_code: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementDictReq";
        protected static _classname = "JV.TAgreementDictReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementDictReq;
            tmp.dict_code = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.dict_code);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementDictReq.Object { 
            return {
                dict_code: this.dict_code
            };
        }

        readFromObject(json: TAgreementDictReq.Object) { 
            _hasOwnProperty.call(json, "dict_code") && (this.dict_code = json.dict_code!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementDictReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementDictReq._readFrom(is);
        }
    }

    export namespace TAgreementDictReq {
        export interface Object {
            dict_code?: string;
        }
    }

    export class TAgreementDictRspItem {
        dict_item: string = "";
        dict_item_name: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementDictRspItem";
        protected static _classname = "JV.TAgreementDictRspItem";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementDictRspItem;
            tmp.dict_item = is.readString(0, false, "");
            tmp.dict_item_name = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.dict_item);
            os.writeString(1, this.dict_item_name);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementDictRspItem.Object { 
            return {
                dict_item: this.dict_item,
                dict_item_name: this.dict_item_name
            };
        }

        readFromObject(json: TAgreementDictRspItem.Object) { 
            _hasOwnProperty.call(json, "dict_item") && (this.dict_item = json.dict_item!);
            _hasOwnProperty.call(json, "dict_item_name") && (this.dict_item_name = json.dict_item_name!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementDictRspItem();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementDictRspItem._readFrom(is);
        }
    }

    export namespace TAgreementDictRspItem {
        export interface Object {
            dict_item?: string;
            dict_item_name?: string;
        }
    }

    export class TAgreementDictRsp {
        dict_item_list: TarsStream.List<JV.TAgreementDictRspItem> = new TarsStream.List(JV.TAgreementDictRspItem);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementDictRsp";
        protected static _classname = "JV.TAgreementDictRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementDictRsp;
            tmp.dict_item_list = is.readList(0, false, TarsStream.List(JV.TAgreementDictRspItem));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeList(0, this.dict_item_list);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementDictRsp.Object { 
            return {
                dict_item_list: this.dict_item_list.toObject()
            };
        }

        readFromObject(json: TAgreementDictRsp.Object) { 
            _hasOwnProperty.call(json, "dict_item_list") && (this.dict_item_list.readFromObject(json.dict_item_list!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementDictRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementDictRsp._readFrom(is);
        }
    }

    export namespace TAgreementDictRsp {
        export interface Object {
            dict_item_list?: Array<JV.TAgreementDictRspItem.Object>;
        }
    }

    export class TAgreementConfigReq {
        img_cls: string = "";
        version: string = "";
        dpi: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementConfigReq";
        protected static _classname = "JV.TAgreementConfigReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementConfigReq;
            tmp.img_cls = is.readString(0, false, "");
            tmp.version = is.readString(1, false, "");
            tmp.dpi = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_cls);
            os.writeString(1, this.version);
            os.writeString(2, this.dpi);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementConfigReq.Object { 
            return {
                img_cls: this.img_cls,
                version: this.version,
                dpi: this.dpi
            };
        }

        readFromObject(json: TAgreementConfigReq.Object) { 
            _hasOwnProperty.call(json, "img_cls") && (this.img_cls = json.img_cls!);
            _hasOwnProperty.call(json, "version") && (this.version = json.version!);
            _hasOwnProperty.call(json, "dpi") && (this.dpi = json.dpi!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementConfigReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementConfigReq._readFrom(is);
        }
    }

    export namespace TAgreementConfigReq {
        export interface Object {
            img_cls?: string;
            version?: string;
            dpi?: string;
        }
    }

    export class TAgreementConfigRsp {
        serial_number: string = "";
        template_params: string = "";
        para_dict: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementConfigRsp";
        protected static _classname = "JV.TAgreementConfigRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementConfigRsp;
            tmp.serial_number = is.readString(0, false, "");
            tmp.template_params = is.readString(1, false, "");
            tmp.para_dict = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.serial_number);
            os.writeString(1, this.template_params);
            os.writeString(2, this.para_dict);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementConfigRsp.Object { 
            return {
                serial_number: this.serial_number,
                template_params: this.template_params,
                para_dict: this.para_dict
            };
        }

        readFromObject(json: TAgreementConfigRsp.Object) { 
            _hasOwnProperty.call(json, "serial_number") && (this.serial_number = json.serial_number!);
            _hasOwnProperty.call(json, "template_params") && (this.template_params = json.template_params!);
            _hasOwnProperty.call(json, "para_dict") && (this.para_dict = json.para_dict!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementConfigRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementConfigRsp._readFrom(is);
        }
    }

    export namespace TAgreementConfigRsp {
        export interface Object {
            serial_number?: string;
            template_params?: string;
            para_dict?: string;
        }
    }

    export class TAgreementBindPackageReq {
        img_cls: string = "";
        busi_code: string = "";
        busi_detail: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementBindPackageReq";
        protected static _classname = "JV.TAgreementBindPackageReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementBindPackageReq;
            tmp.img_cls = is.readString(0, false, "");
            tmp.busi_code = is.readString(1, false, "");
            tmp.busi_detail = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.img_cls);
            os.writeString(1, this.busi_code);
            os.writeString(2, this.busi_detail);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementBindPackageReq.Object { 
            return {
                img_cls: this.img_cls,
                busi_code: this.busi_code,
                busi_detail: this.busi_detail
            };
        }

        readFromObject(json: TAgreementBindPackageReq.Object) { 
            _hasOwnProperty.call(json, "img_cls") && (this.img_cls = json.img_cls!);
            _hasOwnProperty.call(json, "busi_code") && (this.busi_code = json.busi_code!);
            _hasOwnProperty.call(json, "busi_detail") && (this.busi_detail = json.busi_detail!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementBindPackageReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementBindPackageReq._readFrom(is);
        }
    }

    export namespace TAgreementBindPackageReq {
        export interface Object {
            img_cls?: string;
            busi_code?: string;
            busi_detail?: string;
        }
    }

    export class TAgreementBindPackageRsp {
        serial_number: string = "";
        template_params: string = "";
        para_dict: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAgreementBindPackageRsp";
        protected static _classname = "JV.TAgreementBindPackageRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAgreementBindPackageRsp;
            tmp.serial_number = is.readString(0, false, "");
            tmp.template_params = is.readString(1, false, "");
            tmp.para_dict = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.serial_number);
            os.writeString(1, this.template_params);
            os.writeString(2, this.para_dict);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAgreementBindPackageRsp.Object { 
            return {
                serial_number: this.serial_number,
                template_params: this.template_params,
                para_dict: this.para_dict
            };
        }

        readFromObject(json: TAgreementBindPackageRsp.Object) { 
            _hasOwnProperty.call(json, "serial_number") && (this.serial_number = json.serial_number!);
            _hasOwnProperty.call(json, "template_params") && (this.template_params = json.template_params!);
            _hasOwnProperty.call(json, "para_dict") && (this.para_dict = json.para_dict!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAgreementBindPackageRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAgreementBindPackageRsp._readFrom(is);
        }
    }

    export namespace TAgreementBindPackageRsp {
        export interface Object {
            serial_number?: string;
            template_params?: string;
            para_dict?: string;
        }
    }

    export class TCallClientReq {
        call_type: number = 0;
        agent_id: string = "";
        agent_phone: string = "";
        mobile_num: string = "";
        called_num: string = "";
        employee_id: string = "";
        sec_user_code: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TCallClientReq";
        protected static _classname = "JV.TCallClientReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TCallClientReq;
            tmp.call_type = is.readInt32(0, true, 0);
            tmp.agent_id = is.readString(1, false, "");
            tmp.agent_phone = is.readString(2, false, "");
            tmp.mobile_num = is.readString(3, false, "");
            tmp.called_num = is.readString(4, true, "");
            tmp.employee_id = is.readString(5, true, "");
            tmp.sec_user_code = is.readString(6, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.call_type);
            os.writeString(1, this.agent_id);
            os.writeString(2, this.agent_phone);
            os.writeString(3, this.mobile_num);
            os.writeString(4, this.called_num);
            os.writeString(5, this.employee_id);
            os.writeString(6, this.sec_user_code);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TCallClientReq.Object { 
            return {
                call_type: this.call_type,
                agent_id: this.agent_id,
                agent_phone: this.agent_phone,
                mobile_num: this.mobile_num,
                called_num: this.called_num,
                employee_id: this.employee_id,
                sec_user_code: this.sec_user_code
            };
        }

        readFromObject(json: TCallClientReq.Object) { 
            _hasOwnProperty.call(json, "call_type") && (this.call_type = json.call_type);
            _hasOwnProperty.call(json, "agent_id") && (this.agent_id = json.agent_id!);
            _hasOwnProperty.call(json, "agent_phone") && (this.agent_phone = json.agent_phone!);
            _hasOwnProperty.call(json, "mobile_num") && (this.mobile_num = json.mobile_num!);
            _hasOwnProperty.call(json, "called_num") && (this.called_num = json.called_num);
            _hasOwnProperty.call(json, "employee_id") && (this.employee_id = json.employee_id);
            _hasOwnProperty.call(json, "sec_user_code") && (this.sec_user_code = json.sec_user_code);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TCallClientReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TCallClientReq._readFrom(is);
        }
    }

    export namespace TCallClientReq {
        export interface Object {
            call_type: number;
            agent_id?: string;
            agent_phone?: string;
            mobile_num?: string;
            called_num: string;
            employee_id: string;
            sec_user_code: string;
        }
    }

    export class TCallClientRsp {
        call_type: number = 0;
        call_serial_no: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TCallClientRsp";
        protected static _classname = "JV.TCallClientRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TCallClientRsp;
            tmp.call_type = is.readInt32(0, false, 0);
            tmp.call_serial_no = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.call_type);
            os.writeString(1, this.call_serial_no);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TCallClientRsp.Object { 
            return {
                call_type: this.call_type,
                call_serial_no: this.call_serial_no
            };
        }

        readFromObject(json: TCallClientRsp.Object) { 
            _hasOwnProperty.call(json, "call_type") && (this.call_type = json.call_type!);
            _hasOwnProperty.call(json, "call_serial_no") && (this.call_serial_no = json.call_serial_no!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TCallClientRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TCallClientRsp._readFrom(is);
        }
    }

    export namespace TCallClientRsp {
        export interface Object {
            call_type?: number;
            call_serial_no?: string;
        }
    }

    export class TQueryCallReq {
        call_type: number = 0;
        call_serial_no: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryCallReq";
        protected static _classname = "JV.TQueryCallReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryCallReq;
            tmp.call_type = is.readInt32(0, false, 0);
            tmp.call_serial_no = is.readString(1, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.call_type);
            os.writeString(1, this.call_serial_no);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryCallReq.Object { 
            return {
                call_type: this.call_type,
                call_serial_no: this.call_serial_no
            };
        }

        readFromObject(json: TQueryCallReq.Object) { 
            _hasOwnProperty.call(json, "call_type") && (this.call_type = json.call_type!);
            _hasOwnProperty.call(json, "call_serial_no") && (this.call_serial_no = json.call_serial_no);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryCallReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryCallReq._readFrom(is);
        }
    }

    export namespace TQueryCallReq {
        export interface Object {
            call_type?: number;
            call_serial_no: string;
        }
    }

    export class TQueryCallRsp {
        agent_id: string = "";
        phone_num: string = "";
        called_num: string = "";
        begin_time: string = "";
        end_time: string = "";
        duration: number = 0;
        success: number = 0;
        failreason: string = "";
        status: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryCallRsp";
        protected static _classname = "JV.TQueryCallRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryCallRsp;
            tmp.agent_id = is.readString(1, false, "");
            tmp.phone_num = is.readString(2, false, "");
            tmp.called_num = is.readString(3, false, "");
            tmp.begin_time = is.readString(4, false, "");
            tmp.end_time = is.readString(5, false, "");
            tmp.duration = is.readInt32(6, false, 0);
            tmp.success = is.readInt32(7, false, 0);
            tmp.failreason = is.readString(8, false, "");
            tmp.status = is.readInt32(9, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(1, this.agent_id);
            os.writeString(2, this.phone_num);
            os.writeString(3, this.called_num);
            os.writeString(4, this.begin_time);
            os.writeString(5, this.end_time);
            os.writeInt32(6, this.duration);
            os.writeInt32(7, this.success);
            os.writeString(8, this.failreason);
            os.writeInt32(9, this.status);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryCallRsp.Object { 
            return {
                agent_id: this.agent_id,
                phone_num: this.phone_num,
                called_num: this.called_num,
                begin_time: this.begin_time,
                end_time: this.end_time,
                duration: this.duration,
                success: this.success,
                failreason: this.failreason,
                status: this.status
            };
        }

        readFromObject(json: TQueryCallRsp.Object) { 
            _hasOwnProperty.call(json, "agent_id") && (this.agent_id = json.agent_id!);
            _hasOwnProperty.call(json, "phone_num") && (this.phone_num = json.phone_num!);
            _hasOwnProperty.call(json, "called_num") && (this.called_num = json.called_num!);
            _hasOwnProperty.call(json, "begin_time") && (this.begin_time = json.begin_time!);
            _hasOwnProperty.call(json, "end_time") && (this.end_time = json.end_time!);
            _hasOwnProperty.call(json, "duration") && (this.duration = json.duration!);
            _hasOwnProperty.call(json, "success") && (this.success = json.success!);
            _hasOwnProperty.call(json, "failreason") && (this.failreason = json.failreason!);
            _hasOwnProperty.call(json, "status") && (this.status = json.status!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryCallRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryCallRsp._readFrom(is);
        }
    }

    export namespace TQueryCallRsp {
        export interface Object {
            agent_id?: string;
            phone_num?: string;
            called_num?: string;
            begin_time?: string;
            end_time?: string;
            duration?: number;
            success?: number;
            failreason?: string;
            status?: number;
        }
    }

    export class TCancelCallReq {
        call_type: number = 0;
        call_serial_no: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TCancelCallReq";
        protected static _classname = "JV.TCancelCallReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TCancelCallReq;
            tmp.call_type = is.readInt32(0, false, 0);
            tmp.call_serial_no = is.readString(1, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.call_type);
            os.writeString(1, this.call_serial_no);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TCancelCallReq.Object { 
            return {
                call_type: this.call_type,
                call_serial_no: this.call_serial_no
            };
        }

        readFromObject(json: TCancelCallReq.Object) { 
            _hasOwnProperty.call(json, "call_type") && (this.call_type = json.call_type!);
            _hasOwnProperty.call(json, "call_serial_no") && (this.call_serial_no = json.call_serial_no);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TCancelCallReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TCancelCallReq._readFrom(is);
        }
    }

    export namespace TCancelCallReq {
        export interface Object {
            call_type?: number;
            call_serial_no: string;
        }
    }

    export class TCancelCallRsp {
        dummy: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TCancelCallRsp";
        protected static _classname = "JV.TCancelCallRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TCancelCallRsp;
            tmp.dummy = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.dummy);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TCancelCallRsp.Object { 
            return {
                dummy: this.dummy
            };
        }

        readFromObject(json: TCancelCallRsp.Object) { 
            _hasOwnProperty.call(json, "dummy") && (this.dummy = json.dummy!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TCancelCallRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TCancelCallRsp._readFrom(is);
        }
    }

    export namespace TCancelCallRsp {
        export interface Object {
            dummy?: string;
        }
    }

    export class TQueryCallRecFileReq {
        call_type: number = 0;
        call_serial_no: string = "";
        recording_file_name: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryCallRecFileReq";
        protected static _classname = "JV.TQueryCallRecFileReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryCallRecFileReq;
            tmp.call_type = is.readInt32(0, false, 0);
            tmp.call_serial_no = is.readString(1, true, "");
            tmp.recording_file_name = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.call_type);
            os.writeString(1, this.call_serial_no);
            os.writeString(2, this.recording_file_name);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryCallRecFileReq.Object { 
            return {
                call_type: this.call_type,
                call_serial_no: this.call_serial_no,
                recording_file_name: this.recording_file_name
            };
        }

        readFromObject(json: TQueryCallRecFileReq.Object) { 
            _hasOwnProperty.call(json, "call_type") && (this.call_type = json.call_type!);
            _hasOwnProperty.call(json, "call_serial_no") && (this.call_serial_no = json.call_serial_no);
            _hasOwnProperty.call(json, "recording_file_name") && (this.recording_file_name = json.recording_file_name!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryCallRecFileReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryCallRecFileReq._readFrom(is);
        }
    }

    export namespace TQueryCallRecFileReq {
        export interface Object {
            call_type?: number;
            call_serial_no: string;
            recording_file_name?: string;
        }
    }

    export class TQueryCallRecFileRsp {
        rec_file: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryCallRecFileRsp";
        protected static _classname = "JV.TQueryCallRecFileRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryCallRecFileRsp;
            tmp.rec_file = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.rec_file);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryCallRecFileRsp.Object { 
            return {
                rec_file: this.rec_file
            };
        }

        readFromObject(json: TQueryCallRecFileRsp.Object) { 
            _hasOwnProperty.call(json, "rec_file") && (this.rec_file = json.rec_file!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryCallRecFileRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryCallRecFileRsp._readFrom(is);
        }
    }

    export namespace TQueryCallRecFileRsp {
        export interface Object {
            rec_file?: string;
        }
    }

    export class TWorkOrderInfoReq {
        start_time: number = 0;
        page_no: number = 0;
        page_work_num: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TWorkOrderInfoReq";
        protected static _classname = "JV.TWorkOrderInfoReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TWorkOrderInfoReq;
            tmp.start_time = is.readInt64(0, false, 0);
            tmp.page_no = is.readInt32(1, false, 0);
            tmp.page_work_num = is.readInt32(2, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt64(0, this.start_time);
            os.writeInt32(1, this.page_no);
            os.writeInt32(2, this.page_work_num);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TWorkOrderInfoReq.Object { 
            return {
                start_time: this.start_time,
                page_no: this.page_no,
                page_work_num: this.page_work_num
            };
        }

        readFromObject(json: TWorkOrderInfoReq.Object) { 
            _hasOwnProperty.call(json, "start_time") && (this.start_time = json.start_time!);
            _hasOwnProperty.call(json, "page_no") && (this.page_no = json.page_no!);
            _hasOwnProperty.call(json, "page_work_num") && (this.page_work_num = json.page_work_num!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TWorkOrderInfoReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TWorkOrderInfoReq._readFrom(is);
        }
    }

    export namespace TWorkOrderInfoReq {
        export interface Object {
            start_time?: number;
            page_no?: number;
            page_work_num?: number;
        }
    }

    export class TTalkInfo {
        talk_id: string = "";
        employee_id: string = "";
        employee_name: string = "";
        sec_user_code: string = "";
        sec_user_name: string = "";
        fund_account: string = "";
        service_channel: string = "";
        media_type: string = "";
        the_orher_tel: string = "";
        talk_time: string = "";
        duration: string = "";
        talk_type: string = "";
        talk_summary: string = "";
        call_type: string = "";
        talk_status: string = "";
        branch_no: string = "";
        branch: string = "";
        rec_file: string = "";
        talk_update_time: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTalkInfo";
        protected static _classname = "JV.TTalkInfo";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTalkInfo;
            tmp.talk_id = is.readString(0, false, "");
            tmp.employee_id = is.readString(1, false, "");
            tmp.employee_name = is.readString(2, false, "");
            tmp.sec_user_code = is.readString(3, false, "");
            tmp.sec_user_name = is.readString(4, false, "");
            tmp.fund_account = is.readString(5, false, "");
            tmp.service_channel = is.readString(6, false, "");
            tmp.media_type = is.readString(7, false, "");
            tmp.the_orher_tel = is.readString(8, false, "");
            tmp.talk_time = is.readString(9, false, "");
            tmp.duration = is.readString(10, false, "");
            tmp.talk_type = is.readString(11, false, "");
            tmp.talk_summary = is.readString(12, false, "");
            tmp.call_type = is.readString(13, false, "");
            tmp.talk_status = is.readString(14, false, "");
            tmp.branch_no = is.readString(15, false, "");
            tmp.branch = is.readString(16, false, "");
            tmp.rec_file = is.readString(17, false, "");
            tmp.talk_update_time = is.readString(18, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.talk_id);
            os.writeString(1, this.employee_id);
            os.writeString(2, this.employee_name);
            os.writeString(3, this.sec_user_code);
            os.writeString(4, this.sec_user_name);
            os.writeString(5, this.fund_account);
            os.writeString(6, this.service_channel);
            os.writeString(7, this.media_type);
            os.writeString(8, this.the_orher_tel);
            os.writeString(9, this.talk_time);
            os.writeString(10, this.duration);
            os.writeString(11, this.talk_type);
            os.writeString(12, this.talk_summary);
            os.writeString(13, this.call_type);
            os.writeString(14, this.talk_status);
            os.writeString(15, this.branch_no);
            os.writeString(16, this.branch);
            os.writeString(17, this.rec_file);
            os.writeString(18, this.talk_update_time);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTalkInfo.Object { 
            return {
                talk_id: this.talk_id,
                employee_id: this.employee_id,
                employee_name: this.employee_name,
                sec_user_code: this.sec_user_code,
                sec_user_name: this.sec_user_name,
                fund_account: this.fund_account,
                service_channel: this.service_channel,
                media_type: this.media_type,
                the_orher_tel: this.the_orher_tel,
                talk_time: this.talk_time,
                duration: this.duration,
                talk_type: this.talk_type,
                talk_summary: this.talk_summary,
                call_type: this.call_type,
                talk_status: this.talk_status,
                branch_no: this.branch_no,
                branch: this.branch,
                rec_file: this.rec_file,
                talk_update_time: this.talk_update_time
            };
        }

        readFromObject(json: TTalkInfo.Object) { 
            _hasOwnProperty.call(json, "talk_id") && (this.talk_id = json.talk_id!);
            _hasOwnProperty.call(json, "employee_id") && (this.employee_id = json.employee_id!);
            _hasOwnProperty.call(json, "employee_name") && (this.employee_name = json.employee_name!);
            _hasOwnProperty.call(json, "sec_user_code") && (this.sec_user_code = json.sec_user_code!);
            _hasOwnProperty.call(json, "sec_user_name") && (this.sec_user_name = json.sec_user_name!);
            _hasOwnProperty.call(json, "fund_account") && (this.fund_account = json.fund_account!);
            _hasOwnProperty.call(json, "service_channel") && (this.service_channel = json.service_channel!);
            _hasOwnProperty.call(json, "media_type") && (this.media_type = json.media_type!);
            _hasOwnProperty.call(json, "the_orher_tel") && (this.the_orher_tel = json.the_orher_tel!);
            _hasOwnProperty.call(json, "talk_time") && (this.talk_time = json.talk_time!);
            _hasOwnProperty.call(json, "duration") && (this.duration = json.duration!);
            _hasOwnProperty.call(json, "talk_type") && (this.talk_type = json.talk_type!);
            _hasOwnProperty.call(json, "talk_summary") && (this.talk_summary = json.talk_summary!);
            _hasOwnProperty.call(json, "call_type") && (this.call_type = json.call_type!);
            _hasOwnProperty.call(json, "talk_status") && (this.talk_status = json.talk_status!);
            _hasOwnProperty.call(json, "branch_no") && (this.branch_no = json.branch_no!);
            _hasOwnProperty.call(json, "branch") && (this.branch = json.branch!);
            _hasOwnProperty.call(json, "rec_file") && (this.rec_file = json.rec_file!);
            _hasOwnProperty.call(json, "talk_update_time") && (this.talk_update_time = json.talk_update_time!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTalkInfo();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTalkInfo._readFrom(is);
        }
    }

    export namespace TTalkInfo {
        export interface Object {
            talk_id?: string;
            employee_id?: string;
            employee_name?: string;
            sec_user_code?: string;
            sec_user_name?: string;
            fund_account?: string;
            service_channel?: string;
            media_type?: string;
            the_orher_tel?: string;
            talk_time?: string;
            duration?: string;
            talk_type?: string;
            talk_summary?: string;
            call_type?: string;
            talk_status?: string;
            branch_no?: string;
            branch?: string;
            rec_file?: string;
            talk_update_time?: string;
        }
    }

    export class TWorkOrderInfo {
        work_order_code: string = "";
        operate_type: string = "";
        service_eva: string = "";
        work_order_type: string = "";
        work_order_state: string = "";
        work_update_time: string = "";
        talk_info_list: TarsStream.List<JV.TTalkInfo> = new TarsStream.List(JV.TTalkInfo);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TWorkOrderInfo";
        protected static _classname = "JV.TWorkOrderInfo";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TWorkOrderInfo;
            tmp.work_order_code = is.readString(0, false, "");
            tmp.operate_type = is.readString(1, false, "");
            tmp.service_eva = is.readString(2, false, "");
            tmp.work_order_type = is.readString(3, false, "");
            tmp.work_order_state = is.readString(4, false, "");
            tmp.work_update_time = is.readString(5, false, "");
            tmp.talk_info_list = is.readList(6, false, TarsStream.List(JV.TTalkInfo));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.work_order_code);
            os.writeString(1, this.operate_type);
            os.writeString(2, this.service_eva);
            os.writeString(3, this.work_order_type);
            os.writeString(4, this.work_order_state);
            os.writeString(5, this.work_update_time);
            os.writeList(6, this.talk_info_list);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TWorkOrderInfo.Object { 
            return {
                work_order_code: this.work_order_code,
                operate_type: this.operate_type,
                service_eva: this.service_eva,
                work_order_type: this.work_order_type,
                work_order_state: this.work_order_state,
                work_update_time: this.work_update_time,
                talk_info_list: this.talk_info_list.toObject()
            };
        }

        readFromObject(json: TWorkOrderInfo.Object) { 
            _hasOwnProperty.call(json, "work_order_code") && (this.work_order_code = json.work_order_code!);
            _hasOwnProperty.call(json, "operate_type") && (this.operate_type = json.operate_type!);
            _hasOwnProperty.call(json, "service_eva") && (this.service_eva = json.service_eva!);
            _hasOwnProperty.call(json, "work_order_type") && (this.work_order_type = json.work_order_type!);
            _hasOwnProperty.call(json, "work_order_state") && (this.work_order_state = json.work_order_state!);
            _hasOwnProperty.call(json, "work_update_time") && (this.work_update_time = json.work_update_time!);
            _hasOwnProperty.call(json, "talk_info_list") && (this.talk_info_list.readFromObject(json.talk_info_list!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TWorkOrderInfo();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TWorkOrderInfo._readFrom(is);
        }
    }

    export namespace TWorkOrderInfo {
        export interface Object {
            work_order_code?: string;
            operate_type?: string;
            service_eva?: string;
            work_order_type?: string;
            work_order_state?: string;
            work_update_time?: string;
            talk_info_list?: Array<JV.TTalkInfo.Object>;
        }
    }

    export class TWorkOrderInfoRsp {
        work_order_info_list: TarsStream.List<JV.TWorkOrderInfo> = new TarsStream.List(JV.TWorkOrderInfo);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TWorkOrderInfoRsp";
        protected static _classname = "JV.TWorkOrderInfoRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TWorkOrderInfoRsp;
            tmp.work_order_info_list = is.readList(0, false, TarsStream.List(JV.TWorkOrderInfo));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeList(0, this.work_order_info_list);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TWorkOrderInfoRsp.Object { 
            return {
                work_order_info_list: this.work_order_info_list.toObject()
            };
        }

        readFromObject(json: TWorkOrderInfoRsp.Object) { 
            _hasOwnProperty.call(json, "work_order_info_list") && (this.work_order_info_list.readFromObject(json.work_order_info_list!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TWorkOrderInfoRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TWorkOrderInfoRsp._readFrom(is);
        }
    }

    export namespace TWorkOrderInfoRsp {
        export interface Object {
            work_order_info_list?: Array<JV.TWorkOrderInfo.Object>;
        }
    }

    export class TTaskActInfoReq {
        start_time: number = 0;
        page_no: number = 0;
        page_task_num: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTaskActInfoReq";
        protected static _classname = "JV.TTaskActInfoReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTaskActInfoReq;
            tmp.start_time = is.readInt64(0, false, 0);
            tmp.page_no = is.readInt32(1, false, 0);
            tmp.page_task_num = is.readInt32(2, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt64(0, this.start_time);
            os.writeInt32(1, this.page_no);
            os.writeInt32(2, this.page_task_num);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTaskActInfoReq.Object { 
            return {
                start_time: this.start_time,
                page_no: this.page_no,
                page_task_num: this.page_task_num
            };
        }

        readFromObject(json: TTaskActInfoReq.Object) { 
            _hasOwnProperty.call(json, "start_time") && (this.start_time = json.start_time!);
            _hasOwnProperty.call(json, "page_no") && (this.page_no = json.page_no!);
            _hasOwnProperty.call(json, "page_task_num") && (this.page_task_num = json.page_task_num!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTaskActInfoReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTaskActInfoReq._readFrom(is);
        }
    }

    export namespace TTaskActInfoReq {
        export interface Object {
            start_time?: number;
            page_no?: number;
            page_task_num?: number;
        }
    }

    export class TActInfo {
        talk_id: string = "";
        employee_id: string = "";
        employee_name: string = "";
        sec_user_code: string = "";
        sec_user_name: string = "";
        fund_account: string = "";
        service_channel: string = "";
        media_type: string = "";
        the_orher_tel: string = "";
        talk_time: string = "";
        duration: string = "";
        talk_type: string = "";
        talk_summary: string = "";
        call_type: string = "";
        talk_status: string = "";
        branch_no: string = "";
        branch: string = "";
        rec_file: string = "";
        talk_update_time: string = "";
        act_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TActInfo";
        protected static _classname = "JV.TActInfo";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TActInfo;
            tmp.talk_id = is.readString(0, false, "");
            tmp.employee_id = is.readString(1, false, "");
            tmp.employee_name = is.readString(2, false, "");
            tmp.sec_user_code = is.readString(3, false, "");
            tmp.sec_user_name = is.readString(4, false, "");
            tmp.fund_account = is.readString(5, false, "");
            tmp.service_channel = is.readString(6, false, "");
            tmp.media_type = is.readString(7, false, "");
            tmp.the_orher_tel = is.readString(8, false, "");
            tmp.talk_time = is.readString(9, false, "");
            tmp.duration = is.readString(10, false, "");
            tmp.talk_type = is.readString(11, false, "");
            tmp.talk_summary = is.readString(12, false, "");
            tmp.call_type = is.readString(13, false, "");
            tmp.talk_status = is.readString(14, false, "");
            tmp.branch_no = is.readString(15, false, "");
            tmp.branch = is.readString(16, false, "");
            tmp.rec_file = is.readString(17, false, "");
            tmp.talk_update_time = is.readString(18, false, "");
            tmp.act_id = is.readString(19, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.talk_id);
            os.writeString(1, this.employee_id);
            os.writeString(2, this.employee_name);
            os.writeString(3, this.sec_user_code);
            os.writeString(4, this.sec_user_name);
            os.writeString(5, this.fund_account);
            os.writeString(6, this.service_channel);
            os.writeString(7, this.media_type);
            os.writeString(8, this.the_orher_tel);
            os.writeString(9, this.talk_time);
            os.writeString(10, this.duration);
            os.writeString(11, this.talk_type);
            os.writeString(12, this.talk_summary);
            os.writeString(13, this.call_type);
            os.writeString(14, this.talk_status);
            os.writeString(15, this.branch_no);
            os.writeString(16, this.branch);
            os.writeString(17, this.rec_file);
            os.writeString(18, this.talk_update_time);
            os.writeString(19, this.act_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TActInfo.Object { 
            return {
                talk_id: this.talk_id,
                employee_id: this.employee_id,
                employee_name: this.employee_name,
                sec_user_code: this.sec_user_code,
                sec_user_name: this.sec_user_name,
                fund_account: this.fund_account,
                service_channel: this.service_channel,
                media_type: this.media_type,
                the_orher_tel: this.the_orher_tel,
                talk_time: this.talk_time,
                duration: this.duration,
                talk_type: this.talk_type,
                talk_summary: this.talk_summary,
                call_type: this.call_type,
                talk_status: this.talk_status,
                branch_no: this.branch_no,
                branch: this.branch,
                rec_file: this.rec_file,
                talk_update_time: this.talk_update_time,
                act_id: this.act_id
            };
        }

        readFromObject(json: TActInfo.Object) { 
            _hasOwnProperty.call(json, "talk_id") && (this.talk_id = json.talk_id!);
            _hasOwnProperty.call(json, "employee_id") && (this.employee_id = json.employee_id!);
            _hasOwnProperty.call(json, "employee_name") && (this.employee_name = json.employee_name!);
            _hasOwnProperty.call(json, "sec_user_code") && (this.sec_user_code = json.sec_user_code!);
            _hasOwnProperty.call(json, "sec_user_name") && (this.sec_user_name = json.sec_user_name!);
            _hasOwnProperty.call(json, "fund_account") && (this.fund_account = json.fund_account!);
            _hasOwnProperty.call(json, "service_channel") && (this.service_channel = json.service_channel!);
            _hasOwnProperty.call(json, "media_type") && (this.media_type = json.media_type!);
            _hasOwnProperty.call(json, "the_orher_tel") && (this.the_orher_tel = json.the_orher_tel!);
            _hasOwnProperty.call(json, "talk_time") && (this.talk_time = json.talk_time!);
            _hasOwnProperty.call(json, "duration") && (this.duration = json.duration!);
            _hasOwnProperty.call(json, "talk_type") && (this.talk_type = json.talk_type!);
            _hasOwnProperty.call(json, "talk_summary") && (this.talk_summary = json.talk_summary!);
            _hasOwnProperty.call(json, "call_type") && (this.call_type = json.call_type!);
            _hasOwnProperty.call(json, "talk_status") && (this.talk_status = json.talk_status!);
            _hasOwnProperty.call(json, "branch_no") && (this.branch_no = json.branch_no!);
            _hasOwnProperty.call(json, "branch") && (this.branch = json.branch!);
            _hasOwnProperty.call(json, "rec_file") && (this.rec_file = json.rec_file!);
            _hasOwnProperty.call(json, "talk_update_time") && (this.talk_update_time = json.talk_update_time!);
            _hasOwnProperty.call(json, "act_id") && (this.act_id = json.act_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TActInfo();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TActInfo._readFrom(is);
        }
    }

    export namespace TActInfo {
        export interface Object {
            talk_id?: string;
            employee_id?: string;
            employee_name?: string;
            sec_user_code?: string;
            sec_user_name?: string;
            fund_account?: string;
            service_channel?: string;
            media_type?: string;
            the_orher_tel?: string;
            talk_time?: string;
            duration?: string;
            talk_type?: string;
            talk_summary?: string;
            call_type?: string;
            talk_status?: string;
            branch_no?: string;
            branch?: string;
            rec_file?: string;
            talk_update_time?: string;
            act_id?: string;
        }
    }

    export class TTaskActInfo {
        task_list_code: string = "";
        task_code: string = "";
        task_name: string = "";
        call_out_num: string = "";
        missed_num: string = "";
        task_remark: string = "";
        task_status: string = "";
        handle_status: string = "";
        task_update_time: string = "";
        act_info_list: TarsStream.List<JV.TActInfo> = new TarsStream.List(JV.TActInfo);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTaskActInfo";
        protected static _classname = "JV.TTaskActInfo";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTaskActInfo;
            tmp.task_list_code = is.readString(0, false, "");
            tmp.task_code = is.readString(1, false, "");
            tmp.task_name = is.readString(2, false, "");
            tmp.call_out_num = is.readString(3, false, "");
            tmp.missed_num = is.readString(4, false, "");
            tmp.task_remark = is.readString(5, false, "");
            tmp.task_status = is.readString(6, false, "");
            tmp.handle_status = is.readString(7, false, "");
            tmp.task_update_time = is.readString(8, false, "");
            tmp.act_info_list = is.readList(9, false, TarsStream.List(JV.TActInfo));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.task_list_code);
            os.writeString(1, this.task_code);
            os.writeString(2, this.task_name);
            os.writeString(3, this.call_out_num);
            os.writeString(4, this.missed_num);
            os.writeString(5, this.task_remark);
            os.writeString(6, this.task_status);
            os.writeString(7, this.handle_status);
            os.writeString(8, this.task_update_time);
            os.writeList(9, this.act_info_list);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTaskActInfo.Object { 
            return {
                task_list_code: this.task_list_code,
                task_code: this.task_code,
                task_name: this.task_name,
                call_out_num: this.call_out_num,
                missed_num: this.missed_num,
                task_remark: this.task_remark,
                task_status: this.task_status,
                handle_status: this.handle_status,
                task_update_time: this.task_update_time,
                act_info_list: this.act_info_list.toObject()
            };
        }

        readFromObject(json: TTaskActInfo.Object) { 
            _hasOwnProperty.call(json, "task_list_code") && (this.task_list_code = json.task_list_code!);
            _hasOwnProperty.call(json, "task_code") && (this.task_code = json.task_code!);
            _hasOwnProperty.call(json, "task_name") && (this.task_name = json.task_name!);
            _hasOwnProperty.call(json, "call_out_num") && (this.call_out_num = json.call_out_num!);
            _hasOwnProperty.call(json, "missed_num") && (this.missed_num = json.missed_num!);
            _hasOwnProperty.call(json, "task_remark") && (this.task_remark = json.task_remark!);
            _hasOwnProperty.call(json, "task_status") && (this.task_status = json.task_status!);
            _hasOwnProperty.call(json, "handle_status") && (this.handle_status = json.handle_status!);
            _hasOwnProperty.call(json, "task_update_time") && (this.task_update_time = json.task_update_time!);
            _hasOwnProperty.call(json, "act_info_list") && (this.act_info_list.readFromObject(json.act_info_list!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTaskActInfo();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTaskActInfo._readFrom(is);
        }
    }

    export namespace TTaskActInfo {
        export interface Object {
            task_list_code?: string;
            task_code?: string;
            task_name?: string;
            call_out_num?: string;
            missed_num?: string;
            task_remark?: string;
            task_status?: string;
            handle_status?: string;
            task_update_time?: string;
            act_info_list?: Array<JV.TActInfo.Object>;
        }
    }

    export class TTaskActInfoRsp {
        task_act_info_list: TarsStream.List<JV.TTaskActInfo> = new TarsStream.List(JV.TTaskActInfo);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTaskActInfoRsp";
        protected static _classname = "JV.TTaskActInfoRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTaskActInfoRsp;
            tmp.task_act_info_list = is.readList(0, false, TarsStream.List(JV.TTaskActInfo));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeList(0, this.task_act_info_list);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTaskActInfoRsp.Object { 
            return {
                task_act_info_list: this.task_act_info_list.toObject()
            };
        }

        readFromObject(json: TTaskActInfoRsp.Object) { 
            _hasOwnProperty.call(json, "task_act_info_list") && (this.task_act_info_list.readFromObject(json.task_act_info_list!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTaskActInfoRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTaskActInfoRsp._readFrom(is);
        }
    }

    export namespace TTaskActInfoRsp {
        export interface Object {
            task_act_info_list?: Array<JV.TTaskActInfo.Object>;
        }
    }

    export class TTaskQuestionInfoReq {
        start_time: number = 0;
        page_no: number = 0;
        page_task_num: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTaskQuestionInfoReq";
        protected static _classname = "JV.TTaskQuestionInfoReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTaskQuestionInfoReq;
            tmp.start_time = is.readInt64(0, false, 0);
            tmp.page_no = is.readInt32(1, false, 0);
            tmp.page_task_num = is.readInt32(2, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt64(0, this.start_time);
            os.writeInt32(1, this.page_no);
            os.writeInt32(2, this.page_task_num);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTaskQuestionInfoReq.Object { 
            return {
                start_time: this.start_time,
                page_no: this.page_no,
                page_task_num: this.page_task_num
            };
        }

        readFromObject(json: TTaskQuestionInfoReq.Object) { 
            _hasOwnProperty.call(json, "start_time") && (this.start_time = json.start_time!);
            _hasOwnProperty.call(json, "page_no") && (this.page_no = json.page_no!);
            _hasOwnProperty.call(json, "page_task_num") && (this.page_task_num = json.page_task_num!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTaskQuestionInfoReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTaskQuestionInfoReq._readFrom(is);
        }
    }

    export namespace TTaskQuestionInfoReq {
        export interface Object {
            start_time?: number;
            page_no?: number;
            page_task_num?: number;
        }
    }

    export class TQuestionInfo {
        question_code: string = "";
        question_value: string = "";
        question_answer: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQuestionInfo";
        protected static _classname = "JV.TQuestionInfo";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQuestionInfo;
            tmp.question_code = is.readString(0, false, "");
            tmp.question_value = is.readString(1, false, "");
            tmp.question_answer = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.question_code);
            os.writeString(1, this.question_value);
            os.writeString(2, this.question_answer);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQuestionInfo.Object { 
            return {
                question_code: this.question_code,
                question_value: this.question_value,
                question_answer: this.question_answer
            };
        }

        readFromObject(json: TQuestionInfo.Object) { 
            _hasOwnProperty.call(json, "question_code") && (this.question_code = json.question_code!);
            _hasOwnProperty.call(json, "question_value") && (this.question_value = json.question_value!);
            _hasOwnProperty.call(json, "question_answer") && (this.question_answer = json.question_answer!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQuestionInfo();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQuestionInfo._readFrom(is);
        }
    }

    export namespace TQuestionInfo {
        export interface Object {
            question_code?: string;
            question_value?: string;
            question_answer?: string;
        }
    }

    export class TTaskQuestionInfo {
        task_list_code: string = "";
        task_code: string = "";
        task_name: string = "";
        quesitionnaire_code: string = "";
        employee_id: string = "";
        employee_name: string = "";
        sec_user_code: string = "";
        sec_user_name: string = "";
        fund_account: string = "";
        branch_no: string = "";
        branch: string = "";
        task_update_time: string = "";
        question_info_list: TarsStream.List<JV.TQuestionInfo> = new TarsStream.List(JV.TQuestionInfo);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTaskQuestionInfo";
        protected static _classname = "JV.TTaskQuestionInfo";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTaskQuestionInfo;
            tmp.task_list_code = is.readString(0, false, "");
            tmp.task_code = is.readString(1, false, "");
            tmp.task_name = is.readString(2, false, "");
            tmp.quesitionnaire_code = is.readString(3, false, "");
            tmp.employee_id = is.readString(4, false, "");
            tmp.employee_name = is.readString(5, false, "");
            tmp.sec_user_code = is.readString(6, false, "");
            tmp.sec_user_name = is.readString(7, false, "");
            tmp.fund_account = is.readString(8, false, "");
            tmp.branch_no = is.readString(9, false, "");
            tmp.branch = is.readString(10, false, "");
            tmp.task_update_time = is.readString(11, false, "");
            tmp.question_info_list = is.readList(12, false, TarsStream.List(JV.TQuestionInfo));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.task_list_code);
            os.writeString(1, this.task_code);
            os.writeString(2, this.task_name);
            os.writeString(3, this.quesitionnaire_code);
            os.writeString(4, this.employee_id);
            os.writeString(5, this.employee_name);
            os.writeString(6, this.sec_user_code);
            os.writeString(7, this.sec_user_name);
            os.writeString(8, this.fund_account);
            os.writeString(9, this.branch_no);
            os.writeString(10, this.branch);
            os.writeString(11, this.task_update_time);
            os.writeList(12, this.question_info_list);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTaskQuestionInfo.Object { 
            return {
                task_list_code: this.task_list_code,
                task_code: this.task_code,
                task_name: this.task_name,
                quesitionnaire_code: this.quesitionnaire_code,
                employee_id: this.employee_id,
                employee_name: this.employee_name,
                sec_user_code: this.sec_user_code,
                sec_user_name: this.sec_user_name,
                fund_account: this.fund_account,
                branch_no: this.branch_no,
                branch: this.branch,
                task_update_time: this.task_update_time,
                question_info_list: this.question_info_list.toObject()
            };
        }

        readFromObject(json: TTaskQuestionInfo.Object) { 
            _hasOwnProperty.call(json, "task_list_code") && (this.task_list_code = json.task_list_code!);
            _hasOwnProperty.call(json, "task_code") && (this.task_code = json.task_code!);
            _hasOwnProperty.call(json, "task_name") && (this.task_name = json.task_name!);
            _hasOwnProperty.call(json, "quesitionnaire_code") && (this.quesitionnaire_code = json.quesitionnaire_code!);
            _hasOwnProperty.call(json, "employee_id") && (this.employee_id = json.employee_id!);
            _hasOwnProperty.call(json, "employee_name") && (this.employee_name = json.employee_name!);
            _hasOwnProperty.call(json, "sec_user_code") && (this.sec_user_code = json.sec_user_code!);
            _hasOwnProperty.call(json, "sec_user_name") && (this.sec_user_name = json.sec_user_name!);
            _hasOwnProperty.call(json, "fund_account") && (this.fund_account = json.fund_account!);
            _hasOwnProperty.call(json, "branch_no") && (this.branch_no = json.branch_no!);
            _hasOwnProperty.call(json, "branch") && (this.branch = json.branch!);
            _hasOwnProperty.call(json, "task_update_time") && (this.task_update_time = json.task_update_time!);
            _hasOwnProperty.call(json, "question_info_list") && (this.question_info_list.readFromObject(json.question_info_list!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTaskQuestionInfo();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTaskQuestionInfo._readFrom(is);
        }
    }

    export namespace TTaskQuestionInfo {
        export interface Object {
            task_list_code?: string;
            task_code?: string;
            task_name?: string;
            quesitionnaire_code?: string;
            employee_id?: string;
            employee_name?: string;
            sec_user_code?: string;
            sec_user_name?: string;
            fund_account?: string;
            branch_no?: string;
            branch?: string;
            task_update_time?: string;
            question_info_list?: Array<JV.TQuestionInfo.Object>;
        }
    }

    export class TTaskQuestionInfoRsp {
        task_question_info_list: TarsStream.List<JV.TTaskQuestionInfo> = new TarsStream.List(JV.TTaskQuestionInfo);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTaskQuestionInfoRsp";
        protected static _classname = "JV.TTaskQuestionInfoRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTaskQuestionInfoRsp;
            tmp.task_question_info_list = is.readList(0, false, TarsStream.List(JV.TTaskQuestionInfo));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeList(0, this.task_question_info_list);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTaskQuestionInfoRsp.Object { 
            return {
                task_question_info_list: this.task_question_info_list.toObject()
            };
        }

        readFromObject(json: TTaskQuestionInfoRsp.Object) { 
            _hasOwnProperty.call(json, "task_question_info_list") && (this.task_question_info_list.readFromObject(json.task_question_info_list!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTaskQuestionInfoRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTaskQuestionInfoRsp._readFrom(is);
        }
    }

    export namespace TTaskQuestionInfoRsp {
        export interface Object {
            task_question_info_list?: Array<JV.TTaskQuestionInfo.Object>;
        }
    }

    export class TPSendSmsCodeReq {
        msg_no: string = "";
        tel_no: string = "";
        biz_type: string = "";
        station: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPSendSmsCodeReq";
        protected static _classname = "JV.TPSendSmsCodeReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPSendSmsCodeReq;
            tmp.msg_no = is.readString(1, false, "");
            tmp.tel_no = is.readString(2, false, "");
            tmp.biz_type = is.readString(3, false, "");
            tmp.station = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(1, this.msg_no);
            os.writeString(2, this.tel_no);
            os.writeString(3, this.biz_type);
            os.writeString(4, this.station);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPSendSmsCodeReq.Object { 
            return {
                msg_no: this.msg_no,
                tel_no: this.tel_no,
                biz_type: this.biz_type,
                station: this.station
            };
        }

        readFromObject(json: TPSendSmsCodeReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "tel_no") && (this.tel_no = json.tel_no!);
            _hasOwnProperty.call(json, "biz_type") && (this.biz_type = json.biz_type!);
            _hasOwnProperty.call(json, "station") && (this.station = json.station!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPSendSmsCodeReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPSendSmsCodeReq._readFrom(is);
        }
    }

    export namespace TPSendSmsCodeReq {
        export interface Object {
            msg_no?: string;
            tel_no?: string;
            biz_type?: string;
            station?: string;
        }
    }

    export class TPSendSmsCodeRsp {
        original_code: number = 0;
        original_msg: string = "";
        msg_no: string = "";
        send_channel: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPSendSmsCodeRsp";
        protected static _classname = "JV.TPSendSmsCodeRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPSendSmsCodeRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            tmp.send_channel = is.readInt32(3, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.msg_no);
            os.writeInt32(3, this.send_channel);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPSendSmsCodeRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                msg_no: this.msg_no,
                send_channel: this.send_channel
            };
        }

        readFromObject(json: TPSendSmsCodeRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "send_channel") && (this.send_channel = json.send_channel!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPSendSmsCodeRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPSendSmsCodeRsp._readFrom(is);
        }
    }

    export namespace TPSendSmsCodeRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            msg_no?: string;
            send_channel?: number;
        }
    }

    export class TPVerifySmsCodeReq {
        msg_no: string = "";
        tel_no: string = "";
        sms_code: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPVerifySmsCodeReq";
        protected static _classname = "JV.TPVerifySmsCodeReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPVerifySmsCodeReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.tel_no = is.readString(1, false, "");
            tmp.sms_code = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.tel_no);
            os.writeString(2, this.sms_code);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPVerifySmsCodeReq.Object { 
            return {
                msg_no: this.msg_no,
                tel_no: this.tel_no,
                sms_code: this.sms_code
            };
        }

        readFromObject(json: TPVerifySmsCodeReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "tel_no") && (this.tel_no = json.tel_no!);
            _hasOwnProperty.call(json, "sms_code") && (this.sms_code = json.sms_code!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPVerifySmsCodeReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPVerifySmsCodeReq._readFrom(is);
        }
    }

    export namespace TPVerifySmsCodeReq {
        export interface Object {
            msg_no?: string;
            tel_no?: string;
            sms_code?: string;
        }
    }

    export class TPVerifySmsCodeRsp {
        original_code: number = 0;
        original_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPVerifySmsCodeRsp";
        protected static _classname = "JV.TPVerifySmsCodeRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPVerifySmsCodeRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPVerifySmsCodeRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg
            };
        }

        readFromObject(json: TPVerifySmsCodeRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPVerifySmsCodeRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPVerifySmsCodeRsp._readFrom(is);
        }
    }

    export namespace TPVerifySmsCodeRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
        }
    }

    export class TPSendSmsReq {
        msg_no: string = "";
        tel_no: string = "";
        send_content: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPSendSmsReq";
        protected static _classname = "JV.TPSendSmsReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPSendSmsReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.tel_no = is.readString(1, false, "");
            tmp.send_content = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.tel_no);
            os.writeString(2, this.send_content);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPSendSmsReq.Object { 
            return {
                msg_no: this.msg_no,
                tel_no: this.tel_no,
                send_content: this.send_content
            };
        }

        readFromObject(json: TPSendSmsReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "tel_no") && (this.tel_no = json.tel_no!);
            _hasOwnProperty.call(json, "send_content") && (this.send_content = json.send_content!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPSendSmsReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPSendSmsReq._readFrom(is);
        }
    }

    export namespace TPSendSmsReq {
        export interface Object {
            msg_no?: string;
            tel_no?: string;
            send_content?: string;
        }
    }

    export class TPSendSmsRsp {
        original_code: number = 0;
        original_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPSendSmsRsp";
        protected static _classname = "JV.TPSendSmsRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPSendSmsRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPSendSmsRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg
            };
        }

        readFromObject(json: TPSendSmsRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPSendSmsRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPSendSmsRsp._readFrom(is);
        }
    }

    export namespace TPSendSmsRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
        }
    }

    export class TSubmitQueryInvestBeginTimeReq {
        id_type: number = 0;
        id_code: string = "";
        user_name: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TSubmitQueryInvestBeginTimeReq";
        protected static _classname = "JV.TSubmitQueryInvestBeginTimeReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TSubmitQueryInvestBeginTimeReq;
            tmp.id_type = is.readInt32(0, true, 0);
            tmp.id_code = is.readString(1, true, "");
            tmp.user_name = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.id_type);
            os.writeString(1, this.id_code);
            os.writeString(2, this.user_name);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TSubmitQueryInvestBeginTimeReq.Object { 
            return {
                id_type: this.id_type,
                id_code: this.id_code,
                user_name: this.user_name
            };
        }

        readFromObject(json: TSubmitQueryInvestBeginTimeReq.Object) { 
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type);
            _hasOwnProperty.call(json, "id_code") && (this.id_code = json.id_code);
            _hasOwnProperty.call(json, "user_name") && (this.user_name = json.user_name);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TSubmitQueryInvestBeginTimeReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TSubmitQueryInvestBeginTimeReq._readFrom(is);
        }
    }

    export namespace TSubmitQueryInvestBeginTimeReq {
        export interface Object {
            id_type: number;
            id_code: string;
            user_name: string;
        }
    }

    export class TSubmitQueryInvestBeginTimeRsp {
        msg_no: string = "";
        ret_code: number = 0;
        ret_msg: string = "";
        serial_no: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TSubmitQueryInvestBeginTimeRsp";
        protected static _classname = "JV.TSubmitQueryInvestBeginTimeRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TSubmitQueryInvestBeginTimeRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.ret_code = is.readInt32(1, true, 0);
            tmp.ret_msg = is.readString(2, true, "");
            tmp.serial_no = is.readString(3, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.ret_code);
            os.writeString(2, this.ret_msg);
            os.writeString(3, this.serial_no);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TSubmitQueryInvestBeginTimeRsp.Object { 
            return {
                msg_no: this.msg_no,
                ret_code: this.ret_code,
                ret_msg: this.ret_msg,
                serial_no: this.serial_no
            };
        }

        readFromObject(json: TSubmitQueryInvestBeginTimeRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "ret_code") && (this.ret_code = json.ret_code);
            _hasOwnProperty.call(json, "ret_msg") && (this.ret_msg = json.ret_msg);
            _hasOwnProperty.call(json, "serial_no") && (this.serial_no = json.serial_no);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TSubmitQueryInvestBeginTimeRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TSubmitQueryInvestBeginTimeRsp._readFrom(is);
        }
    }

    export namespace TSubmitQueryInvestBeginTimeRsp {
        export interface Object {
            msg_no?: string;
            ret_code: number;
            ret_msg: string;
            serial_no: string;
        }
    }

    export class TGetInvestBeginTimeReq {
        serial_no: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TGetInvestBeginTimeReq";
        protected static _classname = "JV.TGetInvestBeginTimeReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TGetInvestBeginTimeReq;
            tmp.serial_no = is.readString(0, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.serial_no);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TGetInvestBeginTimeReq.Object { 
            return {
                serial_no: this.serial_no
            };
        }

        readFromObject(json: TGetInvestBeginTimeReq.Object) { 
            _hasOwnProperty.call(json, "serial_no") && (this.serial_no = json.serial_no);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TGetInvestBeginTimeReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TGetInvestBeginTimeReq._readFrom(is);
        }
    }

    export namespace TGetInvestBeginTimeReq {
        export interface Object {
            serial_no: string;
        }
    }

    export class TGetInvestBeginTimeRsp {
        msg_no: string = "";
        ret_code: number = 0;
        ret_msg: string = "";
        invest_begin_time: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TGetInvestBeginTimeRsp";
        protected static _classname = "JV.TGetInvestBeginTimeRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TGetInvestBeginTimeRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.ret_code = is.readInt32(1, true, 0);
            tmp.ret_msg = is.readString(2, true, "");
            tmp.invest_begin_time = is.readString(3, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.ret_code);
            os.writeString(2, this.ret_msg);
            os.writeString(3, this.invest_begin_time);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TGetInvestBeginTimeRsp.Object { 
            return {
                msg_no: this.msg_no,
                ret_code: this.ret_code,
                ret_msg: this.ret_msg,
                invest_begin_time: this.invest_begin_time
            };
        }

        readFromObject(json: TGetInvestBeginTimeRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "ret_code") && (this.ret_code = json.ret_code);
            _hasOwnProperty.call(json, "ret_msg") && (this.ret_msg = json.ret_msg);
            _hasOwnProperty.call(json, "invest_begin_time") && (this.invest_begin_time = json.invest_begin_time);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TGetInvestBeginTimeRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TGetInvestBeginTimeRsp._readFrom(is);
        }
    }

    export namespace TGetInvestBeginTimeRsp {
        export interface Object {
            msg_no?: string;
            ret_code: number;
            ret_msg: string;
            invest_begin_time: string;
        }
    }

    export class TQueryZdSvrDateReq {
        physical_date: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryZdSvrDateReq";
        protected static _classname = "JV.TQueryZdSvrDateReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryZdSvrDateReq;
            tmp.physical_date = is.readString(0, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.physical_date);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryZdSvrDateReq.Object { 
            return {
                physical_date: this.physical_date
            };
        }

        readFromObject(json: TQueryZdSvrDateReq.Object) { 
            _hasOwnProperty.call(json, "physical_date") && (this.physical_date = json.physical_date);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryZdSvrDateReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryZdSvrDateReq._readFrom(is);
        }
    }

    export namespace TQueryZdSvrDateReq {
        export interface Object {
            physical_date: string;
        }
    }

    export class TQueryZdSvrDateRsp {
        msg_no: string = "";
        ret_code: number = 0;
        ret_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryZdSvrDateRsp";
        protected static _classname = "JV.TQueryZdSvrDateRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryZdSvrDateRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.ret_code = is.readInt32(1, true, 0);
            tmp.ret_msg = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.ret_code);
            os.writeString(2, this.ret_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryZdSvrDateRsp.Object { 
            return {
                msg_no: this.msg_no,
                ret_code: this.ret_code,
                ret_msg: this.ret_msg
            };
        }

        readFromObject(json: TQueryZdSvrDateRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "ret_code") && (this.ret_code = json.ret_code);
            _hasOwnProperty.call(json, "ret_msg") && (this.ret_msg = json.ret_msg);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryZdSvrDateRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryZdSvrDateRsp._readFrom(is);
        }
    }

    export namespace TQueryZdSvrDateRsp {
        export interface Object {
            msg_no?: string;
            ret_code: number;
            ret_msg: string;
        }
    }

    export class TAddWhiteListReq {
        name: string = "";
        id_type: string = "";
        id_card: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAddWhiteListReq";
        protected static _classname = "JV.TAddWhiteListReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAddWhiteListReq;
            tmp.name = is.readString(0, true, "");
            tmp.id_type = is.readString(1, true, "");
            tmp.id_card = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.name);
            os.writeString(1, this.id_type);
            os.writeString(2, this.id_card);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAddWhiteListReq.Object { 
            return {
                name: this.name,
                id_type: this.id_type,
                id_card: this.id_card
            };
        }

        readFromObject(json: TAddWhiteListReq.Object) { 
            _hasOwnProperty.call(json, "name") && (this.name = json.name);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type);
            _hasOwnProperty.call(json, "id_card") && (this.id_card = json.id_card);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAddWhiteListReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAddWhiteListReq._readFrom(is);
        }
    }

    export namespace TAddWhiteListReq {
        export interface Object {
            name: string;
            id_type: string;
            id_card: string;
        }
    }

    export class TAddWhiteListRsp {
        msg_no: string = "";
        ret_code: number = 0;
        ret_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAddWhiteListRsp";
        protected static _classname = "JV.TAddWhiteListRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAddWhiteListRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.ret_code = is.readInt32(1, true, 0);
            tmp.ret_msg = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.ret_code);
            os.writeString(2, this.ret_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAddWhiteListRsp.Object { 
            return {
                msg_no: this.msg_no,
                ret_code: this.ret_code,
                ret_msg: this.ret_msg
            };
        }

        readFromObject(json: TAddWhiteListRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "ret_code") && (this.ret_code = json.ret_code);
            _hasOwnProperty.call(json, "ret_msg") && (this.ret_msg = json.ret_msg);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAddWhiteListRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAddWhiteListRsp._readFrom(is);
        }
    }

    export namespace TAddWhiteListRsp {
        export interface Object {
            msg_no?: string;
            ret_code: number;
            ret_msg: string;
        }
    }

    export class TDeleteWhiteListReq {
        name: string = "";
        id_type: string = "";
        id_card: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TDeleteWhiteListReq";
        protected static _classname = "JV.TDeleteWhiteListReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TDeleteWhiteListReq;
            tmp.name = is.readString(0, true, "");
            tmp.id_type = is.readString(1, true, "");
            tmp.id_card = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.name);
            os.writeString(1, this.id_type);
            os.writeString(2, this.id_card);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TDeleteWhiteListReq.Object { 
            return {
                name: this.name,
                id_type: this.id_type,
                id_card: this.id_card
            };
        }

        readFromObject(json: TDeleteWhiteListReq.Object) { 
            _hasOwnProperty.call(json, "name") && (this.name = json.name);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type);
            _hasOwnProperty.call(json, "id_card") && (this.id_card = json.id_card);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TDeleteWhiteListReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TDeleteWhiteListReq._readFrom(is);
        }
    }

    export namespace TDeleteWhiteListReq {
        export interface Object {
            name: string;
            id_type: string;
            id_card: string;
        }
    }

    export class TDeleteWhiteListRsp {
        msg_no: string = "";
        ret_code: number = 0;
        ret_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TDeleteWhiteListRsp";
        protected static _classname = "JV.TDeleteWhiteListRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TDeleteWhiteListRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.ret_code = is.readInt32(1, true, 0);
            tmp.ret_msg = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.ret_code);
            os.writeString(2, this.ret_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TDeleteWhiteListRsp.Object { 
            return {
                msg_no: this.msg_no,
                ret_code: this.ret_code,
                ret_msg: this.ret_msg
            };
        }

        readFromObject(json: TDeleteWhiteListRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "ret_code") && (this.ret_code = json.ret_code);
            _hasOwnProperty.call(json, "ret_msg") && (this.ret_msg = json.ret_msg);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TDeleteWhiteListRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TDeleteWhiteListRsp._readFrom(is);
        }
    }

    export namespace TDeleteWhiteListRsp {
        export interface Object {
            msg_no?: string;
            ret_code: number;
            ret_msg: string;
        }
    }

    export class TQueryWhiteListReq {
        name: string = "";
        id_type: string = "";
        id_card: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryWhiteListReq";
        protected static _classname = "JV.TQueryWhiteListReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryWhiteListReq;
            tmp.name = is.readString(0, true, "");
            tmp.id_type = is.readString(1, true, "");
            tmp.id_card = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.name);
            os.writeString(1, this.id_type);
            os.writeString(2, this.id_card);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryWhiteListReq.Object { 
            return {
                name: this.name,
                id_type: this.id_type,
                id_card: this.id_card
            };
        }

        readFromObject(json: TQueryWhiteListReq.Object) { 
            _hasOwnProperty.call(json, "name") && (this.name = json.name);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type);
            _hasOwnProperty.call(json, "id_card") && (this.id_card = json.id_card);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryWhiteListReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryWhiteListReq._readFrom(is);
        }
    }

    export namespace TQueryWhiteListReq {
        export interface Object {
            name: string;
            id_type: string;
            id_card: string;
        }
    }

    export class TQueryWhiteListRsp {
        msg_no: string = "";
        ret_code: number = 0;
        ret_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryWhiteListRsp";
        protected static _classname = "JV.TQueryWhiteListRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryWhiteListRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.ret_code = is.readInt32(1, true, 0);
            tmp.ret_msg = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.ret_code);
            os.writeString(2, this.ret_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryWhiteListRsp.Object { 
            return {
                msg_no: this.msg_no,
                ret_code: this.ret_code,
                ret_msg: this.ret_msg
            };
        }

        readFromObject(json: TQueryWhiteListRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "ret_code") && (this.ret_code = json.ret_code);
            _hasOwnProperty.call(json, "ret_msg") && (this.ret_msg = json.ret_msg);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryWhiteListRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryWhiteListRsp._readFrom(is);
        }
    }

    export namespace TQueryWhiteListRsp {
        export interface Object {
            msg_no?: string;
            ret_code: number;
            ret_msg: string;
        }
    }

    export class ZtBaseProxyServantProxy {
        protected _name!: string
        protected _worker!: TarsRpc.ObjectProxy

        setTimeout (iTimeout: number) { this._worker.timeout = iTimeout; }
        getTimeout () { return this._worker.timeout; }
        setVersion (iVersion: number) { this._worker.version = iVersion; }
        getVersion () { return this._worker.version; }

        static addWhiteList = _castFunctionInfo({
            name: "addWhiteList",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAddWhiteListReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAddWhiteListRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAddWhiteListReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAddWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAddWhiteListReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAddWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::addWhiteList failed");
            }
        })

        addWhiteList(req: JV.TAddWhiteListReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("addWhiteList", ZtBaseProxyServantProxy.addWhiteList.tupEncoder(req, version), options, ZtBaseProxyServantProxy.addWhiteList).then(ZtBaseProxyServantProxy.addWhiteList.tupDecoder, ZtBaseProxyServantProxy.addWhiteList.errorResponser);
            } else {
                return this._worker.tars_invoke("addWhiteList", ZtBaseProxyServantProxy.addWhiteList.tarsEncoder(req), options, ZtBaseProxyServantProxy.addWhiteList).then(ZtBaseProxyServantProxy.addWhiteList.tarsDecoder, ZtBaseProxyServantProxy.addWhiteList.errorResponser);
            }
        }

        static bindAgreementPackage = _castFunctionInfo({
            name: "bindAgreementPackage",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementBindPackageReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementBindPackageRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementBindPackageReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementBindPackageRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementBindPackageReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementBindPackageRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::bindAgreementPackage failed");
            }
        })

        bindAgreementPackage(req: JV.TAgreementBindPackageReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("bindAgreementPackage", ZtBaseProxyServantProxy.bindAgreementPackage.tupEncoder(req, version), options, ZtBaseProxyServantProxy.bindAgreementPackage).then(ZtBaseProxyServantProxy.bindAgreementPackage.tupDecoder, ZtBaseProxyServantProxy.bindAgreementPackage.errorResponser);
            } else {
                return this._worker.tars_invoke("bindAgreementPackage", ZtBaseProxyServantProxy.bindAgreementPackage.tarsEncoder(req), options, ZtBaseProxyServantProxy.bindAgreementPackage).then(ZtBaseProxyServantProxy.bindAgreementPackage.tarsDecoder, ZtBaseProxyServantProxy.bindAgreementPackage.errorResponser);
            }
        }

        static bindAgreementToProduct = _castFunctionInfo({
            name: "bindAgreementToProduct",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementBindProductReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementBindProductRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementBindProductReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementBindProductRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementBindProductReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementBindProductRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::bindAgreementToProduct failed");
            }
        })

        bindAgreementToProduct(req: JV.TAgreementBindProductReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("bindAgreementToProduct", ZtBaseProxyServantProxy.bindAgreementToProduct.tupEncoder(req, version), options, ZtBaseProxyServantProxy.bindAgreementToProduct).then(ZtBaseProxyServantProxy.bindAgreementToProduct.tupDecoder, ZtBaseProxyServantProxy.bindAgreementToProduct.errorResponser);
            } else {
                return this._worker.tars_invoke("bindAgreementToProduct", ZtBaseProxyServantProxy.bindAgreementToProduct.tarsEncoder(req), options, ZtBaseProxyServantProxy.bindAgreementToProduct).then(ZtBaseProxyServantProxy.bindAgreementToProduct.tarsDecoder, ZtBaseProxyServantProxy.bindAgreementToProduct.errorResponser);
            }
        }

        static callClient = _castFunctionInfo({
            name: "callClient",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TCallClientReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TCallClientRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TCallClientReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TCallClientRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TCallClientReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TCallClientRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::callClient failed");
            }
        })

        callClient(req: JV.TCallClientReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("callClient", ZtBaseProxyServantProxy.callClient.tupEncoder(req, version), options, ZtBaseProxyServantProxy.callClient).then(ZtBaseProxyServantProxy.callClient.tupDecoder, ZtBaseProxyServantProxy.callClient.errorResponser);
            } else {
                return this._worker.tars_invoke("callClient", ZtBaseProxyServantProxy.callClient.tarsEncoder(req), options, ZtBaseProxyServantProxy.callClient).then(ZtBaseProxyServantProxy.callClient.tarsDecoder, ZtBaseProxyServantProxy.callClient.errorResponser);
            }
        }

        static cancelCall = _castFunctionInfo({
            name: "cancelCall",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TCancelCallReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TCancelCallRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TCancelCallReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TCancelCallRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TCancelCallReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TCancelCallRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::cancelCall failed");
            }
        })

        cancelCall(req: JV.TCancelCallReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("cancelCall", ZtBaseProxyServantProxy.cancelCall.tupEncoder(req, version), options, ZtBaseProxyServantProxy.cancelCall).then(ZtBaseProxyServantProxy.cancelCall.tupDecoder, ZtBaseProxyServantProxy.cancelCall.errorResponser);
            } else {
                return this._worker.tars_invoke("cancelCall", ZtBaseProxyServantProxy.cancelCall.tarsEncoder(req), options, ZtBaseProxyServantProxy.cancelCall).then(ZtBaseProxyServantProxy.cancelCall.tarsDecoder, ZtBaseProxyServantProxy.cancelCall.errorResponser);
            }
        }

        static deleteWhiteList = _castFunctionInfo({
            name: "deleteWhiteList",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TDeleteWhiteListReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TDeleteWhiteListRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TDeleteWhiteListReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TDeleteWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TDeleteWhiteListReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TDeleteWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::deleteWhiteList failed");
            }
        })

        deleteWhiteList(req: JV.TDeleteWhiteListReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("deleteWhiteList", ZtBaseProxyServantProxy.deleteWhiteList.tupEncoder(req, version), options, ZtBaseProxyServantProxy.deleteWhiteList).then(ZtBaseProxyServantProxy.deleteWhiteList.tupDecoder, ZtBaseProxyServantProxy.deleteWhiteList.errorResponser);
            } else {
                return this._worker.tars_invoke("deleteWhiteList", ZtBaseProxyServantProxy.deleteWhiteList.tarsEncoder(req), options, ZtBaseProxyServantProxy.deleteWhiteList).then(ZtBaseProxyServantProxy.deleteWhiteList.tarsDecoder, ZtBaseProxyServantProxy.deleteWhiteList.errorResponser);
            }
        }

        static downAgreement = _castFunctionInfo({
            name: "downAgreement",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementDownloadReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementDownloadRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementDownloadReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementDownloadRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementDownloadReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementDownloadRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::downAgreement failed");
            }
        })

        downAgreement(req: JV.TAgreementDownloadReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("downAgreement", ZtBaseProxyServantProxy.downAgreement.tupEncoder(req, version), options, ZtBaseProxyServantProxy.downAgreement).then(ZtBaseProxyServantProxy.downAgreement.tupDecoder, ZtBaseProxyServantProxy.downAgreement.errorResponser);
            } else {
                return this._worker.tars_invoke("downAgreement", ZtBaseProxyServantProxy.downAgreement.tarsEncoder(req), options, ZtBaseProxyServantProxy.downAgreement).then(ZtBaseProxyServantProxy.downAgreement.tarsDecoder, ZtBaseProxyServantProxy.downAgreement.errorResponser);
            }
        }

        static getAgreementSerialNo = _castFunctionInfo({
            name: "getAgreementSerialNo",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementGetSerialNoReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementGetSerialNoRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementGetSerialNoReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementGetSerialNoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementGetSerialNoReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementGetSerialNoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::getAgreementSerialNo failed");
            }
        })

        getAgreementSerialNo(req: JV.TAgreementGetSerialNoReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("getAgreementSerialNo", ZtBaseProxyServantProxy.getAgreementSerialNo.tupEncoder(req, version), options, ZtBaseProxyServantProxy.getAgreementSerialNo).then(ZtBaseProxyServantProxy.getAgreementSerialNo.tupDecoder, ZtBaseProxyServantProxy.getAgreementSerialNo.errorResponser);
            } else {
                return this._worker.tars_invoke("getAgreementSerialNo", ZtBaseProxyServantProxy.getAgreementSerialNo.tarsEncoder(req), options, ZtBaseProxyServantProxy.getAgreementSerialNo).then(ZtBaseProxyServantProxy.getAgreementSerialNo.tarsDecoder, ZtBaseProxyServantProxy.getAgreementSerialNo.errorResponser);
            }
        }

        static getInvestBeginTime = _castFunctionInfo({
            name: "getInvestBeginTime",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TGetInvestBeginTimeReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TGetInvestBeginTimeRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TGetInvestBeginTimeReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TGetInvestBeginTimeRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TGetInvestBeginTimeReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TGetInvestBeginTimeRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::getInvestBeginTime failed");
            }
        })

        getInvestBeginTime(req: JV.TGetInvestBeginTimeReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("getInvestBeginTime", ZtBaseProxyServantProxy.getInvestBeginTime.tupEncoder(req, version), options, ZtBaseProxyServantProxy.getInvestBeginTime).then(ZtBaseProxyServantProxy.getInvestBeginTime.tupDecoder, ZtBaseProxyServantProxy.getInvestBeginTime.errorResponser);
            } else {
                return this._worker.tars_invoke("getInvestBeginTime", ZtBaseProxyServantProxy.getInvestBeginTime.tarsEncoder(req), options, ZtBaseProxyServantProxy.getInvestBeginTime).then(ZtBaseProxyServantProxy.getInvestBeginTime.tarsDecoder, ZtBaseProxyServantProxy.getInvestBeginTime.errorResponser);
            }
        }

        static queryAgreement = _castFunctionInfo({
            name: "queryAgreement",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementQueryReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementQueryRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementQueryReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementQueryRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementQueryReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementQueryRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryAgreement failed");
            }
        })

        queryAgreement(req: JV.TAgreementQueryReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryAgreement", ZtBaseProxyServantProxy.queryAgreement.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryAgreement).then(ZtBaseProxyServantProxy.queryAgreement.tupDecoder, ZtBaseProxyServantProxy.queryAgreement.errorResponser);
            } else {
                return this._worker.tars_invoke("queryAgreement", ZtBaseProxyServantProxy.queryAgreement.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryAgreement).then(ZtBaseProxyServantProxy.queryAgreement.tarsDecoder, ZtBaseProxyServantProxy.queryAgreement.errorResponser);
            }
        }

        static queryAgreementConfig = _castFunctionInfo({
            name: "queryAgreementConfig",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementConfigReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementConfigRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementConfigReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementConfigRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementConfigReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementConfigRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryAgreementConfig failed");
            }
        })

        queryAgreementConfig(req: JV.TAgreementConfigReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryAgreementConfig", ZtBaseProxyServantProxy.queryAgreementConfig.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryAgreementConfig).then(ZtBaseProxyServantProxy.queryAgreementConfig.tupDecoder, ZtBaseProxyServantProxy.queryAgreementConfig.errorResponser);
            } else {
                return this._worker.tars_invoke("queryAgreementConfig", ZtBaseProxyServantProxy.queryAgreementConfig.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryAgreementConfig).then(ZtBaseProxyServantProxy.queryAgreementConfig.tarsDecoder, ZtBaseProxyServantProxy.queryAgreementConfig.errorResponser);
            }
        }

        static queryAgreementDict = _castFunctionInfo({
            name: "queryAgreementDict",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementDictReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementDictRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementDictReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementDictRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementDictReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementDictRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryAgreementDict failed");
            }
        })

        queryAgreementDict(req: JV.TAgreementDictReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryAgreementDict", ZtBaseProxyServantProxy.queryAgreementDict.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryAgreementDict).then(ZtBaseProxyServantProxy.queryAgreementDict.tupDecoder, ZtBaseProxyServantProxy.queryAgreementDict.errorResponser);
            } else {
                return this._worker.tars_invoke("queryAgreementDict", ZtBaseProxyServantProxy.queryAgreementDict.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryAgreementDict).then(ZtBaseProxyServantProxy.queryAgreementDict.tarsDecoder, ZtBaseProxyServantProxy.queryAgreementDict.errorResponser);
            }
        }

        static queryAgreementListByProduct = _castFunctionInfo({
            name: "queryAgreementListByProduct",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementListByProductReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementListByProductRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementListByProductReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementListByProductRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementListByProductReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementListByProductRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryAgreementListByProduct failed");
            }
        })

        queryAgreementListByProduct(req: JV.TAgreementListByProductReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryAgreementListByProduct", ZtBaseProxyServantProxy.queryAgreementListByProduct.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryAgreementListByProduct).then(ZtBaseProxyServantProxy.queryAgreementListByProduct.tupDecoder, ZtBaseProxyServantProxy.queryAgreementListByProduct.errorResponser);
            } else {
                return this._worker.tars_invoke("queryAgreementListByProduct", ZtBaseProxyServantProxy.queryAgreementListByProduct.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryAgreementListByProduct).then(ZtBaseProxyServantProxy.queryAgreementListByProduct.tarsDecoder, ZtBaseProxyServantProxy.queryAgreementListByProduct.errorResponser);
            }
        }

        static queryAgreementVariable = _castFunctionInfo({
            name: "queryAgreementVariable",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementVariableReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementVariableRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementVariableReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementVariableRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementVariableReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementVariableRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryAgreementVariable failed");
            }
        })

        queryAgreementVariable(req: JV.TAgreementVariableReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryAgreementVariable", ZtBaseProxyServantProxy.queryAgreementVariable.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryAgreementVariable).then(ZtBaseProxyServantProxy.queryAgreementVariable.tupDecoder, ZtBaseProxyServantProxy.queryAgreementVariable.errorResponser);
            } else {
                return this._worker.tars_invoke("queryAgreementVariable", ZtBaseProxyServantProxy.queryAgreementVariable.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryAgreementVariable).then(ZtBaseProxyServantProxy.queryAgreementVariable.tarsDecoder, ZtBaseProxyServantProxy.queryAgreementVariable.errorResponser);
            }
        }

        static queryCall = _castFunctionInfo({
            name: "queryCall",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TQueryCallReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TQueryCallRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TQueryCallReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TQueryCallRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TQueryCallReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TQueryCallRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryCall failed");
            }
        })

        queryCall(req: JV.TQueryCallReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryCall", ZtBaseProxyServantProxy.queryCall.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryCall).then(ZtBaseProxyServantProxy.queryCall.tupDecoder, ZtBaseProxyServantProxy.queryCall.errorResponser);
            } else {
                return this._worker.tars_invoke("queryCall", ZtBaseProxyServantProxy.queryCall.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryCall).then(ZtBaseProxyServantProxy.queryCall.tarsDecoder, ZtBaseProxyServantProxy.queryCall.errorResponser);
            }
        }

        static queryCallRecFile = _castFunctionInfo({
            name: "queryCallRecFile",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TQueryCallRecFileReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TQueryCallRecFileRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TQueryCallRecFileReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TQueryCallRecFileRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TQueryCallRecFileReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TQueryCallRecFileRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryCallRecFile failed");
            }
        })

        queryCallRecFile(req: JV.TQueryCallRecFileReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryCallRecFile", ZtBaseProxyServantProxy.queryCallRecFile.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryCallRecFile).then(ZtBaseProxyServantProxy.queryCallRecFile.tupDecoder, ZtBaseProxyServantProxy.queryCallRecFile.errorResponser);
            } else {
                return this._worker.tars_invoke("queryCallRecFile", ZtBaseProxyServantProxy.queryCallRecFile.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryCallRecFile).then(ZtBaseProxyServantProxy.queryCallRecFile.tarsDecoder, ZtBaseProxyServantProxy.queryCallRecFile.errorResponser);
            }
        }

        static queryTaskActInfo = _castFunctionInfo({
            name: "queryTaskActInfo",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TTaskActInfoReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TTaskActInfoRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TTaskActInfoReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TTaskActInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TTaskActInfoReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TTaskActInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryTaskActInfo failed");
            }
        })

        queryTaskActInfo(req: JV.TTaskActInfoReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryTaskActInfo", ZtBaseProxyServantProxy.queryTaskActInfo.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryTaskActInfo).then(ZtBaseProxyServantProxy.queryTaskActInfo.tupDecoder, ZtBaseProxyServantProxy.queryTaskActInfo.errorResponser);
            } else {
                return this._worker.tars_invoke("queryTaskActInfo", ZtBaseProxyServantProxy.queryTaskActInfo.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryTaskActInfo).then(ZtBaseProxyServantProxy.queryTaskActInfo.tarsDecoder, ZtBaseProxyServantProxy.queryTaskActInfo.errorResponser);
            }
        }

        static queryTaskQuestionInfo = _castFunctionInfo({
            name: "queryTaskQuestionInfo",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TTaskQuestionInfoReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TTaskQuestionInfoRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TTaskQuestionInfoReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TTaskQuestionInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TTaskQuestionInfoReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TTaskQuestionInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryTaskQuestionInfo failed");
            }
        })

        queryTaskQuestionInfo(req: JV.TTaskQuestionInfoReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryTaskQuestionInfo", ZtBaseProxyServantProxy.queryTaskQuestionInfo.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryTaskQuestionInfo).then(ZtBaseProxyServantProxy.queryTaskQuestionInfo.tupDecoder, ZtBaseProxyServantProxy.queryTaskQuestionInfo.errorResponser);
            } else {
                return this._worker.tars_invoke("queryTaskQuestionInfo", ZtBaseProxyServantProxy.queryTaskQuestionInfo.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryTaskQuestionInfo).then(ZtBaseProxyServantProxy.queryTaskQuestionInfo.tarsDecoder, ZtBaseProxyServantProxy.queryTaskQuestionInfo.errorResponser);
            }
        }

        static queryWhiteList = _castFunctionInfo({
            name: "queryWhiteList",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TQueryWhiteListReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TQueryWhiteListRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TQueryWhiteListReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TQueryWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TQueryWhiteListReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TQueryWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryWhiteList failed");
            }
        })

        queryWhiteList(req: JV.TQueryWhiteListReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryWhiteList", ZtBaseProxyServantProxy.queryWhiteList.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryWhiteList).then(ZtBaseProxyServantProxy.queryWhiteList.tupDecoder, ZtBaseProxyServantProxy.queryWhiteList.errorResponser);
            } else {
                return this._worker.tars_invoke("queryWhiteList", ZtBaseProxyServantProxy.queryWhiteList.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryWhiteList).then(ZtBaseProxyServantProxy.queryWhiteList.tarsDecoder, ZtBaseProxyServantProxy.queryWhiteList.errorResponser);
            }
        }

        static queryWorkOrderInfo = _castFunctionInfo({
            name: "queryWorkOrderInfo",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TWorkOrderInfoReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TWorkOrderInfoRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TWorkOrderInfoReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TWorkOrderInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TWorkOrderInfoReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TWorkOrderInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryWorkOrderInfo failed");
            }
        })

        queryWorkOrderInfo(req: JV.TWorkOrderInfoReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryWorkOrderInfo", ZtBaseProxyServantProxy.queryWorkOrderInfo.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryWorkOrderInfo).then(ZtBaseProxyServantProxy.queryWorkOrderInfo.tupDecoder, ZtBaseProxyServantProxy.queryWorkOrderInfo.errorResponser);
            } else {
                return this._worker.tars_invoke("queryWorkOrderInfo", ZtBaseProxyServantProxy.queryWorkOrderInfo.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryWorkOrderInfo).then(ZtBaseProxyServantProxy.queryWorkOrderInfo.tarsDecoder, ZtBaseProxyServantProxy.queryWorkOrderInfo.errorResponser);
            }
        }

        static queryZdSvrDate = _castFunctionInfo({
            name: "queryZdSvrDate",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TQueryZdSvrDateReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TQueryZdSvrDateRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TQueryZdSvrDateReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TQueryZdSvrDateRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TQueryZdSvrDateReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TQueryZdSvrDateRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::queryZdSvrDate failed");
            }
        })

        queryZdSvrDate(req: JV.TQueryZdSvrDateReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryZdSvrDate", ZtBaseProxyServantProxy.queryZdSvrDate.tupEncoder(req, version), options, ZtBaseProxyServantProxy.queryZdSvrDate).then(ZtBaseProxyServantProxy.queryZdSvrDate.tupDecoder, ZtBaseProxyServantProxy.queryZdSvrDate.errorResponser);
            } else {
                return this._worker.tars_invoke("queryZdSvrDate", ZtBaseProxyServantProxy.queryZdSvrDate.tarsEncoder(req), options, ZtBaseProxyServantProxy.queryZdSvrDate).then(ZtBaseProxyServantProxy.queryZdSvrDate.tarsDecoder, ZtBaseProxyServantProxy.queryZdSvrDate.errorResponser);
            }
        }

        static resetProductAgreement = _castFunctionInfo({
            name: "resetProductAgreement",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementBindProductResetReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementBindProductResetRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementBindProductResetReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementBindProductResetRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementBindProductResetReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementBindProductResetRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::resetProductAgreement failed");
            }
        })

        resetProductAgreement(req: JV.TAgreementBindProductResetReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("resetProductAgreement", ZtBaseProxyServantProxy.resetProductAgreement.tupEncoder(req, version), options, ZtBaseProxyServantProxy.resetProductAgreement).then(ZtBaseProxyServantProxy.resetProductAgreement.tupDecoder, ZtBaseProxyServantProxy.resetProductAgreement.errorResponser);
            } else {
                return this._worker.tars_invoke("resetProductAgreement", ZtBaseProxyServantProxy.resetProductAgreement.tarsEncoder(req), options, ZtBaseProxyServantProxy.resetProductAgreement).then(ZtBaseProxyServantProxy.resetProductAgreement.tarsDecoder, ZtBaseProxyServantProxy.resetProductAgreement.errorResponser);
            }
        }

        static saveAgreementImg = _castFunctionInfo({
            name: "saveAgreementImg",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementImgSaveReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementImgSaveRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementImgSaveReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementImgSaveRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementImgSaveReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementImgSaveRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::saveAgreementImg failed");
            }
        })

        saveAgreementImg(req: JV.TAgreementImgSaveReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("saveAgreementImg", ZtBaseProxyServantProxy.saveAgreementImg.tupEncoder(req, version), options, ZtBaseProxyServantProxy.saveAgreementImg).then(ZtBaseProxyServantProxy.saveAgreementImg.tupDecoder, ZtBaseProxyServantProxy.saveAgreementImg.errorResponser);
            } else {
                return this._worker.tars_invoke("saveAgreementImg", ZtBaseProxyServantProxy.saveAgreementImg.tarsEncoder(req), options, ZtBaseProxyServantProxy.saveAgreementImg).then(ZtBaseProxyServantProxy.saveAgreementImg.tarsDecoder, ZtBaseProxyServantProxy.saveAgreementImg.errorResponser);
            }
        }

        static saveAgreementTemplateConfig = _castFunctionInfo({
            name: "saveAgreementTemplateConfig",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementTemplateConfigSaveReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementTemplateConfigSaveRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementTemplateConfigSaveReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementTemplateConfigSaveRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementTemplateConfigSaveReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementTemplateConfigSaveRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::saveAgreementTemplateConfig failed");
            }
        })

        saveAgreementTemplateConfig(req: JV.TAgreementTemplateConfigSaveReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("saveAgreementTemplateConfig", ZtBaseProxyServantProxy.saveAgreementTemplateConfig.tupEncoder(req, version), options, ZtBaseProxyServantProxy.saveAgreementTemplateConfig).then(ZtBaseProxyServantProxy.saveAgreementTemplateConfig.tupDecoder, ZtBaseProxyServantProxy.saveAgreementTemplateConfig.errorResponser);
            } else {
                return this._worker.tars_invoke("saveAgreementTemplateConfig", ZtBaseProxyServantProxy.saveAgreementTemplateConfig.tarsEncoder(req), options, ZtBaseProxyServantProxy.saveAgreementTemplateConfig).then(ZtBaseProxyServantProxy.saveAgreementTemplateConfig.tarsDecoder, ZtBaseProxyServantProxy.saveAgreementTemplateConfig.errorResponser);
            }
        }

        static sendSms = _castFunctionInfo({
            name: "sendSms",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPSendSmsReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPSendSmsRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPSendSmsReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPSendSmsRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPSendSmsReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPSendSmsRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::sendSms failed");
            }
        })

        sendSms(req: JV.TPSendSmsReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("sendSms", ZtBaseProxyServantProxy.sendSms.tupEncoder(req, version), options, ZtBaseProxyServantProxy.sendSms).then(ZtBaseProxyServantProxy.sendSms.tupDecoder, ZtBaseProxyServantProxy.sendSms.errorResponser);
            } else {
                return this._worker.tars_invoke("sendSms", ZtBaseProxyServantProxy.sendSms.tarsEncoder(req), options, ZtBaseProxyServantProxy.sendSms).then(ZtBaseProxyServantProxy.sendSms.tarsDecoder, ZtBaseProxyServantProxy.sendSms.errorResponser);
            }
        }

        static sendSmsCode = _castFunctionInfo({
            name: "sendSmsCode",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPSendSmsCodeReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPSendSmsCodeRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPSendSmsCodeReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPSendSmsCodeRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPSendSmsCodeReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPSendSmsCodeRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::sendSmsCode failed");
            }
        })

        sendSmsCode(req: JV.TPSendSmsCodeReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("sendSmsCode", ZtBaseProxyServantProxy.sendSmsCode.tupEncoder(req, version), options, ZtBaseProxyServantProxy.sendSmsCode).then(ZtBaseProxyServantProxy.sendSmsCode.tupDecoder, ZtBaseProxyServantProxy.sendSmsCode.errorResponser);
            } else {
                return this._worker.tars_invoke("sendSmsCode", ZtBaseProxyServantProxy.sendSmsCode.tarsEncoder(req), options, ZtBaseProxyServantProxy.sendSmsCode).then(ZtBaseProxyServantProxy.sendSmsCode.tarsDecoder, ZtBaseProxyServantProxy.sendSmsCode.errorResponser);
            }
        }

        static signAgreement = _castFunctionInfo({
            name: "signAgreement",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementSignReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementSignRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementSignReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementSignRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementSignReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementSignRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::signAgreement failed");
            }
        })

        signAgreement(req: JV.TAgreementSignReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("signAgreement", ZtBaseProxyServantProxy.signAgreement.tupEncoder(req, version), options, ZtBaseProxyServantProxy.signAgreement).then(ZtBaseProxyServantProxy.signAgreement.tupDecoder, ZtBaseProxyServantProxy.signAgreement.errorResponser);
            } else {
                return this._worker.tars_invoke("signAgreement", ZtBaseProxyServantProxy.signAgreement.tarsEncoder(req), options, ZtBaseProxyServantProxy.signAgreement).then(ZtBaseProxyServantProxy.signAgreement.tarsDecoder, ZtBaseProxyServantProxy.signAgreement.errorResponser);
            }
        }

        static submitQueryInvestBeginTime = _castFunctionInfo({
            name: "submitQueryInvestBeginTime",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TSubmitQueryInvestBeginTimeReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TSubmitQueryInvestBeginTimeRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TSubmitQueryInvestBeginTimeReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TSubmitQueryInvestBeginTimeRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TSubmitQueryInvestBeginTimeReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TSubmitQueryInvestBeginTimeRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::submitQueryInvestBeginTime failed");
            }
        })

        submitQueryInvestBeginTime(req: JV.TSubmitQueryInvestBeginTimeReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("submitQueryInvestBeginTime", ZtBaseProxyServantProxy.submitQueryInvestBeginTime.tupEncoder(req, version), options, ZtBaseProxyServantProxy.submitQueryInvestBeginTime).then(ZtBaseProxyServantProxy.submitQueryInvestBeginTime.tupDecoder, ZtBaseProxyServantProxy.submitQueryInvestBeginTime.errorResponser);
            } else {
                return this._worker.tars_invoke("submitQueryInvestBeginTime", ZtBaseProxyServantProxy.submitQueryInvestBeginTime.tarsEncoder(req), options, ZtBaseProxyServantProxy.submitQueryInvestBeginTime).then(ZtBaseProxyServantProxy.submitQueryInvestBeginTime.tarsDecoder, ZtBaseProxyServantProxy.submitQueryInvestBeginTime.errorResponser);
            }
        }

        static uploadAgreement = _castFunctionInfo({
            name: "uploadAgreement",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementUploadReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementUploadRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementUploadReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementUploadRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementUploadReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementUploadRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::uploadAgreement failed");
            }
        })

        uploadAgreement(req: JV.TAgreementUploadReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("uploadAgreement", ZtBaseProxyServantProxy.uploadAgreement.tupEncoder(req, version), options, ZtBaseProxyServantProxy.uploadAgreement).then(ZtBaseProxyServantProxy.uploadAgreement.tupDecoder, ZtBaseProxyServantProxy.uploadAgreement.errorResponser);
            } else {
                return this._worker.tars_invoke("uploadAgreement", ZtBaseProxyServantProxy.uploadAgreement.tarsEncoder(req), options, ZtBaseProxyServantProxy.uploadAgreement).then(ZtBaseProxyServantProxy.uploadAgreement.tarsDecoder, ZtBaseProxyServantProxy.uploadAgreement.errorResponser);
            }
        }

        static uploadAgreementV2 = _castFunctionInfo({
            name: "uploadAgreementV2",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAgreementUploadV2Req",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAgreementUploadV2Rsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAgreementUploadV2Req) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAgreementUploadV2Rsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAgreementUploadV2Req, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAgreementUploadV2Rsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::uploadAgreementV2 failed");
            }
        })

        uploadAgreementV2(req: JV.TAgreementUploadV2Req, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("uploadAgreementV2", ZtBaseProxyServantProxy.uploadAgreementV2.tupEncoder(req, version), options, ZtBaseProxyServantProxy.uploadAgreementV2).then(ZtBaseProxyServantProxy.uploadAgreementV2.tupDecoder, ZtBaseProxyServantProxy.uploadAgreementV2.errorResponser);
            } else {
                return this._worker.tars_invoke("uploadAgreementV2", ZtBaseProxyServantProxy.uploadAgreementV2.tarsEncoder(req), options, ZtBaseProxyServantProxy.uploadAgreementV2).then(ZtBaseProxyServantProxy.uploadAgreementV2.tarsDecoder, ZtBaseProxyServantProxy.uploadAgreementV2.errorResponser);
            }
        }

        static verifySmsCode = _castFunctionInfo({
            name: "verifySmsCode",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPVerifySmsCodeReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPVerifySmsCodeRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPVerifySmsCodeReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPVerifySmsCodeRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPVerifySmsCodeReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPVerifySmsCodeRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtBaseProxyServant::verifySmsCode failed");
            }
        })

        verifySmsCode(req: JV.TPVerifySmsCodeReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("verifySmsCode", ZtBaseProxyServantProxy.verifySmsCode.tupEncoder(req, version), options, ZtBaseProxyServantProxy.verifySmsCode).then(ZtBaseProxyServantProxy.verifySmsCode.tupDecoder, ZtBaseProxyServantProxy.verifySmsCode.errorResponser);
            } else {
                return this._worker.tars_invoke("verifySmsCode", ZtBaseProxyServantProxy.verifySmsCode.tarsEncoder(req), options, ZtBaseProxyServantProxy.verifySmsCode).then(ZtBaseProxyServantProxy.verifySmsCode.tarsDecoder, ZtBaseProxyServantProxy.verifySmsCode.errorResponser);
            }
        }


    }

}


