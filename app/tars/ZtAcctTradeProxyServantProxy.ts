// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "ZtAcctTradeProxyServant.tars" by Client Mode
// **********************************************************************

/* tslint:disable */
/* eslint-disable */

/// <reference types="node" />
import assert = require("assert");
import * as TarsStream from "@tars/stream";
import * as TarsRpc from "@tars/rpc";
import * as _TARS_MODULE_B_ from "./InnerCommProxy";
import * as _TARS_MODULE_A_ from "./TradeStandardProxy";

const _hasOwnProperty = Object.prototype.hasOwnProperty;
function _castFunctionInfo<Ret, Arg>(data: SharedFunctionInfo<Ret, Arg>) { return data; }
function _makeError(data: TarsRpc.RpcResponse, message: string, type?: number): TarsRpc.RpcError {
    var error: any = new Error(message || "");
    error.request = data.request;
    error.response = {
        costtime: data.request.costtime
    };
    if (type === TarsRpc.error.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            code: type,
            message: message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
}

export interface SharedFunctionInfo<Ret = any, Arg = any> extends TarsRpc.SharedFunctionInfo {
    tarsEncoder (...args: any[]): TarsStream.BinBuffer,
    tarsDecoder (data: TarsRpc.RpcResponse): TarsRpc.ProxyResponse<Ret, Arg>,
    tupEncoder (...args: any[]): TarsStream.UniAttribute,
    tupDecoder (data: TarsRpc.RpcResponse): TarsRpc.ProxyResponse<Ret, Arg>,
    errorResponser (data: TarsRpc.RpcResponse): never
}

export namespace JV {
    export enum EOpenAccountZtState {
        EOpenAccountZtStateProcessing = 1,
        EOpenAccountZtStateSuccess = 2,
        EOpenAccountZtStateFail = 3,
        EOpenAccountZtStateNotFound = 9
    }

    export namespace EOpenAccountZtState {
        export const _classname = "JV.EOpenAccountZtState";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }

    export enum EChangeBankCardZtState {
        EChangeBankCardZtStateProcessing = 1,
        EChangeBankCardZtStateSuccess = 2,
        EChangeBankCardZtStateFail = 3,
        EChangeBankCardZtStateNotFound = 9
    }

    export namespace EChangeBankCardZtState {
        export const _classname = "JV.EChangeBankCardZtState";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }

    export enum EChangeBankCardZtStep {
        EChangeBankCardZtStep1 = 10,
        EChangeBankCardZtStep2 = 20,
        EChangeBankCardZtStep3 = 30,
        EChangeBankCardZtStep4 = 40,
        EChangeBankCardZtStep5 = 50,
        EChangeBankCardZtStep6 = 60
    }

    export namespace EChangeBankCardZtStep {
        export const _classname = "JV.EChangeBankCardZtStep";
        export function _write(os: TarsStream.TarsOutputStream, tag: number, val: number) { return os.writeInt32(tag, val); }
        export function _read(is: TarsStream.TarsInputStream, tag: number, def?: number) { return is.readInt32(tag, true, def); }
    }


    export class TTransferFromBankCardReq {
        msg_no: string = "";
        client_id: string = "";
        uid: string = "";
        account_id: string = "";
        acc_pwd: string = "";
        bank_pwd: string = "";
        currency_type: string = "";
        transfer_amt: string = "";
        tcc: string = "";
        order_list_id: string = "";
        broker_id: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTransferFromBankCardReq";
        protected static _classname = "JV.TTransferFromBankCardReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTransferFromBankCardReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.uid = is.readString(2, false, "");
            tmp.account_id = is.readString(3, false, "");
            tmp.acc_pwd = is.readString(4, false, "");
            tmp.bank_pwd = is.readString(5, false, "");
            tmp.currency_type = is.readString(6, false, "");
            tmp.transfer_amt = is.readString(7, false, "");
            tmp.tcc = is.readString(8, false, "");
            tmp.order_list_id = is.readString(9, false, "");
            tmp.broker_id = is.readInt32(10, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.client_id);
            os.writeString(2, this.uid);
            os.writeString(3, this.account_id);
            os.writeString(4, this.acc_pwd);
            os.writeString(5, this.bank_pwd);
            os.writeString(6, this.currency_type);
            os.writeString(7, this.transfer_amt);
            os.writeString(8, this.tcc);
            os.writeString(9, this.order_list_id);
            os.writeInt32(10, this.broker_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTransferFromBankCardReq.Object { 
            return {
                msg_no: this.msg_no,
                client_id: this.client_id,
                uid: this.uid,
                account_id: this.account_id,
                acc_pwd: this.acc_pwd,
                bank_pwd: this.bank_pwd,
                currency_type: this.currency_type,
                transfer_amt: this.transfer_amt,
                tcc: this.tcc,
                order_list_id: this.order_list_id,
                broker_id: this.broker_id
            };
        }

        readFromObject(json: TTransferFromBankCardReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "acc_pwd") && (this.acc_pwd = json.acc_pwd!);
            _hasOwnProperty.call(json, "bank_pwd") && (this.bank_pwd = json.bank_pwd!);
            _hasOwnProperty.call(json, "currency_type") && (this.currency_type = json.currency_type!);
            _hasOwnProperty.call(json, "transfer_amt") && (this.transfer_amt = json.transfer_amt!);
            _hasOwnProperty.call(json, "tcc") && (this.tcc = json.tcc!);
            _hasOwnProperty.call(json, "order_list_id") && (this.order_list_id = json.order_list_id!);
            _hasOwnProperty.call(json, "broker_id") && (this.broker_id = json.broker_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTransferFromBankCardReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTransferFromBankCardReq._readFrom(is);
        }
    }

    export namespace TTransferFromBankCardReq {
        export interface Object {
            msg_no?: string;
            client_id?: string;
            uid?: string;
            account_id?: string;
            acc_pwd?: string;
            bank_pwd?: string;
            currency_type?: string;
            transfer_amt?: string;
            tcc?: string;
            order_list_id?: string;
            broker_id?: number;
        }
    }

    export class TTransferFromBankCardRsp {
        err_msg: string = "";
        err_code: number = 0;
        busi_list_id: string = "";
        busi_state: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTransferFromBankCardRsp";
        protected static _classname = "JV.TTransferFromBankCardRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTransferFromBankCardRsp;
            tmp.err_msg = is.readString(0, false, "");
            tmp.err_code = is.readInt32(1, false, 0);
            tmp.busi_list_id = is.readString(2, false, "");
            tmp.busi_state = is.readInt32(3, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.err_msg);
            os.writeInt32(1, this.err_code);
            os.writeString(2, this.busi_list_id);
            os.writeInt32(3, this.busi_state);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTransferFromBankCardRsp.Object { 
            return {
                err_msg: this.err_msg,
                err_code: this.err_code,
                busi_list_id: this.busi_list_id,
                busi_state: this.busi_state
            };
        }

        readFromObject(json: TTransferFromBankCardRsp.Object) { 
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            _hasOwnProperty.call(json, "busi_list_id") && (this.busi_list_id = json.busi_list_id!);
            _hasOwnProperty.call(json, "busi_state") && (this.busi_state = json.busi_state!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTransferFromBankCardRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTransferFromBankCardRsp._readFrom(is);
        }
    }

    export namespace TTransferFromBankCardRsp {
        export interface Object {
            err_msg?: string;
            err_code?: number;
            busi_list_id?: string;
            busi_state?: number;
        }
    }

    export class TTransferToBankCardReq {
        msg_no: string = "";
        client_id: string = "";
        uid: string = "";
        account_id: string = "";
        acc_pwd: string = "";
        bank_pwd: string = "";
        currency_type: string = "";
        transfer_amt: string = "";
        tcc: string = "";
        order_list_id: string = "";
        broker_id: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTransferToBankCardReq";
        protected static _classname = "JV.TTransferToBankCardReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTransferToBankCardReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.uid = is.readString(2, false, "");
            tmp.account_id = is.readString(3, false, "");
            tmp.acc_pwd = is.readString(4, false, "");
            tmp.bank_pwd = is.readString(5, false, "");
            tmp.currency_type = is.readString(6, false, "");
            tmp.transfer_amt = is.readString(7, false, "");
            tmp.tcc = is.readString(8, false, "");
            tmp.order_list_id = is.readString(9, false, "");
            tmp.broker_id = is.readInt32(10, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.client_id);
            os.writeString(2, this.uid);
            os.writeString(3, this.account_id);
            os.writeString(4, this.acc_pwd);
            os.writeString(5, this.bank_pwd);
            os.writeString(6, this.currency_type);
            os.writeString(7, this.transfer_amt);
            os.writeString(8, this.tcc);
            os.writeString(9, this.order_list_id);
            os.writeInt32(10, this.broker_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTransferToBankCardReq.Object { 
            return {
                msg_no: this.msg_no,
                client_id: this.client_id,
                uid: this.uid,
                account_id: this.account_id,
                acc_pwd: this.acc_pwd,
                bank_pwd: this.bank_pwd,
                currency_type: this.currency_type,
                transfer_amt: this.transfer_amt,
                tcc: this.tcc,
                order_list_id: this.order_list_id,
                broker_id: this.broker_id
            };
        }

        readFromObject(json: TTransferToBankCardReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "acc_pwd") && (this.acc_pwd = json.acc_pwd!);
            _hasOwnProperty.call(json, "bank_pwd") && (this.bank_pwd = json.bank_pwd!);
            _hasOwnProperty.call(json, "currency_type") && (this.currency_type = json.currency_type!);
            _hasOwnProperty.call(json, "transfer_amt") && (this.transfer_amt = json.transfer_amt!);
            _hasOwnProperty.call(json, "tcc") && (this.tcc = json.tcc!);
            _hasOwnProperty.call(json, "order_list_id") && (this.order_list_id = json.order_list_id!);
            _hasOwnProperty.call(json, "broker_id") && (this.broker_id = json.broker_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTransferToBankCardReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTransferToBankCardReq._readFrom(is);
        }
    }

    export namespace TTransferToBankCardReq {
        export interface Object {
            msg_no?: string;
            client_id?: string;
            uid?: string;
            account_id?: string;
            acc_pwd?: string;
            bank_pwd?: string;
            currency_type?: string;
            transfer_amt?: string;
            tcc?: string;
            order_list_id?: string;
            broker_id?: number;
        }
    }

    export class TTransferToBankCardRsp {
        msg_no: string = "";
        order_list_id: string = "";
        busi_timestamp: number = 0;
        busi_list_id: string = "";
        busi_state: number = 0;
        err_msg: string = "";
        err_code: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTransferToBankCardRsp";
        protected static _classname = "JV.TTransferToBankCardRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTransferToBankCardRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.order_list_id = is.readString(1, false, "");
            tmp.busi_timestamp = is.readInt32(2, false, 0);
            tmp.busi_list_id = is.readString(3, false, "");
            tmp.busi_state = is.readInt32(4, false, 0);
            tmp.err_msg = is.readString(5, false, "");
            tmp.err_code = is.readInt32(6, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.order_list_id);
            os.writeInt32(2, this.busi_timestamp);
            os.writeString(3, this.busi_list_id);
            os.writeInt32(4, this.busi_state);
            os.writeString(5, this.err_msg);
            os.writeInt32(6, this.err_code);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTransferToBankCardRsp.Object { 
            return {
                msg_no: this.msg_no,
                order_list_id: this.order_list_id,
                busi_timestamp: this.busi_timestamp,
                busi_list_id: this.busi_list_id,
                busi_state: this.busi_state,
                err_msg: this.err_msg,
                err_code: this.err_code
            };
        }

        readFromObject(json: TTransferToBankCardRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "order_list_id") && (this.order_list_id = json.order_list_id!);
            _hasOwnProperty.call(json, "busi_timestamp") && (this.busi_timestamp = json.busi_timestamp!);
            _hasOwnProperty.call(json, "busi_list_id") && (this.busi_list_id = json.busi_list_id!);
            _hasOwnProperty.call(json, "busi_state") && (this.busi_state = json.busi_state!);
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTransferToBankCardRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTransferToBankCardRsp._readFrom(is);
        }
    }

    export namespace TTransferToBankCardRsp {
        export interface Object {
            msg_no?: string;
            order_list_id?: string;
            busi_timestamp?: number;
            busi_list_id?: string;
            busi_state?: number;
            err_msg?: string;
            err_code?: number;
        }
    }

    export class TQueryCapiAcctBalanceReq {
        msg_no: string = "";
        uid: string = "";
        account_id: string = "";
        currency_type: string = "";
        client_id: string = "";
        broker_id: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryCapiAcctBalanceReq";
        protected static _classname = "JV.TQueryCapiAcctBalanceReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryCapiAcctBalanceReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.uid = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.currency_type = is.readString(3, false, "");
            tmp.client_id = is.readString(4, false, "");
            tmp.broker_id = is.readInt32(5, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.uid);
            os.writeString(2, this.account_id);
            os.writeString(3, this.currency_type);
            os.writeString(4, this.client_id);
            os.writeInt32(5, this.broker_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryCapiAcctBalanceReq.Object { 
            return {
                msg_no: this.msg_no,
                uid: this.uid,
                account_id: this.account_id,
                currency_type: this.currency_type,
                client_id: this.client_id,
                broker_id: this.broker_id
            };
        }

        readFromObject(json: TQueryCapiAcctBalanceReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "currency_type") && (this.currency_type = json.currency_type!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "broker_id") && (this.broker_id = json.broker_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryCapiAcctBalanceReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryCapiAcctBalanceReq._readFrom(is);
        }
    }

    export namespace TQueryCapiAcctBalanceReq {
        export interface Object {
            msg_no?: string;
            uid?: string;
            account_id?: string;
            currency_type?: string;
            client_id?: string;
            broker_id?: number;
        }
    }

    export class TQueryCapiAcctBalanceRsp {
        msg: string = "";
        msg_no: string = "";
        avail_balance: string = "";
        froze_balance: string = "";
        can_fetch_balance: string = "";
        holding_asset: string = "";
        asset_all: string = "";
        balance: string = "";
        trade_frozen_balance: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryCapiAcctBalanceRsp";
        protected static _classname = "JV.TQueryCapiAcctBalanceRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryCapiAcctBalanceRsp;
            tmp.msg = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.avail_balance = is.readString(2, false, "");
            tmp.froze_balance = is.readString(3, false, "");
            tmp.can_fetch_balance = is.readString(4, false, "");
            tmp.holding_asset = is.readString(5, false, "");
            tmp.asset_all = is.readString(6, false, "");
            tmp.balance = is.readString(7, false, "");
            tmp.trade_frozen_balance = is.readString(8, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg);
            os.writeString(1, this.msg_no);
            os.writeString(2, this.avail_balance);
            os.writeString(3, this.froze_balance);
            os.writeString(4, this.can_fetch_balance);
            os.writeString(5, this.holding_asset);
            os.writeString(6, this.asset_all);
            os.writeString(7, this.balance);
            os.writeString(8, this.trade_frozen_balance);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryCapiAcctBalanceRsp.Object { 
            return {
                msg: this.msg,
                msg_no: this.msg_no,
                avail_balance: this.avail_balance,
                froze_balance: this.froze_balance,
                can_fetch_balance: this.can_fetch_balance,
                holding_asset: this.holding_asset,
                asset_all: this.asset_all,
                balance: this.balance,
                trade_frozen_balance: this.trade_frozen_balance
            };
        }

        readFromObject(json: TQueryCapiAcctBalanceRsp.Object) { 
            _hasOwnProperty.call(json, "msg") && (this.msg = json.msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "avail_balance") && (this.avail_balance = json.avail_balance!);
            _hasOwnProperty.call(json, "froze_balance") && (this.froze_balance = json.froze_balance!);
            _hasOwnProperty.call(json, "can_fetch_balance") && (this.can_fetch_balance = json.can_fetch_balance!);
            _hasOwnProperty.call(json, "holding_asset") && (this.holding_asset = json.holding_asset!);
            _hasOwnProperty.call(json, "asset_all") && (this.asset_all = json.asset_all!);
            _hasOwnProperty.call(json, "balance") && (this.balance = json.balance!);
            _hasOwnProperty.call(json, "trade_frozen_balance") && (this.trade_frozen_balance = json.trade_frozen_balance!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryCapiAcctBalanceRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryCapiAcctBalanceRsp._readFrom(is);
        }
    }

    export namespace TQueryCapiAcctBalanceRsp {
        export interface Object {
            msg?: string;
            msg_no?: string;
            avail_balance?: string;
            froze_balance?: string;
            can_fetch_balance?: string;
            holding_asset?: string;
            asset_all?: string;
            balance?: string;
            trade_frozen_balance?: string;
        }
    }

    export class TQueryTransferResultReq {
        msg_no: string = "";
        client_id: string = "";
        uid: string = "";
        account_id: string = "";
        currency_type: string = "";
        busi_list_id: string = "";
        broker_id: number = 0;
        offset: string = "";
        page_size: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryTransferResultReq";
        protected static _classname = "JV.TQueryTransferResultReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryTransferResultReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.uid = is.readString(2, false, "");
            tmp.account_id = is.readString(3, false, "");
            tmp.currency_type = is.readString(4, false, "");
            tmp.busi_list_id = is.readString(5, false, "");
            tmp.broker_id = is.readInt32(6, false, 0);
            tmp.offset = is.readString(7, false, "");
            tmp.page_size = is.readInt32(8, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.client_id);
            os.writeString(2, this.uid);
            os.writeString(3, this.account_id);
            os.writeString(4, this.currency_type);
            os.writeString(5, this.busi_list_id);
            os.writeInt32(6, this.broker_id);
            os.writeString(7, this.offset);
            os.writeInt32(8, this.page_size);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryTransferResultReq.Object { 
            return {
                msg_no: this.msg_no,
                client_id: this.client_id,
                uid: this.uid,
                account_id: this.account_id,
                currency_type: this.currency_type,
                busi_list_id: this.busi_list_id,
                broker_id: this.broker_id,
                offset: this.offset,
                page_size: this.page_size
            };
        }

        readFromObject(json: TQueryTransferResultReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "currency_type") && (this.currency_type = json.currency_type!);
            _hasOwnProperty.call(json, "busi_list_id") && (this.busi_list_id = json.busi_list_id!);
            _hasOwnProperty.call(json, "broker_id") && (this.broker_id = json.broker_id!);
            _hasOwnProperty.call(json, "offset") && (this.offset = json.offset!);
            _hasOwnProperty.call(json, "page_size") && (this.page_size = json.page_size!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryTransferResultReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryTransferResultReq._readFrom(is);
        }
    }

    export namespace TQueryTransferResultReq {
        export interface Object {
            msg_no?: string;
            client_id?: string;
            uid?: string;
            account_id?: string;
            currency_type?: string;
            busi_list_id?: string;
            broker_id?: number;
            offset?: string;
            page_size?: number;
        }
    }

    export class TTransResultItem {
        order_list_id: string = "";
        busi_timestamp: number = 0;
        transfer_amt: string = "";
        trans_direction: number = 0;
        bank_code: number = 0;
        bank_id_card: string = "";
        order_state: number = 0;
        busi_list_id: string = "";
        transfer_time: string = "";
        original_code: string = "";
        original_msg: string = "";
        convert_code: number = 0;
        convert_msg: string = "";
        tran_date: string = "";
        tran_time: string = "";
        trd_date: string = "";
        currency: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TTransResultItem";
        protected static _classname = "JV.TTransResultItem";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TTransResultItem;
            tmp.order_list_id = is.readString(0, false, "");
            tmp.busi_timestamp = is.readInt32(1, false, 0);
            tmp.transfer_amt = is.readString(2, false, "");
            tmp.trans_direction = is.readInt32(3, false, 0);
            tmp.bank_code = is.readInt32(4, false, 0);
            tmp.bank_id_card = is.readString(5, false, "");
            tmp.order_state = is.readInt32(6, false, 0);
            tmp.busi_list_id = is.readString(7, false, "");
            tmp.transfer_time = is.readString(8, false, "");
            tmp.original_code = is.readString(9, false, "");
            tmp.original_msg = is.readString(10, false, "");
            tmp.convert_code = is.readInt32(11, false, 0);
            tmp.convert_msg = is.readString(12, false, "");
            tmp.tran_date = is.readString(13, false, "");
            tmp.tran_time = is.readString(14, false, "");
            tmp.trd_date = is.readString(15, false, "");
            tmp.currency = is.readString(16, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.order_list_id);
            os.writeInt32(1, this.busi_timestamp);
            os.writeString(2, this.transfer_amt);
            os.writeInt32(3, this.trans_direction);
            os.writeInt32(4, this.bank_code);
            os.writeString(5, this.bank_id_card);
            os.writeInt32(6, this.order_state);
            os.writeString(7, this.busi_list_id);
            os.writeString(8, this.transfer_time);
            os.writeString(9, this.original_code);
            os.writeString(10, this.original_msg);
            os.writeInt32(11, this.convert_code);
            os.writeString(12, this.convert_msg);
            os.writeString(13, this.tran_date);
            os.writeString(14, this.tran_time);
            os.writeString(15, this.trd_date);
            os.writeString(16, this.currency);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TTransResultItem.Object { 
            return {
                order_list_id: this.order_list_id,
                busi_timestamp: this.busi_timestamp,
                transfer_amt: this.transfer_amt,
                trans_direction: this.trans_direction,
                bank_code: this.bank_code,
                bank_id_card: this.bank_id_card,
                order_state: this.order_state,
                busi_list_id: this.busi_list_id,
                transfer_time: this.transfer_time,
                original_code: this.original_code,
                original_msg: this.original_msg,
                convert_code: this.convert_code,
                convert_msg: this.convert_msg,
                tran_date: this.tran_date,
                tran_time: this.tran_time,
                trd_date: this.trd_date,
                currency: this.currency
            };
        }

        readFromObject(json: TTransResultItem.Object) { 
            _hasOwnProperty.call(json, "order_list_id") && (this.order_list_id = json.order_list_id!);
            _hasOwnProperty.call(json, "busi_timestamp") && (this.busi_timestamp = json.busi_timestamp!);
            _hasOwnProperty.call(json, "transfer_amt") && (this.transfer_amt = json.transfer_amt!);
            _hasOwnProperty.call(json, "trans_direction") && (this.trans_direction = json.trans_direction!);
            _hasOwnProperty.call(json, "bank_code") && (this.bank_code = json.bank_code!);
            _hasOwnProperty.call(json, "bank_id_card") && (this.bank_id_card = json.bank_id_card!);
            _hasOwnProperty.call(json, "order_state") && (this.order_state = json.order_state!);
            _hasOwnProperty.call(json, "busi_list_id") && (this.busi_list_id = json.busi_list_id!);
            _hasOwnProperty.call(json, "transfer_time") && (this.transfer_time = json.transfer_time!);
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "convert_code") && (this.convert_code = json.convert_code!);
            _hasOwnProperty.call(json, "convert_msg") && (this.convert_msg = json.convert_msg!);
            _hasOwnProperty.call(json, "tran_date") && (this.tran_date = json.tran_date!);
            _hasOwnProperty.call(json, "tran_time") && (this.tran_time = json.tran_time!);
            _hasOwnProperty.call(json, "trd_date") && (this.trd_date = json.trd_date!);
            _hasOwnProperty.call(json, "currency") && (this.currency = json.currency!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TTransResultItem();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TTransResultItem._readFrom(is);
        }
    }

    export namespace TTransResultItem {
        export interface Object {
            order_list_id?: string;
            busi_timestamp?: number;
            transfer_amt?: string;
            trans_direction?: number;
            bank_code?: number;
            bank_id_card?: string;
            order_state?: number;
            busi_list_id?: string;
            transfer_time?: string;
            original_code?: string;
            original_msg?: string;
            convert_code?: number;
            convert_msg?: string;
            tran_date?: string;
            tran_time?: string;
            trd_date?: string;
            currency?: string;
        }
    }

    export class TQueryTransferResultRsp {
        msg_no: string = "";
        err_msg: string = "";
        err_code: number = 0;
        offset: string = "";
        is_finish: number = 0;
        trans_ret_vec: TarsStream.List<JV.TTransResultItem> = new TarsStream.List(JV.TTransResultItem);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryTransferResultRsp";
        protected static _classname = "JV.TQueryTransferResultRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryTransferResultRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.err_msg = is.readString(1, false, "");
            tmp.err_code = is.readInt32(2, false, 0);
            tmp.offset = is.readString(3, false, "");
            tmp.is_finish = is.readInt32(4, false, 0);
            tmp.trans_ret_vec = is.readList(5, false, TarsStream.List(JV.TTransResultItem));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.err_msg);
            os.writeInt32(2, this.err_code);
            os.writeString(3, this.offset);
            os.writeInt32(4, this.is_finish);
            os.writeList(5, this.trans_ret_vec);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryTransferResultRsp.Object { 
            return {
                msg_no: this.msg_no,
                err_msg: this.err_msg,
                err_code: this.err_code,
                offset: this.offset,
                is_finish: this.is_finish,
                trans_ret_vec: this.trans_ret_vec.toObject()
            };
        }

        readFromObject(json: TQueryTransferResultRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            _hasOwnProperty.call(json, "offset") && (this.offset = json.offset!);
            _hasOwnProperty.call(json, "is_finish") && (this.is_finish = json.is_finish!);
            _hasOwnProperty.call(json, "trans_ret_vec") && (this.trans_ret_vec.readFromObject(json.trans_ret_vec!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryTransferResultRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryTransferResultRsp._readFrom(is);
        }
    }

    export namespace TQueryTransferResultRsp {
        export interface Object {
            msg_no?: string;
            err_msg?: string;
            err_code?: number;
            offset?: string;
            is_finish?: number;
            trans_ret_vec?: Array<JV.TTransResultItem.Object>;
        }
    }

    export class TCommitQueryBankCardBalanceReq {
        msg_no: string = "";
        client_id: string = "";
        uid: string = "";
        account_id: string = "";
        tcc: string = "";
        currency_type: string = "";
        bank_pwd: string = "";
        acc_pwd: string = "";
        broker_id: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TCommitQueryBankCardBalanceReq";
        protected static _classname = "JV.TCommitQueryBankCardBalanceReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TCommitQueryBankCardBalanceReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.uid = is.readString(2, false, "");
            tmp.account_id = is.readString(3, false, "");
            tmp.tcc = is.readString(4, false, "");
            tmp.currency_type = is.readString(5, false, "");
            tmp.bank_pwd = is.readString(6, false, "");
            tmp.acc_pwd = is.readString(7, false, "");
            tmp.broker_id = is.readInt32(8, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.client_id);
            os.writeString(2, this.uid);
            os.writeString(3, this.account_id);
            os.writeString(4, this.tcc);
            os.writeString(5, this.currency_type);
            os.writeString(6, this.bank_pwd);
            os.writeString(7, this.acc_pwd);
            os.writeInt32(8, this.broker_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TCommitQueryBankCardBalanceReq.Object { 
            return {
                msg_no: this.msg_no,
                client_id: this.client_id,
                uid: this.uid,
                account_id: this.account_id,
                tcc: this.tcc,
                currency_type: this.currency_type,
                bank_pwd: this.bank_pwd,
                acc_pwd: this.acc_pwd,
                broker_id: this.broker_id
            };
        }

        readFromObject(json: TCommitQueryBankCardBalanceReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "tcc") && (this.tcc = json.tcc!);
            _hasOwnProperty.call(json, "currency_type") && (this.currency_type = json.currency_type!);
            _hasOwnProperty.call(json, "bank_pwd") && (this.bank_pwd = json.bank_pwd!);
            _hasOwnProperty.call(json, "acc_pwd") && (this.acc_pwd = json.acc_pwd!);
            _hasOwnProperty.call(json, "broker_id") && (this.broker_id = json.broker_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TCommitQueryBankCardBalanceReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TCommitQueryBankCardBalanceReq._readFrom(is);
        }
    }

    export namespace TCommitQueryBankCardBalanceReq {
        export interface Object {
            msg_no?: string;
            client_id?: string;
            uid?: string;
            account_id?: string;
            tcc?: string;
            currency_type?: string;
            bank_pwd?: string;
            acc_pwd?: string;
            broker_id?: number;
        }
    }

    export class TCommitQueryBankCardBalanceRsp {
        msg_no: string = "";
        busi_list_id: string = "";
        order_state: number = 0;
        busi_timestamp: number = 0;
        err_msg: string = "";
        err_code: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TCommitQueryBankCardBalanceRsp";
        protected static _classname = "JV.TCommitQueryBankCardBalanceRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TCommitQueryBankCardBalanceRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.busi_list_id = is.readString(1, false, "");
            tmp.order_state = is.readInt32(2, false, 0);
            tmp.busi_timestamp = is.readInt32(3, false, 0);
            tmp.err_msg = is.readString(4, false, "");
            tmp.err_code = is.readInt32(5, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.busi_list_id);
            os.writeInt32(2, this.order_state);
            os.writeInt32(3, this.busi_timestamp);
            os.writeString(4, this.err_msg);
            os.writeInt32(5, this.err_code);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TCommitQueryBankCardBalanceRsp.Object { 
            return {
                msg_no: this.msg_no,
                busi_list_id: this.busi_list_id,
                order_state: this.order_state,
                busi_timestamp: this.busi_timestamp,
                err_msg: this.err_msg,
                err_code: this.err_code
            };
        }

        readFromObject(json: TCommitQueryBankCardBalanceRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "busi_list_id") && (this.busi_list_id = json.busi_list_id!);
            _hasOwnProperty.call(json, "order_state") && (this.order_state = json.order_state!);
            _hasOwnProperty.call(json, "busi_timestamp") && (this.busi_timestamp = json.busi_timestamp!);
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TCommitQueryBankCardBalanceRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TCommitQueryBankCardBalanceRsp._readFrom(is);
        }
    }

    export namespace TCommitQueryBankCardBalanceRsp {
        export interface Object {
            msg_no?: string;
            busi_list_id?: string;
            order_state?: number;
            busi_timestamp?: number;
            err_msg?: string;
            err_code?: number;
        }
    }

    export class TDoQueryBankCardBalanceReq {
        msg_no: string = "";
        client_id: string = "";
        uid: string = "";
        account_id: string = "";
        currency_type: string = "";
        busi_list_id: string = "";
        broker_id: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TDoQueryBankCardBalanceReq";
        protected static _classname = "JV.TDoQueryBankCardBalanceReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TDoQueryBankCardBalanceReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.uid = is.readString(2, false, "");
            tmp.account_id = is.readString(3, false, "");
            tmp.currency_type = is.readString(4, false, "");
            tmp.busi_list_id = is.readString(5, false, "");
            tmp.broker_id = is.readInt32(6, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.client_id);
            os.writeString(2, this.uid);
            os.writeString(3, this.account_id);
            os.writeString(4, this.currency_type);
            os.writeString(5, this.busi_list_id);
            os.writeInt32(6, this.broker_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TDoQueryBankCardBalanceReq.Object { 
            return {
                msg_no: this.msg_no,
                client_id: this.client_id,
                uid: this.uid,
                account_id: this.account_id,
                currency_type: this.currency_type,
                busi_list_id: this.busi_list_id,
                broker_id: this.broker_id
            };
        }

        readFromObject(json: TDoQueryBankCardBalanceReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "currency_type") && (this.currency_type = json.currency_type!);
            _hasOwnProperty.call(json, "busi_list_id") && (this.busi_list_id = json.busi_list_id!);
            _hasOwnProperty.call(json, "broker_id") && (this.broker_id = json.broker_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TDoQueryBankCardBalanceReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TDoQueryBankCardBalanceReq._readFrom(is);
        }
    }

    export namespace TDoQueryBankCardBalanceReq {
        export interface Object {
            msg_no?: string;
            client_id?: string;
            uid?: string;
            account_id?: string;
            currency_type?: string;
            busi_list_id?: string;
            broker_id?: number;
        }
    }

    export class TBankResultItem {
        busi_list_id: string = "";
        order_state: number = 0;
        busi_timestamp: number = 0;
        balance: string = "";
        currency_type: number = 0;
        bank_code: number = 0;
        trans_direction: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TBankResultItem";
        protected static _classname = "JV.TBankResultItem";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TBankResultItem;
            tmp.busi_list_id = is.readString(0, false, "");
            tmp.order_state = is.readInt32(1, false, 0);
            tmp.busi_timestamp = is.readInt32(2, false, 0);
            tmp.balance = is.readString(3, false, "");
            tmp.currency_type = is.readInt32(4, false, 0);
            tmp.bank_code = is.readInt32(5, false, 0);
            tmp.trans_direction = is.readInt32(6, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.busi_list_id);
            os.writeInt32(1, this.order_state);
            os.writeInt32(2, this.busi_timestamp);
            os.writeString(3, this.balance);
            os.writeInt32(4, this.currency_type);
            os.writeInt32(5, this.bank_code);
            os.writeInt32(6, this.trans_direction);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TBankResultItem.Object { 
            return {
                busi_list_id: this.busi_list_id,
                order_state: this.order_state,
                busi_timestamp: this.busi_timestamp,
                balance: this.balance,
                currency_type: this.currency_type,
                bank_code: this.bank_code,
                trans_direction: this.trans_direction
            };
        }

        readFromObject(json: TBankResultItem.Object) { 
            _hasOwnProperty.call(json, "busi_list_id") && (this.busi_list_id = json.busi_list_id!);
            _hasOwnProperty.call(json, "order_state") && (this.order_state = json.order_state!);
            _hasOwnProperty.call(json, "busi_timestamp") && (this.busi_timestamp = json.busi_timestamp!);
            _hasOwnProperty.call(json, "balance") && (this.balance = json.balance!);
            _hasOwnProperty.call(json, "currency_type") && (this.currency_type = json.currency_type!);
            _hasOwnProperty.call(json, "bank_code") && (this.bank_code = json.bank_code!);
            _hasOwnProperty.call(json, "trans_direction") && (this.trans_direction = json.trans_direction!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TBankResultItem();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TBankResultItem._readFrom(is);
        }
    }

    export namespace TBankResultItem {
        export interface Object {
            busi_list_id?: string;
            order_state?: number;
            busi_timestamp?: number;
            balance?: string;
            currency_type?: number;
            bank_code?: number;
            trans_direction?: number;
        }
    }

    export class TDoQueryBankCardBalanceRsp {
        msg_no: string = "";
        err_msg: string = "";
        err_code: number = 0;
        bank_ret_item: JV.TBankResultItem = new JV.TBankResultItem;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TDoQueryBankCardBalanceRsp";
        protected static _classname = "JV.TDoQueryBankCardBalanceRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TDoQueryBankCardBalanceRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.err_msg = is.readString(1, false, "");
            tmp.err_code = is.readInt32(2, false, 0);
            tmp.bank_ret_item = is.readStruct(3, false, JV.TBankResultItem);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.err_msg);
            os.writeInt32(2, this.err_code);
            os.writeStruct(3, this.bank_ret_item);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TDoQueryBankCardBalanceRsp.Object { 
            return {
                msg_no: this.msg_no,
                err_msg: this.err_msg,
                err_code: this.err_code,
                bank_ret_item: this.bank_ret_item.toObject()
            };
        }

        readFromObject(json: TDoQueryBankCardBalanceRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            _hasOwnProperty.call(json, "bank_ret_item") && (this.bank_ret_item.readFromObject(json.bank_ret_item!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TDoQueryBankCardBalanceRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TDoQueryBankCardBalanceRsp._readFrom(is);
        }
    }

    export namespace TDoQueryBankCardBalanceRsp {
        export interface Object {
            msg_no?: string;
            err_msg?: string;
            err_code?: number;
            bank_ret_item?: JV.TBankResultItem.Object;
        }
    }

    export class TFrozenUserCapitalReq {
        uid: string = "";
        client_id: string = "";
        account_id: string = "";
        amount: string = "";
        frozen_id: string = "";
        req_date: string = "";
        biz_date: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TFrozenUserCapitalReq";
        protected static _classname = "JV.TFrozenUserCapitalReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TFrozenUserCapitalReq;
            tmp.uid = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.amount = is.readString(3, false, "");
            tmp.frozen_id = is.readString(4, false, "");
            tmp.req_date = is.readString(5, false, "");
            tmp.biz_date = is.readString(6, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.client_id);
            os.writeString(2, this.account_id);
            os.writeString(3, this.amount);
            os.writeString(4, this.frozen_id);
            os.writeString(5, this.req_date);
            os.writeString(6, this.biz_date);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TFrozenUserCapitalReq.Object { 
            return {
                uid: this.uid,
                client_id: this.client_id,
                account_id: this.account_id,
                amount: this.amount,
                frozen_id: this.frozen_id,
                req_date: this.req_date,
                biz_date: this.biz_date
            };
        }

        readFromObject(json: TFrozenUserCapitalReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "amount") && (this.amount = json.amount!);
            _hasOwnProperty.call(json, "frozen_id") && (this.frozen_id = json.frozen_id!);
            _hasOwnProperty.call(json, "req_date") && (this.req_date = json.req_date!);
            _hasOwnProperty.call(json, "biz_date") && (this.biz_date = json.biz_date!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TFrozenUserCapitalReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TFrozenUserCapitalReq._readFrom(is);
        }
    }

    export namespace TFrozenUserCapitalReq {
        export interface Object {
            uid?: string;
            client_id?: string;
            account_id?: string;
            amount?: string;
            frozen_id?: string;
            req_date?: string;
            biz_date?: string;
        }
    }

    export class TFrozenUserCapitalRsp {
        err_msg: string = "";
        err_code: number = 0;
        frozen_id: string = "";
        frozen_busi_list_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TFrozenUserCapitalRsp";
        protected static _classname = "JV.TFrozenUserCapitalRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TFrozenUserCapitalRsp;
            tmp.err_msg = is.readString(0, false, "");
            tmp.err_code = is.readInt32(1, false, 0);
            tmp.frozen_id = is.readString(3, false, "");
            tmp.frozen_busi_list_id = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.err_msg);
            os.writeInt32(1, this.err_code);
            os.writeString(3, this.frozen_id);
            os.writeString(4, this.frozen_busi_list_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TFrozenUserCapitalRsp.Object { 
            return {
                err_msg: this.err_msg,
                err_code: this.err_code,
                frozen_id: this.frozen_id,
                frozen_busi_list_id: this.frozen_busi_list_id
            };
        }

        readFromObject(json: TFrozenUserCapitalRsp.Object) { 
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            _hasOwnProperty.call(json, "frozen_id") && (this.frozen_id = json.frozen_id!);
            _hasOwnProperty.call(json, "frozen_busi_list_id") && (this.frozen_busi_list_id = json.frozen_busi_list_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TFrozenUserCapitalRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TFrozenUserCapitalRsp._readFrom(is);
        }
    }

    export namespace TFrozenUserCapitalRsp {
        export interface Object {
            err_msg?: string;
            err_code?: number;
            frozen_id?: string;
            frozen_busi_list_id?: string;
        }
    }

    export class TUnfrozenUserCapitalReq {
        uid: string = "";
        client_id: string = "";
        account_id: string = "";
        amount: string = "";
        unfrozen_id: string = "";
        req_date: string = "";
        biz_date: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TUnfrozenUserCapitalReq";
        protected static _classname = "JV.TUnfrozenUserCapitalReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TUnfrozenUserCapitalReq;
            tmp.uid = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.amount = is.readString(3, false, "");
            tmp.unfrozen_id = is.readString(4, false, "");
            tmp.req_date = is.readString(5, false, "");
            tmp.biz_date = is.readString(6, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.client_id);
            os.writeString(2, this.account_id);
            os.writeString(3, this.amount);
            os.writeString(4, this.unfrozen_id);
            os.writeString(5, this.req_date);
            os.writeString(6, this.biz_date);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TUnfrozenUserCapitalReq.Object { 
            return {
                uid: this.uid,
                client_id: this.client_id,
                account_id: this.account_id,
                amount: this.amount,
                unfrozen_id: this.unfrozen_id,
                req_date: this.req_date,
                biz_date: this.biz_date
            };
        }

        readFromObject(json: TUnfrozenUserCapitalReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "amount") && (this.amount = json.amount!);
            _hasOwnProperty.call(json, "unfrozen_id") && (this.unfrozen_id = json.unfrozen_id!);
            _hasOwnProperty.call(json, "req_date") && (this.req_date = json.req_date!);
            _hasOwnProperty.call(json, "biz_date") && (this.biz_date = json.biz_date!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TUnfrozenUserCapitalReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TUnfrozenUserCapitalReq._readFrom(is);
        }
    }

    export namespace TUnfrozenUserCapitalReq {
        export interface Object {
            uid?: string;
            client_id?: string;
            account_id?: string;
            amount?: string;
            unfrozen_id?: string;
            req_date?: string;
            biz_date?: string;
        }
    }

    export class TUnfrozenUserCapitalRsp {
        err_msg: string = "";
        err_code: number = 0;
        unfrozen_id: string = "";
        unfrozen_busi_list_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TUnfrozenUserCapitalRsp";
        protected static _classname = "JV.TUnfrozenUserCapitalRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TUnfrozenUserCapitalRsp;
            tmp.err_msg = is.readString(0, false, "");
            tmp.err_code = is.readInt32(1, false, 0);
            tmp.unfrozen_id = is.readString(3, false, "");
            tmp.unfrozen_busi_list_id = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.err_msg);
            os.writeInt32(1, this.err_code);
            os.writeString(3, this.unfrozen_id);
            os.writeString(4, this.unfrozen_busi_list_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TUnfrozenUserCapitalRsp.Object { 
            return {
                err_msg: this.err_msg,
                err_code: this.err_code,
                unfrozen_id: this.unfrozen_id,
                unfrozen_busi_list_id: this.unfrozen_busi_list_id
            };
        }

        readFromObject(json: TUnfrozenUserCapitalRsp.Object) { 
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            _hasOwnProperty.call(json, "unfrozen_id") && (this.unfrozen_id = json.unfrozen_id!);
            _hasOwnProperty.call(json, "unfrozen_busi_list_id") && (this.unfrozen_busi_list_id = json.unfrozen_busi_list_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TUnfrozenUserCapitalRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TUnfrozenUserCapitalRsp._readFrom(is);
        }
    }

    export namespace TUnfrozenUserCapitalRsp {
        export interface Object {
            err_msg?: string;
            err_code?: number;
            unfrozen_id?: string;
            unfrozen_busi_list_id?: string;
        }
    }

    export class TFrozenUserCapitalWithPwdReq {
        uid: string = "";
        client_id: string = "";
        account_id: string = "";
        user_pwd: string = "";
        amount: string = "";
        frozen_id: string = "";
        req_date: string = "";
        biz_date: string = "";
        broker_id: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TFrozenUserCapitalWithPwdReq";
        protected static _classname = "JV.TFrozenUserCapitalWithPwdReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TFrozenUserCapitalWithPwdReq;
            tmp.uid = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.user_pwd = is.readString(3, false, "");
            tmp.amount = is.readString(4, false, "");
            tmp.frozen_id = is.readString(5, false, "");
            tmp.req_date = is.readString(6, false, "");
            tmp.biz_date = is.readString(7, false, "");
            tmp.broker_id = is.readInt32(8, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.client_id);
            os.writeString(2, this.account_id);
            os.writeString(3, this.user_pwd);
            os.writeString(4, this.amount);
            os.writeString(5, this.frozen_id);
            os.writeString(6, this.req_date);
            os.writeString(7, this.biz_date);
            os.writeInt32(8, this.broker_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TFrozenUserCapitalWithPwdReq.Object { 
            return {
                uid: this.uid,
                client_id: this.client_id,
                account_id: this.account_id,
                user_pwd: this.user_pwd,
                amount: this.amount,
                frozen_id: this.frozen_id,
                req_date: this.req_date,
                biz_date: this.biz_date,
                broker_id: this.broker_id
            };
        }

        readFromObject(json: TFrozenUserCapitalWithPwdReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "user_pwd") && (this.user_pwd = json.user_pwd!);
            _hasOwnProperty.call(json, "amount") && (this.amount = json.amount!);
            _hasOwnProperty.call(json, "frozen_id") && (this.frozen_id = json.frozen_id!);
            _hasOwnProperty.call(json, "req_date") && (this.req_date = json.req_date!);
            _hasOwnProperty.call(json, "biz_date") && (this.biz_date = json.biz_date!);
            _hasOwnProperty.call(json, "broker_id") && (this.broker_id = json.broker_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TFrozenUserCapitalWithPwdReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TFrozenUserCapitalWithPwdReq._readFrom(is);
        }
    }

    export namespace TFrozenUserCapitalWithPwdReq {
        export interface Object {
            uid?: string;
            client_id?: string;
            account_id?: string;
            user_pwd?: string;
            amount?: string;
            frozen_id?: string;
            req_date?: string;
            biz_date?: string;
            broker_id?: number;
        }
    }

    export class TFrozenUserCapitalWithPwdRsp {
        err_msg: string = "";
        err_code: number = 0;
        frozen_id: string = "";
        frozen_busi_list_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TFrozenUserCapitalWithPwdRsp";
        protected static _classname = "JV.TFrozenUserCapitalWithPwdRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TFrozenUserCapitalWithPwdRsp;
            tmp.err_msg = is.readString(0, false, "");
            tmp.err_code = is.readInt32(1, false, 0);
            tmp.frozen_id = is.readString(3, false, "");
            tmp.frozen_busi_list_id = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.err_msg);
            os.writeInt32(1, this.err_code);
            os.writeString(3, this.frozen_id);
            os.writeString(4, this.frozen_busi_list_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TFrozenUserCapitalWithPwdRsp.Object { 
            return {
                err_msg: this.err_msg,
                err_code: this.err_code,
                frozen_id: this.frozen_id,
                frozen_busi_list_id: this.frozen_busi_list_id
            };
        }

        readFromObject(json: TFrozenUserCapitalWithPwdRsp.Object) { 
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            _hasOwnProperty.call(json, "frozen_id") && (this.frozen_id = json.frozen_id!);
            _hasOwnProperty.call(json, "frozen_busi_list_id") && (this.frozen_busi_list_id = json.frozen_busi_list_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TFrozenUserCapitalWithPwdRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TFrozenUserCapitalWithPwdRsp._readFrom(is);
        }
    }

    export namespace TFrozenUserCapitalWithPwdRsp {
        export interface Object {
            err_msg?: string;
            err_code?: number;
            frozen_id?: string;
            frozen_busi_list_id?: string;
        }
    }

    export class TUnfrozenUserCapitalWithPwdReq {
        uid: string = "";
        client_id: string = "";
        account_id: string = "";
        user_pwd: string = "";
        amount: string = "";
        unfrozen_id: string = "";
        req_date: string = "";
        biz_date: string = "";
        broker_id: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TUnfrozenUserCapitalWithPwdReq";
        protected static _classname = "JV.TUnfrozenUserCapitalWithPwdReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TUnfrozenUserCapitalWithPwdReq;
            tmp.uid = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.user_pwd = is.readString(3, false, "");
            tmp.amount = is.readString(4, false, "");
            tmp.unfrozen_id = is.readString(5, false, "");
            tmp.req_date = is.readString(6, false, "");
            tmp.biz_date = is.readString(7, false, "");
            tmp.broker_id = is.readInt32(8, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.client_id);
            os.writeString(2, this.account_id);
            os.writeString(3, this.user_pwd);
            os.writeString(4, this.amount);
            os.writeString(5, this.unfrozen_id);
            os.writeString(6, this.req_date);
            os.writeString(7, this.biz_date);
            os.writeInt32(8, this.broker_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TUnfrozenUserCapitalWithPwdReq.Object { 
            return {
                uid: this.uid,
                client_id: this.client_id,
                account_id: this.account_id,
                user_pwd: this.user_pwd,
                amount: this.amount,
                unfrozen_id: this.unfrozen_id,
                req_date: this.req_date,
                biz_date: this.biz_date,
                broker_id: this.broker_id
            };
        }

        readFromObject(json: TUnfrozenUserCapitalWithPwdReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "user_pwd") && (this.user_pwd = json.user_pwd!);
            _hasOwnProperty.call(json, "amount") && (this.amount = json.amount!);
            _hasOwnProperty.call(json, "unfrozen_id") && (this.unfrozen_id = json.unfrozen_id!);
            _hasOwnProperty.call(json, "req_date") && (this.req_date = json.req_date!);
            _hasOwnProperty.call(json, "biz_date") && (this.biz_date = json.biz_date!);
            _hasOwnProperty.call(json, "broker_id") && (this.broker_id = json.broker_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TUnfrozenUserCapitalWithPwdReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TUnfrozenUserCapitalWithPwdReq._readFrom(is);
        }
    }

    export namespace TUnfrozenUserCapitalWithPwdReq {
        export interface Object {
            uid?: string;
            client_id?: string;
            account_id?: string;
            user_pwd?: string;
            amount?: string;
            unfrozen_id?: string;
            req_date?: string;
            biz_date?: string;
            broker_id?: number;
        }
    }

    export class TUnfrozenUserCapitalWithPwdRsp {
        err_msg: string = "";
        err_code: number = 0;
        unfrozen_id: string = "";
        unfrozen_busi_list_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TUnfrozenUserCapitalWithPwdRsp";
        protected static _classname = "JV.TUnfrozenUserCapitalWithPwdRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TUnfrozenUserCapitalWithPwdRsp;
            tmp.err_msg = is.readString(0, false, "");
            tmp.err_code = is.readInt32(1, false, 0);
            tmp.unfrozen_id = is.readString(3, false, "");
            tmp.unfrozen_busi_list_id = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.err_msg);
            os.writeInt32(1, this.err_code);
            os.writeString(3, this.unfrozen_id);
            os.writeString(4, this.unfrozen_busi_list_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TUnfrozenUserCapitalWithPwdRsp.Object { 
            return {
                err_msg: this.err_msg,
                err_code: this.err_code,
                unfrozen_id: this.unfrozen_id,
                unfrozen_busi_list_id: this.unfrozen_busi_list_id
            };
        }

        readFromObject(json: TUnfrozenUserCapitalWithPwdRsp.Object) { 
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            _hasOwnProperty.call(json, "unfrozen_id") && (this.unfrozen_id = json.unfrozen_id!);
            _hasOwnProperty.call(json, "unfrozen_busi_list_id") && (this.unfrozen_busi_list_id = json.unfrozen_busi_list_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TUnfrozenUserCapitalWithPwdRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TUnfrozenUserCapitalWithPwdRsp._readFrom(is);
        }
    }

    export namespace TUnfrozenUserCapitalWithPwdRsp {
        export interface Object {
            err_msg?: string;
            err_code?: number;
            unfrozen_id?: string;
            unfrozen_busi_list_id?: string;
        }
    }

    export class TcancelUserFrozenOprationReq {
        uid: string = "";
        client_id: string = "";
        account_id: string = "";
        trd_amt: string = "";
        cancel_op_id: string = "";
        ori_funfrozen_id: string = "";
        req_date: string = "";
        biz_date: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TcancelUserFrozenOprationReq";
        protected static _classname = "JV.TcancelUserFrozenOprationReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TcancelUserFrozenOprationReq;
            tmp.uid = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.trd_amt = is.readString(3, false, "");
            tmp.cancel_op_id = is.readString(4, false, "");
            tmp.ori_funfrozen_id = is.readString(5, false, "");
            tmp.req_date = is.readString(6, false, "");
            tmp.biz_date = is.readString(7, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.client_id);
            os.writeString(2, this.account_id);
            os.writeString(3, this.trd_amt);
            os.writeString(4, this.cancel_op_id);
            os.writeString(5, this.ori_funfrozen_id);
            os.writeString(6, this.req_date);
            os.writeString(7, this.biz_date);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TcancelUserFrozenOprationReq.Object { 
            return {
                uid: this.uid,
                client_id: this.client_id,
                account_id: this.account_id,
                trd_amt: this.trd_amt,
                cancel_op_id: this.cancel_op_id,
                ori_funfrozen_id: this.ori_funfrozen_id,
                req_date: this.req_date,
                biz_date: this.biz_date
            };
        }

        readFromObject(json: TcancelUserFrozenOprationReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "trd_amt") && (this.trd_amt = json.trd_amt!);
            _hasOwnProperty.call(json, "cancel_op_id") && (this.cancel_op_id = json.cancel_op_id!);
            _hasOwnProperty.call(json, "ori_funfrozen_id") && (this.ori_funfrozen_id = json.ori_funfrozen_id!);
            _hasOwnProperty.call(json, "req_date") && (this.req_date = json.req_date!);
            _hasOwnProperty.call(json, "biz_date") && (this.biz_date = json.biz_date!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TcancelUserFrozenOprationReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TcancelUserFrozenOprationReq._readFrom(is);
        }
    }

    export namespace TcancelUserFrozenOprationReq {
        export interface Object {
            uid?: string;
            client_id?: string;
            account_id?: string;
            trd_amt?: string;
            cancel_op_id?: string;
            ori_funfrozen_id?: string;
            req_date?: string;
            biz_date?: string;
        }
    }

    export class TcancelUserFrozenOprationRsp {
        err_msg: string = "";
        err_code: number = 0;
        cancel_op_id: string = "";
        ori_funfrozen_id: string = "";
        funfrozen_busi_list_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TcancelUserFrozenOprationRsp";
        protected static _classname = "JV.TcancelUserFrozenOprationRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TcancelUserFrozenOprationRsp;
            tmp.err_msg = is.readString(0, false, "");
            tmp.err_code = is.readInt32(1, false, 0);
            tmp.cancel_op_id = is.readString(2, false, "");
            tmp.ori_funfrozen_id = is.readString(3, false, "");
            tmp.funfrozen_busi_list_id = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.err_msg);
            os.writeInt32(1, this.err_code);
            os.writeString(2, this.cancel_op_id);
            os.writeString(3, this.ori_funfrozen_id);
            os.writeString(4, this.funfrozen_busi_list_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TcancelUserFrozenOprationRsp.Object { 
            return {
                err_msg: this.err_msg,
                err_code: this.err_code,
                cancel_op_id: this.cancel_op_id,
                ori_funfrozen_id: this.ori_funfrozen_id,
                funfrozen_busi_list_id: this.funfrozen_busi_list_id
            };
        }

        readFromObject(json: TcancelUserFrozenOprationRsp.Object) { 
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            _hasOwnProperty.call(json, "cancel_op_id") && (this.cancel_op_id = json.cancel_op_id!);
            _hasOwnProperty.call(json, "ori_funfrozen_id") && (this.ori_funfrozen_id = json.ori_funfrozen_id!);
            _hasOwnProperty.call(json, "funfrozen_busi_list_id") && (this.funfrozen_busi_list_id = json.funfrozen_busi_list_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TcancelUserFrozenOprationRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TcancelUserFrozenOprationRsp._readFrom(is);
        }
    }

    export namespace TcancelUserFrozenOprationRsp {
        export interface Object {
            err_msg?: string;
            err_code?: number;
            cancel_op_id?: string;
            ori_funfrozen_id?: string;
            funfrozen_busi_list_id?: string;
        }
    }

    export class TQueryUserCapitalOprationStatusReq {
        uid: string = "";
        client_id: string = "";
        capital_op_id: string = "";
        biz_date: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryUserCapitalOprationStatusReq";
        protected static _classname = "JV.TQueryUserCapitalOprationStatusReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryUserCapitalOprationStatusReq;
            tmp.uid = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.capital_op_id = is.readString(2, false, "");
            tmp.biz_date = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.client_id);
            os.writeString(2, this.capital_op_id);
            os.writeString(3, this.biz_date);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryUserCapitalOprationStatusReq.Object { 
            return {
                uid: this.uid,
                client_id: this.client_id,
                capital_op_id: this.capital_op_id,
                biz_date: this.biz_date
            };
        }

        readFromObject(json: TQueryUserCapitalOprationStatusReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "capital_op_id") && (this.capital_op_id = json.capital_op_id!);
            _hasOwnProperty.call(json, "biz_date") && (this.biz_date = json.biz_date!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryUserCapitalOprationStatusReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryUserCapitalOprationStatusReq._readFrom(is);
        }
    }

    export namespace TQueryUserCapitalOprationStatusReq {
        export interface Object {
            uid?: string;
            client_id?: string;
            capital_op_id?: string;
            biz_date?: string;
        }
    }

    export class TQueryUserCapitalOprationStatusRsp {
        err_msg: string = "";
        err_code: number = 0;
        capital_op_id: string = "";
        biz_date: string = "";
        req_date: string = "";
        client_id: string = "";
        account_id: string = "";
        trd_id: string = "";
        flag: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryUserCapitalOprationStatusRsp";
        protected static _classname = "JV.TQueryUserCapitalOprationStatusRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryUserCapitalOprationStatusRsp;
            tmp.err_msg = is.readString(0, false, "");
            tmp.err_code = is.readInt32(1, false, 0);
            tmp.capital_op_id = is.readString(2, false, "");
            tmp.biz_date = is.readString(3, false, "");
            tmp.req_date = is.readString(4, false, "");
            tmp.client_id = is.readString(5, false, "");
            tmp.account_id = is.readString(6, false, "");
            tmp.trd_id = is.readString(7, false, "");
            tmp.flag = is.readString(8, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.err_msg);
            os.writeInt32(1, this.err_code);
            os.writeString(2, this.capital_op_id);
            os.writeString(3, this.biz_date);
            os.writeString(4, this.req_date);
            os.writeString(5, this.client_id);
            os.writeString(6, this.account_id);
            os.writeString(7, this.trd_id);
            os.writeString(8, this.flag);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryUserCapitalOprationStatusRsp.Object { 
            return {
                err_msg: this.err_msg,
                err_code: this.err_code,
                capital_op_id: this.capital_op_id,
                biz_date: this.biz_date,
                req_date: this.req_date,
                client_id: this.client_id,
                account_id: this.account_id,
                trd_id: this.trd_id,
                flag: this.flag
            };
        }

        readFromObject(json: TQueryUserCapitalOprationStatusRsp.Object) { 
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            _hasOwnProperty.call(json, "capital_op_id") && (this.capital_op_id = json.capital_op_id!);
            _hasOwnProperty.call(json, "biz_date") && (this.biz_date = json.biz_date!);
            _hasOwnProperty.call(json, "req_date") && (this.req_date = json.req_date!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "trd_id") && (this.trd_id = json.trd_id!);
            _hasOwnProperty.call(json, "flag") && (this.flag = json.flag!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryUserCapitalOprationStatusRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryUserCapitalOprationStatusRsp._readFrom(is);
        }
    }

    export namespace TQueryUserCapitalOprationStatusRsp {
        export interface Object {
            err_msg?: string;
            err_code?: number;
            capital_op_id?: string;
            biz_date?: string;
            req_date?: string;
            client_id?: string;
            account_id?: string;
            trd_id?: string;
            flag?: string;
        }
    }

    export class TPOpenCapiAcctReq {
        uid: string = "";
        msg_no: string = "";
        id_type: number = 0;
        id_code: string = "";
        id_name: string = "";
        id_addr: string = "";
        id_validity_begin: string = "";
        id_validity_end: string = "";
        ethnicity: string = "";
        id_issuing_authority: string = "";
        citizenship: string = "";
        gender: number = 0;
        tel_no: string = "";
        birth_date: string = "";
        education: number = 0;
        occu_type: number = 0;
        occu_options: string = "";
        zip_code: string = "";
        address: string = "";
        income: number = 0;
        email: string = "";
        id_img_front: string = "";
        id_img_back: string = "";
        id_img_3: string = "";
        id_img_4: string = "";
        company: string = "";
        job_title: number = 0;
        credit_record: string = "";
        credit_record_options: string = "";
        actual_controller: number = 0;
        actual_receiptor: number = 0;
        tax_type: number = 0;
        tcc: string = "";
        trade_pwd: string = "";
        capital_pwd: string = "";
        job_options: string = "";
        risk_version: string = "";
        risk_answer: string = "";
        branch: string = "";
        industry_type: string = "";
        resurvey_version: string = "";
        resurvey_answer: string = "";
        resurvey_time: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenCapiAcctReq";
        protected static _classname = "JV.TPOpenCapiAcctReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenCapiAcctReq;
            tmp.uid = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.id_type = is.readInt32(2, false, 0);
            tmp.id_code = is.readString(3, false, "");
            tmp.id_name = is.readString(4, false, "");
            tmp.id_addr = is.readString(5, false, "");
            tmp.id_validity_begin = is.readString(6, false, "");
            tmp.id_validity_end = is.readString(7, false, "");
            tmp.ethnicity = is.readString(8, false, "");
            tmp.id_issuing_authority = is.readString(9, false, "");
            tmp.citizenship = is.readString(10, false, "");
            tmp.gender = is.readInt32(11, false, 0);
            tmp.tel_no = is.readString(12, false, "");
            tmp.birth_date = is.readString(13, false, "");
            tmp.education = is.readInt32(14, false, 0);
            tmp.occu_type = is.readInt32(15, false, 0);
            tmp.occu_options = is.readString(16, false, "");
            tmp.zip_code = is.readString(17, false, "");
            tmp.address = is.readString(18, false, "");
            tmp.income = is.readInt32(19, false, 0);
            tmp.email = is.readString(20, false, "");
            tmp.id_img_front = is.readString(21, false, "");
            tmp.id_img_back = is.readString(22, false, "");
            tmp.id_img_3 = is.readString(23, false, "");
            tmp.id_img_4 = is.readString(24, false, "");
            tmp.company = is.readString(25, false, "");
            tmp.job_title = is.readInt32(26, false, 0);
            tmp.credit_record = is.readString(27, false, "");
            tmp.credit_record_options = is.readString(28, false, "");
            tmp.actual_controller = is.readInt32(29, false, 0);
            tmp.actual_receiptor = is.readInt32(30, false, 0);
            tmp.tax_type = is.readInt32(31, false, 0);
            tmp.tcc = is.readString(32, false, "");
            tmp.trade_pwd = is.readString(33, false, "");
            tmp.capital_pwd = is.readString(34, false, "");
            tmp.job_options = is.readString(35, false, "");
            tmp.risk_version = is.readString(36, false, "");
            tmp.risk_answer = is.readString(37, false, "");
            tmp.branch = is.readString(38, false, "");
            tmp.industry_type = is.readString(39, false, "");
            tmp.resurvey_version = is.readString(40, false, "");
            tmp.resurvey_answer = is.readString(41, false, "");
            tmp.resurvey_time = is.readString(42, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.msg_no);
            os.writeInt32(2, this.id_type);
            os.writeString(3, this.id_code);
            os.writeString(4, this.id_name);
            os.writeString(5, this.id_addr);
            os.writeString(6, this.id_validity_begin);
            os.writeString(7, this.id_validity_end);
            os.writeString(8, this.ethnicity);
            os.writeString(9, this.id_issuing_authority);
            os.writeString(10, this.citizenship);
            os.writeInt32(11, this.gender);
            os.writeString(12, this.tel_no);
            os.writeString(13, this.birth_date);
            os.writeInt32(14, this.education);
            os.writeInt32(15, this.occu_type);
            os.writeString(16, this.occu_options);
            os.writeString(17, this.zip_code);
            os.writeString(18, this.address);
            os.writeInt32(19, this.income);
            os.writeString(20, this.email);
            os.writeString(21, this.id_img_front);
            os.writeString(22, this.id_img_back);
            os.writeString(23, this.id_img_3);
            os.writeString(24, this.id_img_4);
            os.writeString(25, this.company);
            os.writeInt32(26, this.job_title);
            os.writeString(27, this.credit_record);
            os.writeString(28, this.credit_record_options);
            os.writeInt32(29, this.actual_controller);
            os.writeInt32(30, this.actual_receiptor);
            os.writeInt32(31, this.tax_type);
            os.writeString(32, this.tcc);
            os.writeString(33, this.trade_pwd);
            os.writeString(34, this.capital_pwd);
            os.writeString(35, this.job_options);
            os.writeString(36, this.risk_version);
            os.writeString(37, this.risk_answer);
            os.writeString(38, this.branch);
            os.writeString(39, this.industry_type);
            os.writeString(40, this.resurvey_version);
            os.writeString(41, this.resurvey_answer);
            os.writeString(42, this.resurvey_time);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenCapiAcctReq.Object { 
            return {
                uid: this.uid,
                msg_no: this.msg_no,
                id_type: this.id_type,
                id_code: this.id_code,
                id_name: this.id_name,
                id_addr: this.id_addr,
                id_validity_begin: this.id_validity_begin,
                id_validity_end: this.id_validity_end,
                ethnicity: this.ethnicity,
                id_issuing_authority: this.id_issuing_authority,
                citizenship: this.citizenship,
                gender: this.gender,
                tel_no: this.tel_no,
                birth_date: this.birth_date,
                education: this.education,
                occu_type: this.occu_type,
                occu_options: this.occu_options,
                zip_code: this.zip_code,
                address: this.address,
                income: this.income,
                email: this.email,
                id_img_front: this.id_img_front,
                id_img_back: this.id_img_back,
                id_img_3: this.id_img_3,
                id_img_4: this.id_img_4,
                company: this.company,
                job_title: this.job_title,
                credit_record: this.credit_record,
                credit_record_options: this.credit_record_options,
                actual_controller: this.actual_controller,
                actual_receiptor: this.actual_receiptor,
                tax_type: this.tax_type,
                tcc: this.tcc,
                trade_pwd: this.trade_pwd,
                capital_pwd: this.capital_pwd,
                job_options: this.job_options,
                risk_version: this.risk_version,
                risk_answer: this.risk_answer,
                branch: this.branch,
                industry_type: this.industry_type,
                resurvey_version: this.resurvey_version,
                resurvey_answer: this.resurvey_answer,
                resurvey_time: this.resurvey_time
            };
        }

        readFromObject(json: TPOpenCapiAcctReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type!);
            _hasOwnProperty.call(json, "id_code") && (this.id_code = json.id_code!);
            _hasOwnProperty.call(json, "id_name") && (this.id_name = json.id_name!);
            _hasOwnProperty.call(json, "id_addr") && (this.id_addr = json.id_addr!);
            _hasOwnProperty.call(json, "id_validity_begin") && (this.id_validity_begin = json.id_validity_begin!);
            _hasOwnProperty.call(json, "id_validity_end") && (this.id_validity_end = json.id_validity_end!);
            _hasOwnProperty.call(json, "ethnicity") && (this.ethnicity = json.ethnicity!);
            _hasOwnProperty.call(json, "id_issuing_authority") && (this.id_issuing_authority = json.id_issuing_authority!);
            _hasOwnProperty.call(json, "citizenship") && (this.citizenship = json.citizenship!);
            _hasOwnProperty.call(json, "gender") && (this.gender = json.gender!);
            _hasOwnProperty.call(json, "tel_no") && (this.tel_no = json.tel_no!);
            _hasOwnProperty.call(json, "birth_date") && (this.birth_date = json.birth_date!);
            _hasOwnProperty.call(json, "education") && (this.education = json.education!);
            _hasOwnProperty.call(json, "occu_type") && (this.occu_type = json.occu_type!);
            _hasOwnProperty.call(json, "occu_options") && (this.occu_options = json.occu_options!);
            _hasOwnProperty.call(json, "zip_code") && (this.zip_code = json.zip_code!);
            _hasOwnProperty.call(json, "address") && (this.address = json.address!);
            _hasOwnProperty.call(json, "income") && (this.income = json.income!);
            _hasOwnProperty.call(json, "email") && (this.email = json.email!);
            _hasOwnProperty.call(json, "id_img_front") && (this.id_img_front = json.id_img_front!);
            _hasOwnProperty.call(json, "id_img_back") && (this.id_img_back = json.id_img_back!);
            _hasOwnProperty.call(json, "id_img_3") && (this.id_img_3 = json.id_img_3!);
            _hasOwnProperty.call(json, "id_img_4") && (this.id_img_4 = json.id_img_4!);
            _hasOwnProperty.call(json, "company") && (this.company = json.company!);
            _hasOwnProperty.call(json, "job_title") && (this.job_title = json.job_title!);
            _hasOwnProperty.call(json, "credit_record") && (this.credit_record = json.credit_record!);
            _hasOwnProperty.call(json, "credit_record_options") && (this.credit_record_options = json.credit_record_options!);
            _hasOwnProperty.call(json, "actual_controller") && (this.actual_controller = json.actual_controller!);
            _hasOwnProperty.call(json, "actual_receiptor") && (this.actual_receiptor = json.actual_receiptor!);
            _hasOwnProperty.call(json, "tax_type") && (this.tax_type = json.tax_type!);
            _hasOwnProperty.call(json, "tcc") && (this.tcc = json.tcc!);
            _hasOwnProperty.call(json, "trade_pwd") && (this.trade_pwd = json.trade_pwd!);
            _hasOwnProperty.call(json, "capital_pwd") && (this.capital_pwd = json.capital_pwd!);
            _hasOwnProperty.call(json, "job_options") && (this.job_options = json.job_options!);
            _hasOwnProperty.call(json, "risk_version") && (this.risk_version = json.risk_version!);
            _hasOwnProperty.call(json, "risk_answer") && (this.risk_answer = json.risk_answer!);
            _hasOwnProperty.call(json, "branch") && (this.branch = json.branch!);
            _hasOwnProperty.call(json, "industry_type") && (this.industry_type = json.industry_type!);
            _hasOwnProperty.call(json, "resurvey_version") && (this.resurvey_version = json.resurvey_version!);
            _hasOwnProperty.call(json, "resurvey_answer") && (this.resurvey_answer = json.resurvey_answer!);
            _hasOwnProperty.call(json, "resurvey_time") && (this.resurvey_time = json.resurvey_time!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenCapiAcctReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenCapiAcctReq._readFrom(is);
        }
    }

    export namespace TPOpenCapiAcctReq {
        export interface Object {
            uid?: string;
            msg_no?: string;
            id_type?: number;
            id_code?: string;
            id_name?: string;
            id_addr?: string;
            id_validity_begin?: string;
            id_validity_end?: string;
            ethnicity?: string;
            id_issuing_authority?: string;
            citizenship?: string;
            gender?: number;
            tel_no?: string;
            birth_date?: string;
            education?: number;
            occu_type?: number;
            occu_options?: string;
            zip_code?: string;
            address?: string;
            income?: number;
            email?: string;
            id_img_front?: string;
            id_img_back?: string;
            id_img_3?: string;
            id_img_4?: string;
            company?: string;
            job_title?: number;
            credit_record?: string;
            credit_record_options?: string;
            actual_controller?: number;
            actual_receiptor?: number;
            tax_type?: number;
            tcc?: string;
            trade_pwd?: string;
            capital_pwd?: string;
            job_options?: string;
            risk_version?: string;
            risk_answer?: string;
            branch?: string;
            industry_type?: string;
            resurvey_version?: string;
            resurvey_answer?: string;
            resurvey_time?: string;
        }
    }

    export class TPOpenCapiAcctRsp {
        original_code: number = 0;
        original_msg: string = "";
        msg_no: string = "";
        account_id: string = "";
        client_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenCapiAcctRsp";
        protected static _classname = "JV.TPOpenCapiAcctRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenCapiAcctRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            tmp.account_id = is.readString(3, false, "");
            tmp.client_id = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.msg_no);
            os.writeString(3, this.account_id);
            os.writeString(4, this.client_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenCapiAcctRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                msg_no: this.msg_no,
                account_id: this.account_id,
                client_id: this.client_id
            };
        }

        readFromObject(json: TPOpenCapiAcctRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenCapiAcctRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenCapiAcctRsp._readFrom(is);
        }
    }

    export namespace TPOpenCapiAcctRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            msg_no?: string;
            account_id?: string;
            client_id?: string;
        }
    }

    export class TPOpenCapiAcctV2Req {
        uid: string = "";
        msg_no: string = "";
        id_type: number = 0;
        id_code: string = "";
        id_name: string = "";
        id_addr: string = "";
        id_validity_begin: string = "";
        id_validity_end: string = "";
        ethnicity: string = "";
        id_issuing_authority: string = "";
        citizenship: string = "";
        gender: number = 0;
        tel_no: string = "";
        birth_date: string = "";
        education: number = 0;
        occu_type: number = 0;
        occu_options: string = "";
        zip_code: string = "";
        address: string = "";
        income: number = 0;
        email: string = "";
        id_img_front: string = "";
        id_img_back: string = "";
        id_img_3: string = "";
        id_img_4: string = "";
        company: string = "";
        job_title: number = 0;
        credit_record: string = "";
        credit_record_options: string = "";
        actual_controller: number = 0;
        actual_receiptor: number = 0;
        tax_type: number = 0;
        tcc: string = "";
        trade_pwd: string = "";
        capital_pwd: string = "";
        job_options: string = "";
        risk_version: string = "";
        risk_answer: string = "";
        branch: string = "";
        industry_type: string = "";
        resurvey_version: string = "";
        resurvey_answer: string = "";
        resurvey_time: string = "";
        serial_no: string = "";
        address_input_type: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenCapiAcctV2Req";
        protected static _classname = "JV.TPOpenCapiAcctV2Req";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenCapiAcctV2Req;
            tmp.uid = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.id_type = is.readInt32(2, false, 0);
            tmp.id_code = is.readString(3, false, "");
            tmp.id_name = is.readString(4, false, "");
            tmp.id_addr = is.readString(5, false, "");
            tmp.id_validity_begin = is.readString(6, false, "");
            tmp.id_validity_end = is.readString(7, false, "");
            tmp.ethnicity = is.readString(8, false, "");
            tmp.id_issuing_authority = is.readString(9, false, "");
            tmp.citizenship = is.readString(10, false, "");
            tmp.gender = is.readInt32(11, false, 0);
            tmp.tel_no = is.readString(12, false, "");
            tmp.birth_date = is.readString(13, false, "");
            tmp.education = is.readInt32(14, false, 0);
            tmp.occu_type = is.readInt32(15, false, 0);
            tmp.occu_options = is.readString(16, false, "");
            tmp.zip_code = is.readString(17, false, "");
            tmp.address = is.readString(18, false, "");
            tmp.income = is.readInt32(19, false, 0);
            tmp.email = is.readString(20, false, "");
            tmp.id_img_front = is.readString(21, false, "");
            tmp.id_img_back = is.readString(22, false, "");
            tmp.id_img_3 = is.readString(23, false, "");
            tmp.id_img_4 = is.readString(24, false, "");
            tmp.company = is.readString(25, false, "");
            tmp.job_title = is.readInt32(26, false, 0);
            tmp.credit_record = is.readString(27, false, "");
            tmp.credit_record_options = is.readString(28, false, "");
            tmp.actual_controller = is.readInt32(29, false, 0);
            tmp.actual_receiptor = is.readInt32(30, false, 0);
            tmp.tax_type = is.readInt32(31, false, 0);
            tmp.tcc = is.readString(32, false, "");
            tmp.trade_pwd = is.readString(33, false, "");
            tmp.capital_pwd = is.readString(34, false, "");
            tmp.job_options = is.readString(35, false, "");
            tmp.risk_version = is.readString(36, false, "");
            tmp.risk_answer = is.readString(37, false, "");
            tmp.branch = is.readString(38, false, "");
            tmp.industry_type = is.readString(39, false, "");
            tmp.resurvey_version = is.readString(40, false, "");
            tmp.resurvey_answer = is.readString(41, false, "");
            tmp.resurvey_time = is.readString(42, false, "");
            tmp.serial_no = is.readString(43, false, "");
            tmp.address_input_type = is.readInt32(44, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.msg_no);
            os.writeInt32(2, this.id_type);
            os.writeString(3, this.id_code);
            os.writeString(4, this.id_name);
            os.writeString(5, this.id_addr);
            os.writeString(6, this.id_validity_begin);
            os.writeString(7, this.id_validity_end);
            os.writeString(8, this.ethnicity);
            os.writeString(9, this.id_issuing_authority);
            os.writeString(10, this.citizenship);
            os.writeInt32(11, this.gender);
            os.writeString(12, this.tel_no);
            os.writeString(13, this.birth_date);
            os.writeInt32(14, this.education);
            os.writeInt32(15, this.occu_type);
            os.writeString(16, this.occu_options);
            os.writeString(17, this.zip_code);
            os.writeString(18, this.address);
            os.writeInt32(19, this.income);
            os.writeString(20, this.email);
            os.writeString(21, this.id_img_front);
            os.writeString(22, this.id_img_back);
            os.writeString(23, this.id_img_3);
            os.writeString(24, this.id_img_4);
            os.writeString(25, this.company);
            os.writeInt32(26, this.job_title);
            os.writeString(27, this.credit_record);
            os.writeString(28, this.credit_record_options);
            os.writeInt32(29, this.actual_controller);
            os.writeInt32(30, this.actual_receiptor);
            os.writeInt32(31, this.tax_type);
            os.writeString(32, this.tcc);
            os.writeString(33, this.trade_pwd);
            os.writeString(34, this.capital_pwd);
            os.writeString(35, this.job_options);
            os.writeString(36, this.risk_version);
            os.writeString(37, this.risk_answer);
            os.writeString(38, this.branch);
            os.writeString(39, this.industry_type);
            os.writeString(40, this.resurvey_version);
            os.writeString(41, this.resurvey_answer);
            os.writeString(42, this.resurvey_time);
            os.writeString(43, this.serial_no);
            os.writeInt32(44, this.address_input_type);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenCapiAcctV2Req.Object { 
            return {
                uid: this.uid,
                msg_no: this.msg_no,
                id_type: this.id_type,
                id_code: this.id_code,
                id_name: this.id_name,
                id_addr: this.id_addr,
                id_validity_begin: this.id_validity_begin,
                id_validity_end: this.id_validity_end,
                ethnicity: this.ethnicity,
                id_issuing_authority: this.id_issuing_authority,
                citizenship: this.citizenship,
                gender: this.gender,
                tel_no: this.tel_no,
                birth_date: this.birth_date,
                education: this.education,
                occu_type: this.occu_type,
                occu_options: this.occu_options,
                zip_code: this.zip_code,
                address: this.address,
                income: this.income,
                email: this.email,
                id_img_front: this.id_img_front,
                id_img_back: this.id_img_back,
                id_img_3: this.id_img_3,
                id_img_4: this.id_img_4,
                company: this.company,
                job_title: this.job_title,
                credit_record: this.credit_record,
                credit_record_options: this.credit_record_options,
                actual_controller: this.actual_controller,
                actual_receiptor: this.actual_receiptor,
                tax_type: this.tax_type,
                tcc: this.tcc,
                trade_pwd: this.trade_pwd,
                capital_pwd: this.capital_pwd,
                job_options: this.job_options,
                risk_version: this.risk_version,
                risk_answer: this.risk_answer,
                branch: this.branch,
                industry_type: this.industry_type,
                resurvey_version: this.resurvey_version,
                resurvey_answer: this.resurvey_answer,
                resurvey_time: this.resurvey_time,
                serial_no: this.serial_no,
                address_input_type: this.address_input_type
            };
        }

        readFromObject(json: TPOpenCapiAcctV2Req.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type!);
            _hasOwnProperty.call(json, "id_code") && (this.id_code = json.id_code!);
            _hasOwnProperty.call(json, "id_name") && (this.id_name = json.id_name!);
            _hasOwnProperty.call(json, "id_addr") && (this.id_addr = json.id_addr!);
            _hasOwnProperty.call(json, "id_validity_begin") && (this.id_validity_begin = json.id_validity_begin!);
            _hasOwnProperty.call(json, "id_validity_end") && (this.id_validity_end = json.id_validity_end!);
            _hasOwnProperty.call(json, "ethnicity") && (this.ethnicity = json.ethnicity!);
            _hasOwnProperty.call(json, "id_issuing_authority") && (this.id_issuing_authority = json.id_issuing_authority!);
            _hasOwnProperty.call(json, "citizenship") && (this.citizenship = json.citizenship!);
            _hasOwnProperty.call(json, "gender") && (this.gender = json.gender!);
            _hasOwnProperty.call(json, "tel_no") && (this.tel_no = json.tel_no!);
            _hasOwnProperty.call(json, "birth_date") && (this.birth_date = json.birth_date!);
            _hasOwnProperty.call(json, "education") && (this.education = json.education!);
            _hasOwnProperty.call(json, "occu_type") && (this.occu_type = json.occu_type!);
            _hasOwnProperty.call(json, "occu_options") && (this.occu_options = json.occu_options!);
            _hasOwnProperty.call(json, "zip_code") && (this.zip_code = json.zip_code!);
            _hasOwnProperty.call(json, "address") && (this.address = json.address!);
            _hasOwnProperty.call(json, "income") && (this.income = json.income!);
            _hasOwnProperty.call(json, "email") && (this.email = json.email!);
            _hasOwnProperty.call(json, "id_img_front") && (this.id_img_front = json.id_img_front!);
            _hasOwnProperty.call(json, "id_img_back") && (this.id_img_back = json.id_img_back!);
            _hasOwnProperty.call(json, "id_img_3") && (this.id_img_3 = json.id_img_3!);
            _hasOwnProperty.call(json, "id_img_4") && (this.id_img_4 = json.id_img_4!);
            _hasOwnProperty.call(json, "company") && (this.company = json.company!);
            _hasOwnProperty.call(json, "job_title") && (this.job_title = json.job_title!);
            _hasOwnProperty.call(json, "credit_record") && (this.credit_record = json.credit_record!);
            _hasOwnProperty.call(json, "credit_record_options") && (this.credit_record_options = json.credit_record_options!);
            _hasOwnProperty.call(json, "actual_controller") && (this.actual_controller = json.actual_controller!);
            _hasOwnProperty.call(json, "actual_receiptor") && (this.actual_receiptor = json.actual_receiptor!);
            _hasOwnProperty.call(json, "tax_type") && (this.tax_type = json.tax_type!);
            _hasOwnProperty.call(json, "tcc") && (this.tcc = json.tcc!);
            _hasOwnProperty.call(json, "trade_pwd") && (this.trade_pwd = json.trade_pwd!);
            _hasOwnProperty.call(json, "capital_pwd") && (this.capital_pwd = json.capital_pwd!);
            _hasOwnProperty.call(json, "job_options") && (this.job_options = json.job_options!);
            _hasOwnProperty.call(json, "risk_version") && (this.risk_version = json.risk_version!);
            _hasOwnProperty.call(json, "risk_answer") && (this.risk_answer = json.risk_answer!);
            _hasOwnProperty.call(json, "branch") && (this.branch = json.branch!);
            _hasOwnProperty.call(json, "industry_type") && (this.industry_type = json.industry_type!);
            _hasOwnProperty.call(json, "resurvey_version") && (this.resurvey_version = json.resurvey_version!);
            _hasOwnProperty.call(json, "resurvey_answer") && (this.resurvey_answer = json.resurvey_answer!);
            _hasOwnProperty.call(json, "resurvey_time") && (this.resurvey_time = json.resurvey_time!);
            _hasOwnProperty.call(json, "serial_no") && (this.serial_no = json.serial_no!);
            _hasOwnProperty.call(json, "address_input_type") && (this.address_input_type = json.address_input_type!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenCapiAcctV2Req();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenCapiAcctV2Req._readFrom(is);
        }
    }

    export namespace TPOpenCapiAcctV2Req {
        export interface Object {
            uid?: string;
            msg_no?: string;
            id_type?: number;
            id_code?: string;
            id_name?: string;
            id_addr?: string;
            id_validity_begin?: string;
            id_validity_end?: string;
            ethnicity?: string;
            id_issuing_authority?: string;
            citizenship?: string;
            gender?: number;
            tel_no?: string;
            birth_date?: string;
            education?: number;
            occu_type?: number;
            occu_options?: string;
            zip_code?: string;
            address?: string;
            income?: number;
            email?: string;
            id_img_front?: string;
            id_img_back?: string;
            id_img_3?: string;
            id_img_4?: string;
            company?: string;
            job_title?: number;
            credit_record?: string;
            credit_record_options?: string;
            actual_controller?: number;
            actual_receiptor?: number;
            tax_type?: number;
            tcc?: string;
            trade_pwd?: string;
            capital_pwd?: string;
            job_options?: string;
            risk_version?: string;
            risk_answer?: string;
            branch?: string;
            industry_type?: string;
            resurvey_version?: string;
            resurvey_answer?: string;
            resurvey_time?: string;
            serial_no?: string;
            address_input_type?: number;
        }
    }

    export class TPOpenCapiAcctV2Rsp {
        original_code: number = 0;
        original_msg: string = "";
        msg_no: string = "";
        account_id: string = "";
        client_id: string = "";
        open_account_state: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenCapiAcctV2Rsp";
        protected static _classname = "JV.TPOpenCapiAcctV2Rsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenCapiAcctV2Rsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            tmp.account_id = is.readString(3, false, "");
            tmp.client_id = is.readString(4, false, "");
            tmp.open_account_state = is.readInt32(5, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.msg_no);
            os.writeString(3, this.account_id);
            os.writeString(4, this.client_id);
            os.writeInt32(5, this.open_account_state);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenCapiAcctV2Rsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                msg_no: this.msg_no,
                account_id: this.account_id,
                client_id: this.client_id,
                open_account_state: this.open_account_state
            };
        }

        readFromObject(json: TPOpenCapiAcctV2Rsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "open_account_state") && (this.open_account_state = json.open_account_state!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenCapiAcctV2Rsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenCapiAcctV2Rsp._readFrom(is);
        }
    }

    export namespace TPOpenCapiAcctV2Rsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            msg_no?: string;
            account_id?: string;
            client_id?: string;
            open_account_state?: number;
        }
    }

    export class TPOpenCapiAndStockAcctReq {
        uid: string = "";
        msg_no: string = "";
        id_type: number = 0;
        id_code: string = "";
        id_name: string = "";
        id_addr: string = "";
        id_validity_begin: string = "";
        id_validity_end: string = "";
        ethnicity: string = "";
        id_issuing_authority: string = "";
        citizenship: string = "";
        gender: number = 0;
        tel_no: string = "";
        birth_date: string = "";
        education: number = 0;
        occu_type: number = 0;
        occu_options: string = "";
        zip_code: string = "";
        address: string = "";
        income: number = 0;
        email: string = "";
        id_img_front: string = "";
        id_img_back: string = "";
        id_video: string = "";
        id_img_4: string = "";
        company: string = "";
        job_title: number = 0;
        credit_record: string = "";
        credit_record_options: string = "";
        actual_controller: number = 0;
        actual_receiptor: number = 0;
        tax_type: number = 0;
        tcc: string = "";
        trade_pwd: string = "";
        capital_pwd: string = "";
        job_options: string = "";
        risk_version: string = "";
        risk_answer: string = "";
        branch: string = "";
        industry_type: string = "";
        resurvey_version: string = "";
        resurvey_answer: string = "";
        resurvey_time: string = "";
        markets: string = "";
        id_zip_code: string = "";
        bank_code: number = 0;
        bank_acct: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenCapiAndStockAcctReq";
        protected static _classname = "JV.TPOpenCapiAndStockAcctReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenCapiAndStockAcctReq;
            tmp.uid = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.id_type = is.readInt32(2, false, 0);
            tmp.id_code = is.readString(3, false, "");
            tmp.id_name = is.readString(4, false, "");
            tmp.id_addr = is.readString(5, false, "");
            tmp.id_validity_begin = is.readString(6, false, "");
            tmp.id_validity_end = is.readString(7, false, "");
            tmp.ethnicity = is.readString(8, false, "");
            tmp.id_issuing_authority = is.readString(9, false, "");
            tmp.citizenship = is.readString(10, false, "");
            tmp.gender = is.readInt32(11, false, 0);
            tmp.tel_no = is.readString(12, false, "");
            tmp.birth_date = is.readString(13, false, "");
            tmp.education = is.readInt32(14, false, 0);
            tmp.occu_type = is.readInt32(15, false, 0);
            tmp.occu_options = is.readString(16, false, "");
            tmp.zip_code = is.readString(17, false, "");
            tmp.address = is.readString(18, false, "");
            tmp.income = is.readInt32(19, false, 0);
            tmp.email = is.readString(20, false, "");
            tmp.id_img_front = is.readString(21, false, "");
            tmp.id_img_back = is.readString(22, false, "");
            tmp.id_video = is.readString(23, false, "");
            tmp.id_img_4 = is.readString(24, false, "");
            tmp.company = is.readString(25, false, "");
            tmp.job_title = is.readInt32(26, false, 0);
            tmp.credit_record = is.readString(27, false, "");
            tmp.credit_record_options = is.readString(28, false, "");
            tmp.actual_controller = is.readInt32(29, false, 0);
            tmp.actual_receiptor = is.readInt32(30, false, 0);
            tmp.tax_type = is.readInt32(31, false, 0);
            tmp.tcc = is.readString(32, false, "");
            tmp.trade_pwd = is.readString(33, false, "");
            tmp.capital_pwd = is.readString(34, false, "");
            tmp.job_options = is.readString(35, false, "");
            tmp.risk_version = is.readString(36, false, "");
            tmp.risk_answer = is.readString(37, false, "");
            tmp.branch = is.readString(38, false, "");
            tmp.industry_type = is.readString(39, false, "");
            tmp.resurvey_version = is.readString(40, false, "");
            tmp.resurvey_answer = is.readString(41, false, "");
            tmp.resurvey_time = is.readString(42, false, "");
            tmp.markets = is.readString(43, false, "");
            tmp.id_zip_code = is.readString(44, false, "");
            tmp.bank_code = is.readInt32(45, false, 0);
            tmp.bank_acct = is.readString(46, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.msg_no);
            os.writeInt32(2, this.id_type);
            os.writeString(3, this.id_code);
            os.writeString(4, this.id_name);
            os.writeString(5, this.id_addr);
            os.writeString(6, this.id_validity_begin);
            os.writeString(7, this.id_validity_end);
            os.writeString(8, this.ethnicity);
            os.writeString(9, this.id_issuing_authority);
            os.writeString(10, this.citizenship);
            os.writeInt32(11, this.gender);
            os.writeString(12, this.tel_no);
            os.writeString(13, this.birth_date);
            os.writeInt32(14, this.education);
            os.writeInt32(15, this.occu_type);
            os.writeString(16, this.occu_options);
            os.writeString(17, this.zip_code);
            os.writeString(18, this.address);
            os.writeInt32(19, this.income);
            os.writeString(20, this.email);
            os.writeString(21, this.id_img_front);
            os.writeString(22, this.id_img_back);
            os.writeString(23, this.id_video);
            os.writeString(24, this.id_img_4);
            os.writeString(25, this.company);
            os.writeInt32(26, this.job_title);
            os.writeString(27, this.credit_record);
            os.writeString(28, this.credit_record_options);
            os.writeInt32(29, this.actual_controller);
            os.writeInt32(30, this.actual_receiptor);
            os.writeInt32(31, this.tax_type);
            os.writeString(32, this.tcc);
            os.writeString(33, this.trade_pwd);
            os.writeString(34, this.capital_pwd);
            os.writeString(35, this.job_options);
            os.writeString(36, this.risk_version);
            os.writeString(37, this.risk_answer);
            os.writeString(38, this.branch);
            os.writeString(39, this.industry_type);
            os.writeString(40, this.resurvey_version);
            os.writeString(41, this.resurvey_answer);
            os.writeString(42, this.resurvey_time);
            os.writeString(43, this.markets);
            os.writeString(44, this.id_zip_code);
            os.writeInt32(45, this.bank_code);
            os.writeString(46, this.bank_acct);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenCapiAndStockAcctReq.Object { 
            return {
                uid: this.uid,
                msg_no: this.msg_no,
                id_type: this.id_type,
                id_code: this.id_code,
                id_name: this.id_name,
                id_addr: this.id_addr,
                id_validity_begin: this.id_validity_begin,
                id_validity_end: this.id_validity_end,
                ethnicity: this.ethnicity,
                id_issuing_authority: this.id_issuing_authority,
                citizenship: this.citizenship,
                gender: this.gender,
                tel_no: this.tel_no,
                birth_date: this.birth_date,
                education: this.education,
                occu_type: this.occu_type,
                occu_options: this.occu_options,
                zip_code: this.zip_code,
                address: this.address,
                income: this.income,
                email: this.email,
                id_img_front: this.id_img_front,
                id_img_back: this.id_img_back,
                id_video: this.id_video,
                id_img_4: this.id_img_4,
                company: this.company,
                job_title: this.job_title,
                credit_record: this.credit_record,
                credit_record_options: this.credit_record_options,
                actual_controller: this.actual_controller,
                actual_receiptor: this.actual_receiptor,
                tax_type: this.tax_type,
                tcc: this.tcc,
                trade_pwd: this.trade_pwd,
                capital_pwd: this.capital_pwd,
                job_options: this.job_options,
                risk_version: this.risk_version,
                risk_answer: this.risk_answer,
                branch: this.branch,
                industry_type: this.industry_type,
                resurvey_version: this.resurvey_version,
                resurvey_answer: this.resurvey_answer,
                resurvey_time: this.resurvey_time,
                markets: this.markets,
                id_zip_code: this.id_zip_code,
                bank_code: this.bank_code,
                bank_acct: this.bank_acct
            };
        }

        readFromObject(json: TPOpenCapiAndStockAcctReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type!);
            _hasOwnProperty.call(json, "id_code") && (this.id_code = json.id_code!);
            _hasOwnProperty.call(json, "id_name") && (this.id_name = json.id_name!);
            _hasOwnProperty.call(json, "id_addr") && (this.id_addr = json.id_addr!);
            _hasOwnProperty.call(json, "id_validity_begin") && (this.id_validity_begin = json.id_validity_begin!);
            _hasOwnProperty.call(json, "id_validity_end") && (this.id_validity_end = json.id_validity_end!);
            _hasOwnProperty.call(json, "ethnicity") && (this.ethnicity = json.ethnicity!);
            _hasOwnProperty.call(json, "id_issuing_authority") && (this.id_issuing_authority = json.id_issuing_authority!);
            _hasOwnProperty.call(json, "citizenship") && (this.citizenship = json.citizenship!);
            _hasOwnProperty.call(json, "gender") && (this.gender = json.gender!);
            _hasOwnProperty.call(json, "tel_no") && (this.tel_no = json.tel_no!);
            _hasOwnProperty.call(json, "birth_date") && (this.birth_date = json.birth_date!);
            _hasOwnProperty.call(json, "education") && (this.education = json.education!);
            _hasOwnProperty.call(json, "occu_type") && (this.occu_type = json.occu_type!);
            _hasOwnProperty.call(json, "occu_options") && (this.occu_options = json.occu_options!);
            _hasOwnProperty.call(json, "zip_code") && (this.zip_code = json.zip_code!);
            _hasOwnProperty.call(json, "address") && (this.address = json.address!);
            _hasOwnProperty.call(json, "income") && (this.income = json.income!);
            _hasOwnProperty.call(json, "email") && (this.email = json.email!);
            _hasOwnProperty.call(json, "id_img_front") && (this.id_img_front = json.id_img_front!);
            _hasOwnProperty.call(json, "id_img_back") && (this.id_img_back = json.id_img_back!);
            _hasOwnProperty.call(json, "id_video") && (this.id_video = json.id_video!);
            _hasOwnProperty.call(json, "id_img_4") && (this.id_img_4 = json.id_img_4!);
            _hasOwnProperty.call(json, "company") && (this.company = json.company!);
            _hasOwnProperty.call(json, "job_title") && (this.job_title = json.job_title!);
            _hasOwnProperty.call(json, "credit_record") && (this.credit_record = json.credit_record!);
            _hasOwnProperty.call(json, "credit_record_options") && (this.credit_record_options = json.credit_record_options!);
            _hasOwnProperty.call(json, "actual_controller") && (this.actual_controller = json.actual_controller!);
            _hasOwnProperty.call(json, "actual_receiptor") && (this.actual_receiptor = json.actual_receiptor!);
            _hasOwnProperty.call(json, "tax_type") && (this.tax_type = json.tax_type!);
            _hasOwnProperty.call(json, "tcc") && (this.tcc = json.tcc!);
            _hasOwnProperty.call(json, "trade_pwd") && (this.trade_pwd = json.trade_pwd!);
            _hasOwnProperty.call(json, "capital_pwd") && (this.capital_pwd = json.capital_pwd!);
            _hasOwnProperty.call(json, "job_options") && (this.job_options = json.job_options!);
            _hasOwnProperty.call(json, "risk_version") && (this.risk_version = json.risk_version!);
            _hasOwnProperty.call(json, "risk_answer") && (this.risk_answer = json.risk_answer!);
            _hasOwnProperty.call(json, "branch") && (this.branch = json.branch!);
            _hasOwnProperty.call(json, "industry_type") && (this.industry_type = json.industry_type!);
            _hasOwnProperty.call(json, "resurvey_version") && (this.resurvey_version = json.resurvey_version!);
            _hasOwnProperty.call(json, "resurvey_answer") && (this.resurvey_answer = json.resurvey_answer!);
            _hasOwnProperty.call(json, "resurvey_time") && (this.resurvey_time = json.resurvey_time!);
            _hasOwnProperty.call(json, "markets") && (this.markets = json.markets!);
            _hasOwnProperty.call(json, "id_zip_code") && (this.id_zip_code = json.id_zip_code!);
            _hasOwnProperty.call(json, "bank_code") && (this.bank_code = json.bank_code!);
            _hasOwnProperty.call(json, "bank_acct") && (this.bank_acct = json.bank_acct!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenCapiAndStockAcctReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenCapiAndStockAcctReq._readFrom(is);
        }
    }

    export namespace TPOpenCapiAndStockAcctReq {
        export interface Object {
            uid?: string;
            msg_no?: string;
            id_type?: number;
            id_code?: string;
            id_name?: string;
            id_addr?: string;
            id_validity_begin?: string;
            id_validity_end?: string;
            ethnicity?: string;
            id_issuing_authority?: string;
            citizenship?: string;
            gender?: number;
            tel_no?: string;
            birth_date?: string;
            education?: number;
            occu_type?: number;
            occu_options?: string;
            zip_code?: string;
            address?: string;
            income?: number;
            email?: string;
            id_img_front?: string;
            id_img_back?: string;
            id_video?: string;
            id_img_4?: string;
            company?: string;
            job_title?: number;
            credit_record?: string;
            credit_record_options?: string;
            actual_controller?: number;
            actual_receiptor?: number;
            tax_type?: number;
            tcc?: string;
            trade_pwd?: string;
            capital_pwd?: string;
            job_options?: string;
            risk_version?: string;
            risk_answer?: string;
            branch?: string;
            industry_type?: string;
            resurvey_version?: string;
            resurvey_answer?: string;
            resurvey_time?: string;
            markets?: string;
            id_zip_code?: string;
            bank_code?: number;
            bank_acct?: string;
        }
    }

    export class TPOpenCapiAndStockAcctRsp {
        original_code: number = 0;
        original_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenCapiAndStockAcctRsp";
        protected static _classname = "JV.TPOpenCapiAndStockAcctRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenCapiAndStockAcctRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenCapiAndStockAcctRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg
            };
        }

        readFromObject(json: TPOpenCapiAndStockAcctRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenCapiAndStockAcctRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenCapiAndStockAcctRsp._readFrom(is);
        }
    }

    export namespace TPOpenCapiAndStockAcctRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
        }
    }

    export class TPOpenAcctBindBankReq {
        uid: string = "";
        msg_no: string = "";
        client_id: string = "";
        account_id: string = "";
        bank_code: number = 0;
        bank_acct: string = "";
        bank_pwd: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenAcctBindBankReq";
        protected static _classname = "JV.TPOpenAcctBindBankReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenAcctBindBankReq;
            tmp.uid = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.client_id = is.readString(2, false, "");
            tmp.account_id = is.readString(3, false, "");
            tmp.bank_code = is.readInt32(4, false, 0);
            tmp.bank_acct = is.readString(5, false, "");
            tmp.bank_pwd = is.readString(6, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.msg_no);
            os.writeString(2, this.client_id);
            os.writeString(3, this.account_id);
            os.writeInt32(4, this.bank_code);
            os.writeString(5, this.bank_acct);
            os.writeString(6, this.bank_pwd);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenAcctBindBankReq.Object { 
            return {
                uid: this.uid,
                msg_no: this.msg_no,
                client_id: this.client_id,
                account_id: this.account_id,
                bank_code: this.bank_code,
                bank_acct: this.bank_acct,
                bank_pwd: this.bank_pwd
            };
        }

        readFromObject(json: TPOpenAcctBindBankReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "bank_code") && (this.bank_code = json.bank_code!);
            _hasOwnProperty.call(json, "bank_acct") && (this.bank_acct = json.bank_acct!);
            _hasOwnProperty.call(json, "bank_pwd") && (this.bank_pwd = json.bank_pwd!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenAcctBindBankReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenAcctBindBankReq._readFrom(is);
        }
    }

    export namespace TPOpenAcctBindBankReq {
        export interface Object {
            uid?: string;
            msg_no?: string;
            client_id?: string;
            account_id?: string;
            bank_code?: number;
            bank_acct?: string;
            bank_pwd?: string;
        }
    }

    export class TPOpenAcctBindBankRsp {
        original_code: number = 0;
        original_msg: string = "";
        msg_no: string = "";
        fail_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenAcctBindBankRsp";
        protected static _classname = "JV.TPOpenAcctBindBankRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenAcctBindBankRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            tmp.fail_msg = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.msg_no);
            os.writeString(3, this.fail_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenAcctBindBankRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                msg_no: this.msg_no,
                fail_msg: this.fail_msg
            };
        }

        readFromObject(json: TPOpenAcctBindBankRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "fail_msg") && (this.fail_msg = json.fail_msg!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenAcctBindBankRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenAcctBindBankRsp._readFrom(is);
        }
    }

    export namespace TPOpenAcctBindBankRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            msg_no?: string;
            fail_msg?: string;
        }
    }

    export class TPChangeBindBankReq {
        uid: string = "";
        client_id: string = "";
        account_id: string = "";
        bank_code: number = 0;
        bank_acct: string = "";
        bank_pwd: string = "";
        sno: string = "";
        password: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPChangeBindBankReq";
        protected static _classname = "JV.TPChangeBindBankReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPChangeBindBankReq;
            tmp.uid = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.bank_code = is.readInt32(3, false, 0);
            tmp.bank_acct = is.readString(4, false, "");
            tmp.bank_pwd = is.readString(5, false, "");
            tmp.sno = is.readString(6, false, "");
            tmp.password = is.readString(7, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.client_id);
            os.writeString(2, this.account_id);
            os.writeInt32(3, this.bank_code);
            os.writeString(4, this.bank_acct);
            os.writeString(5, this.bank_pwd);
            os.writeString(6, this.sno);
            os.writeString(7, this.password);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPChangeBindBankReq.Object { 
            return {
                uid: this.uid,
                client_id: this.client_id,
                account_id: this.account_id,
                bank_code: this.bank_code,
                bank_acct: this.bank_acct,
                bank_pwd: this.bank_pwd,
                sno: this.sno,
                password: this.password
            };
        }

        readFromObject(json: TPChangeBindBankReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "bank_code") && (this.bank_code = json.bank_code!);
            _hasOwnProperty.call(json, "bank_acct") && (this.bank_acct = json.bank_acct!);
            _hasOwnProperty.call(json, "bank_pwd") && (this.bank_pwd = json.bank_pwd!);
            _hasOwnProperty.call(json, "sno") && (this.sno = json.sno!);
            _hasOwnProperty.call(json, "password") && (this.password = json.password!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPChangeBindBankReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPChangeBindBankReq._readFrom(is);
        }
    }

    export namespace TPChangeBindBankReq {
        export interface Object {
            uid?: string;
            client_id?: string;
            account_id?: string;
            bank_code?: number;
            bank_acct?: string;
            bank_pwd?: string;
            sno?: string;
            password?: string;
        }
    }

    export class TPChangeBindBankRsp {
        original_code: number = 0;
        original_msg: string = "";
        fail_msg: string = "";
        due_date: string = "";
        b_sno: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPChangeBindBankRsp";
        protected static _classname = "JV.TPChangeBindBankRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPChangeBindBankRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.fail_msg = is.readString(2, false, "");
            tmp.due_date = is.readString(3, false, "");
            tmp.b_sno = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.fail_msg);
            os.writeString(3, this.due_date);
            os.writeString(4, this.b_sno);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPChangeBindBankRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                fail_msg: this.fail_msg,
                due_date: this.due_date,
                b_sno: this.b_sno
            };
        }

        readFromObject(json: TPChangeBindBankRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "fail_msg") && (this.fail_msg = json.fail_msg!);
            _hasOwnProperty.call(json, "due_date") && (this.due_date = json.due_date!);
            _hasOwnProperty.call(json, "b_sno") && (this.b_sno = json.b_sno!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPChangeBindBankRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPChangeBindBankRsp._readFrom(is);
        }
    }

    export namespace TPChangeBindBankRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            fail_msg?: string;
            due_date?: string;
            b_sno?: string;
        }
    }

    export class TPCheckChangeBindBankReq {
        uid: string = "";
        client_id: string = "";
        account_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPCheckChangeBindBankReq";
        protected static _classname = "JV.TPCheckChangeBindBankReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPCheckChangeBindBankReq;
            tmp.uid = is.readString(0, false, "");
            tmp.client_id = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.client_id);
            os.writeString(2, this.account_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPCheckChangeBindBankReq.Object { 
            return {
                uid: this.uid,
                client_id: this.client_id,
                account_id: this.account_id
            };
        }

        readFromObject(json: TPCheckChangeBindBankReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPCheckChangeBindBankReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPCheckChangeBindBankReq._readFrom(is);
        }
    }

    export namespace TPCheckChangeBindBankReq {
        export interface Object {
            uid?: string;
            client_id?: string;
            account_id?: string;
        }
    }

    export class TPCheckChangeBindBankRsp {
        is_pass: number = 0;
        condition: TarsStream.Map<number, string> = new TarsStream.Map(TarsStream.Int32, TarsStream.String);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPCheckChangeBindBankRsp";
        protected static _classname = "JV.TPCheckChangeBindBankRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPCheckChangeBindBankRsp;
            tmp.is_pass = is.readInt32(0, false, 0);
            tmp.condition = is.readMap(1, false, TarsStream.Map(TarsStream.Int32, TarsStream.String));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.is_pass);
            os.writeMap(1, this.condition);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPCheckChangeBindBankRsp.Object { 
            return {
                is_pass: this.is_pass,
                condition: this.condition.toObject()
            };
        }

        readFromObject(json: TPCheckChangeBindBankRsp.Object) { 
            _hasOwnProperty.call(json, "is_pass") && (this.is_pass = json.is_pass!);
            _hasOwnProperty.call(json, "condition") && (this.condition.readFromObject(json.condition!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPCheckChangeBindBankRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPCheckChangeBindBankRsp._readFrom(is);
        }
    }

    export namespace TPCheckChangeBindBankRsp {
        export interface Object {
            is_pass?: number;
            condition?: Record<number, string>;
        }
    }

    export class TPQueryChangeBindBankReq {
        serial_no: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQueryChangeBindBankReq";
        protected static _classname = "JV.TPQueryChangeBindBankReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQueryChangeBindBankReq;
            tmp.serial_no = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.serial_no);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQueryChangeBindBankReq.Object { 
            return {
                serial_no: this.serial_no
            };
        }

        readFromObject(json: TPQueryChangeBindBankReq.Object) { 
            _hasOwnProperty.call(json, "serial_no") && (this.serial_no = json.serial_no!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQueryChangeBindBankReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQueryChangeBindBankReq._readFrom(is);
        }
    }

    export namespace TPQueryChangeBindBankReq {
        export interface Object {
            serial_no?: string;
        }
    }

    export class TPQueryChangeBindBankRsp {
        state: number = 0;
        step: number = 0;
        err_code: string = "";
        err_msg: string = "";
        original_err_code: string = "";
        original_err_msg: string = "";
        due_date: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQueryChangeBindBankRsp";
        protected static _classname = "JV.TPQueryChangeBindBankRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQueryChangeBindBankRsp;
            tmp.state = is.readInt32(0, false, 0);
            tmp.step = is.readInt32(1, false, 0);
            tmp.err_code = is.readString(2, false, "");
            tmp.err_msg = is.readString(3, false, "");
            tmp.original_err_code = is.readString(4, false, "");
            tmp.original_err_msg = is.readString(5, false, "");
            tmp.due_date = is.readString(6, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.state);
            os.writeInt32(1, this.step);
            os.writeString(2, this.err_code);
            os.writeString(3, this.err_msg);
            os.writeString(4, this.original_err_code);
            os.writeString(5, this.original_err_msg);
            os.writeString(6, this.due_date);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQueryChangeBindBankRsp.Object { 
            return {
                state: this.state,
                step: this.step,
                err_code: this.err_code,
                err_msg: this.err_msg,
                original_err_code: this.original_err_code,
                original_err_msg: this.original_err_msg,
                due_date: this.due_date
            };
        }

        readFromObject(json: TPQueryChangeBindBankRsp.Object) { 
            _hasOwnProperty.call(json, "state") && (this.state = json.state!);
            _hasOwnProperty.call(json, "step") && (this.step = json.step!);
            _hasOwnProperty.call(json, "err_code") && (this.err_code = json.err_code!);
            _hasOwnProperty.call(json, "err_msg") && (this.err_msg = json.err_msg!);
            _hasOwnProperty.call(json, "original_err_code") && (this.original_err_code = json.original_err_code!);
            _hasOwnProperty.call(json, "original_err_msg") && (this.original_err_msg = json.original_err_msg!);
            _hasOwnProperty.call(json, "due_date") && (this.due_date = json.due_date!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQueryChangeBindBankRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQueryChangeBindBankRsp._readFrom(is);
        }
    }

    export namespace TPQueryChangeBindBankRsp {
        export interface Object {
            state?: number;
            step?: number;
            err_code?: string;
            err_msg?: string;
            original_err_code?: string;
            original_err_msg?: string;
            due_date?: string;
        }
    }

    export class TPQryCapiAcctListReq {
        msg_no: string = "";
        id_type: number = 0;
        id_code: string = "";
        id_name: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryCapiAcctListReq";
        protected static _classname = "JV.TPQryCapiAcctListReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryCapiAcctListReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.id_type = is.readInt32(1, false, 0);
            tmp.id_code = is.readString(2, false, "");
            tmp.id_name = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.id_type);
            os.writeString(2, this.id_code);
            os.writeString(3, this.id_name);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryCapiAcctListReq.Object { 
            return {
                msg_no: this.msg_no,
                id_type: this.id_type,
                id_code: this.id_code,
                id_name: this.id_name
            };
        }

        readFromObject(json: TPQryCapiAcctListReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type!);
            _hasOwnProperty.call(json, "id_code") && (this.id_code = json.id_code!);
            _hasOwnProperty.call(json, "id_name") && (this.id_name = json.id_name!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryCapiAcctListReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryCapiAcctListReq._readFrom(is);
        }
    }

    export namespace TPQryCapiAcctListReq {
        export interface Object {
            msg_no?: string;
            id_type?: number;
            id_code?: string;
            id_name?: string;
        }
    }

    export class TPQryCapiAcctByUidReq {
        msg_no: string = "";
        uid: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryCapiAcctByUidReq";
        protected static _classname = "JV.TPQryCapiAcctByUidReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryCapiAcctByUidReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.uid = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.uid);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryCapiAcctByUidReq.Object { 
            return {
                msg_no: this.msg_no,
                uid: this.uid
            };
        }

        readFromObject(json: TPQryCapiAcctByUidReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryCapiAcctByUidReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryCapiAcctByUidReq._readFrom(is);
        }
    }

    export namespace TPQryCapiAcctByUidReq {
        export interface Object {
            msg_no?: string;
            uid?: string;
        }
    }

    export class TPQryCapiAcctByUidRsp {
        msg_no: string = "";
        account_id: string = "";
        client_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryCapiAcctByUidRsp";
        protected static _classname = "JV.TPQryCapiAcctByUidRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryCapiAcctByUidRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.account_id = is.readString(1, false, "");
            tmp.client_id = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.account_id);
            os.writeString(2, this.client_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryCapiAcctByUidRsp.Object { 
            return {
                msg_no: this.msg_no,
                account_id: this.account_id,
                client_id: this.client_id
            };
        }

        readFromObject(json: TPQryCapiAcctByUidRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryCapiAcctByUidRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryCapiAcctByUidRsp._readFrom(is);
        }
    }

    export namespace TPQryCapiAcctByUidRsp {
        export interface Object {
            msg_no?: string;
            account_id?: string;
            client_id?: string;
        }
    }

    export class TPQryCapiAcctBySerialNoReq {
        serial_no: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryCapiAcctBySerialNoReq";
        protected static _classname = "JV.TPQryCapiAcctBySerialNoReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryCapiAcctBySerialNoReq;
            tmp.serial_no = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.serial_no);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryCapiAcctBySerialNoReq.Object { 
            return {
                serial_no: this.serial_no
            };
        }

        readFromObject(json: TPQryCapiAcctBySerialNoReq.Object) { 
            _hasOwnProperty.call(json, "serial_no") && (this.serial_no = json.serial_no!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryCapiAcctBySerialNoReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryCapiAcctBySerialNoReq._readFrom(is);
        }
    }

    export namespace TPQryCapiAcctBySerialNoReq {
        export interface Object {
            serial_no?: string;
        }
    }

    export class TPQryCapiAcctBySerialNoRsp {
        open_account_state: number = 0;
        account_id: string = "";
        client_id: string = "";
        open_account_err_code: string = "";
        open_account_err_msg: string = "";
        convert_err_code: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryCapiAcctBySerialNoRsp";
        protected static _classname = "JV.TPQryCapiAcctBySerialNoRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryCapiAcctBySerialNoRsp;
            tmp.open_account_state = is.readInt32(0, false, 0);
            tmp.account_id = is.readString(1, false, "");
            tmp.client_id = is.readString(2, false, "");
            tmp.open_account_err_code = is.readString(3, false, "");
            tmp.open_account_err_msg = is.readString(4, false, "");
            tmp.convert_err_code = is.readInt32(5, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.open_account_state);
            os.writeString(1, this.account_id);
            os.writeString(2, this.client_id);
            os.writeString(3, this.open_account_err_code);
            os.writeString(4, this.open_account_err_msg);
            os.writeInt32(5, this.convert_err_code);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryCapiAcctBySerialNoRsp.Object { 
            return {
                open_account_state: this.open_account_state,
                account_id: this.account_id,
                client_id: this.client_id,
                open_account_err_code: this.open_account_err_code,
                open_account_err_msg: this.open_account_err_msg,
                convert_err_code: this.convert_err_code
            };
        }

        readFromObject(json: TPQryCapiAcctBySerialNoRsp.Object) { 
            _hasOwnProperty.call(json, "open_account_state") && (this.open_account_state = json.open_account_state!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "open_account_err_code") && (this.open_account_err_code = json.open_account_err_code!);
            _hasOwnProperty.call(json, "open_account_err_msg") && (this.open_account_err_msg = json.open_account_err_msg!);
            _hasOwnProperty.call(json, "convert_err_code") && (this.convert_err_code = json.convert_err_code!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryCapiAcctBySerialNoRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryCapiAcctBySerialNoRsp._readFrom(is);
        }
    }

    export namespace TPQryCapiAcctBySerialNoRsp {
        export interface Object {
            open_account_state?: number;
            account_id?: string;
            client_id?: string;
            open_account_err_code?: string;
            open_account_err_msg?: string;
            convert_err_code?: number;
        }
    }

    export class TCapiAcctItem {
        account_id: string = "";
        account_type: number = 0;
        client_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TCapiAcctItem";
        protected static _classname = "JV.TCapiAcctItem";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TCapiAcctItem;
            tmp.account_id = is.readString(0, false, "");
            tmp.account_type = is.readInt32(1, false, 0);
            tmp.client_id = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.account_id);
            os.writeInt32(1, this.account_type);
            os.writeString(2, this.client_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TCapiAcctItem.Object { 
            return {
                account_id: this.account_id,
                account_type: this.account_type,
                client_id: this.client_id
            };
        }

        readFromObject(json: TCapiAcctItem.Object) { 
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "account_type") && (this.account_type = json.account_type!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TCapiAcctItem();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TCapiAcctItem._readFrom(is);
        }
    }

    export namespace TCapiAcctItem {
        export interface Object {
            account_id?: string;
            account_type?: number;
            client_id?: string;
        }
    }

    export class TPQryCapiAcctListRsp {
        original_code: number = 0;
        original_msg: string = "";
        msg_no: string = "";
        acct_list: TarsStream.List<JV.TCapiAcctItem> = new TarsStream.List(JV.TCapiAcctItem);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryCapiAcctListRsp";
        protected static _classname = "JV.TPQryCapiAcctListRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryCapiAcctListRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            tmp.acct_list = is.readList(3, false, TarsStream.List(JV.TCapiAcctItem));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.msg_no);
            os.writeList(3, this.acct_list);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryCapiAcctListRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                msg_no: this.msg_no,
                acct_list: this.acct_list.toObject()
            };
        }

        readFromObject(json: TPQryCapiAcctListRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "acct_list") && (this.acct_list.readFromObject(json.acct_list!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryCapiAcctListRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryCapiAcctListRsp._readFrom(is);
        }
    }

    export namespace TPQryCapiAcctListRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            msg_no?: string;
            acct_list?: Array<JV.TCapiAcctItem.Object>;
        }
    }

    export class TPQryBankCardInfoReq {
        uid: string = "";
        msg_no: string = "";
        account_id: string = "";
        client_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryBankCardInfoReq";
        protected static _classname = "JV.TPQryBankCardInfoReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryBankCardInfoReq;
            tmp.uid = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.client_id = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.msg_no);
            os.writeString(2, this.account_id);
            os.writeString(3, this.client_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryBankCardInfoReq.Object { 
            return {
                uid: this.uid,
                msg_no: this.msg_no,
                account_id: this.account_id,
                client_id: this.client_id
            };
        }

        readFromObject(json: TPQryBankCardInfoReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryBankCardInfoReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryBankCardInfoReq._readFrom(is);
        }
    }

    export namespace TPQryBankCardInfoReq {
        export interface Object {
            uid?: string;
            msg_no?: string;
            account_id?: string;
            client_id?: string;
        }
    }

    export class TPQryBankCardInfoRsp {
        original_code: number = 0;
        original_msg: string = "";
        bank_acct: string = "";
        bank_code: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryBankCardInfoRsp";
        protected static _classname = "JV.TPQryBankCardInfoRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryBankCardInfoRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.bank_acct = is.readString(2, false, "");
            tmp.bank_code = is.readInt32(3, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.bank_acct);
            os.writeInt32(3, this.bank_code);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryBankCardInfoRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                bank_acct: this.bank_acct,
                bank_code: this.bank_code
            };
        }

        readFromObject(json: TPQryBankCardInfoRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "bank_acct") && (this.bank_acct = json.bank_acct!);
            _hasOwnProperty.call(json, "bank_code") && (this.bank_code = json.bank_code!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryBankCardInfoRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryBankCardInfoRsp._readFrom(is);
        }
    }

    export namespace TPQryBankCardInfoRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            bank_acct?: string;
            bank_code?: number;
        }
    }

    export class TPOpenAcctResurveyReq {
        uid: string = "";
        msg_no: string = "";
        client_id: string = "";
        account_id: string = "";
        resurvey_id: string = "";
        answer: string = "";
        answer_time: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenAcctResurveyReq";
        protected static _classname = "JV.TPOpenAcctResurveyReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenAcctResurveyReq;
            tmp.uid = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.client_id = is.readString(2, false, "");
            tmp.account_id = is.readString(3, false, "");
            tmp.resurvey_id = is.readString(4, false, "");
            tmp.answer = is.readString(5, false, "");
            tmp.answer_time = is.readInt32(6, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.msg_no);
            os.writeString(2, this.client_id);
            os.writeString(3, this.account_id);
            os.writeString(4, this.resurvey_id);
            os.writeString(5, this.answer);
            os.writeInt32(6, this.answer_time);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenAcctResurveyReq.Object { 
            return {
                uid: this.uid,
                msg_no: this.msg_no,
                client_id: this.client_id,
                account_id: this.account_id,
                resurvey_id: this.resurvey_id,
                answer: this.answer,
                answer_time: this.answer_time
            };
        }

        readFromObject(json: TPOpenAcctResurveyReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "resurvey_id") && (this.resurvey_id = json.resurvey_id!);
            _hasOwnProperty.call(json, "answer") && (this.answer = json.answer!);
            _hasOwnProperty.call(json, "answer_time") && (this.answer_time = json.answer_time!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenAcctResurveyReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenAcctResurveyReq._readFrom(is);
        }
    }

    export namespace TPOpenAcctResurveyReq {
        export interface Object {
            uid?: string;
            msg_no?: string;
            client_id?: string;
            account_id?: string;
            resurvey_id?: string;
            answer?: string;
            answer_time?: number;
        }
    }

    export class TPOpenAcctResurveyRsp {
        original_code: number = 0;
        original_msg: string = "";
        msg_no: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenAcctResurveyRsp";
        protected static _classname = "JV.TPOpenAcctResurveyRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenAcctResurveyRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.msg_no);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenAcctResurveyRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                msg_no: this.msg_no
            };
        }

        readFromObject(json: TPOpenAcctResurveyRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenAcctResurveyRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenAcctResurveyRsp._readFrom(is);
        }
    }

    export namespace TPOpenAcctResurveyRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            msg_no?: string;
        }
    }

    export class TPGetOpenAcctStateReq {
        uid: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPGetOpenAcctStateReq";
        protected static _classname = "JV.TPGetOpenAcctStateReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPGetOpenAcctStateReq;
            tmp.uid = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPGetOpenAcctStateReq.Object { 
            return {
                uid: this.uid
            };
        }

        readFromObject(json: TPGetOpenAcctStateReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPGetOpenAcctStateReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPGetOpenAcctStateReq._readFrom(is);
        }
    }

    export namespace TPGetOpenAcctStateReq {
        export interface Object {
            uid?: string;
        }
    }

    export class TPGetOpenAcctStateRsp {
        original_code: number = 0;
        original_msg: string = "";
        state: number = 0;
        fail_code: string = "";
        fail_msg: string = "";
        account_id: string = "";
        client_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPGetOpenAcctStateRsp";
        protected static _classname = "JV.TPGetOpenAcctStateRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPGetOpenAcctStateRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.state = is.readInt32(2, false, 0);
            tmp.fail_code = is.readString(3, false, "");
            tmp.fail_msg = is.readString(4, false, "");
            tmp.account_id = is.readString(5, false, "");
            tmp.client_id = is.readString(6, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeInt32(2, this.state);
            os.writeString(3, this.fail_code);
            os.writeString(4, this.fail_msg);
            os.writeString(5, this.account_id);
            os.writeString(6, this.client_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPGetOpenAcctStateRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                state: this.state,
                fail_code: this.fail_code,
                fail_msg: this.fail_msg,
                account_id: this.account_id,
                client_id: this.client_id
            };
        }

        readFromObject(json: TPGetOpenAcctStateRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "state") && (this.state = json.state!);
            _hasOwnProperty.call(json, "fail_code") && (this.fail_code = json.fail_code!);
            _hasOwnProperty.call(json, "fail_msg") && (this.fail_msg = json.fail_msg!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPGetOpenAcctStateRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPGetOpenAcctStateRsp._readFrom(is);
        }
    }

    export namespace TPGetOpenAcctStateRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            state?: number;
            fail_code?: string;
            fail_msg?: string;
            account_id?: string;
            client_id?: string;
        }
    }

    export class TPBindCapitalAcctReq {
        uid: string = "";
        msg_no: string = "";
        account_id: string = "";
        trade_passwd: string = "";
        tcc: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPBindCapitalAcctReq";
        protected static _classname = "JV.TPBindCapitalAcctReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPBindCapitalAcctReq;
            tmp.uid = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.trade_passwd = is.readString(3, false, "");
            tmp.tcc = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.msg_no);
            os.writeString(2, this.account_id);
            os.writeString(3, this.trade_passwd);
            os.writeString(4, this.tcc);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPBindCapitalAcctReq.Object { 
            return {
                uid: this.uid,
                msg_no: this.msg_no,
                account_id: this.account_id,
                trade_passwd: this.trade_passwd,
                tcc: this.tcc
            };
        }

        readFromObject(json: TPBindCapitalAcctReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "trade_passwd") && (this.trade_passwd = json.trade_passwd!);
            _hasOwnProperty.call(json, "tcc") && (this.tcc = json.tcc!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPBindCapitalAcctReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPBindCapitalAcctReq._readFrom(is);
        }
    }

    export namespace TPBindCapitalAcctReq {
        export interface Object {
            uid?: string;
            msg_no?: string;
            account_id?: string;
            trade_passwd?: string;
            tcc?: string;
        }
    }

    export class TPOpenAcctUploadFileReq {
        uid: string = "";
        msg_no: string = "";
        file_type: string = "";
        file_name: string = "";
        file_content: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenAcctUploadFileReq";
        protected static _classname = "JV.TPOpenAcctUploadFileReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenAcctUploadFileReq;
            tmp.uid = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.file_type = is.readString(2, false, "");
            tmp.file_name = is.readString(3, false, "");
            tmp.file_content = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.msg_no);
            os.writeString(2, this.file_type);
            os.writeString(3, this.file_name);
            os.writeString(4, this.file_content);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenAcctUploadFileReq.Object { 
            return {
                uid: this.uid,
                msg_no: this.msg_no,
                file_type: this.file_type,
                file_name: this.file_name,
                file_content: this.file_content
            };
        }

        readFromObject(json: TPOpenAcctUploadFileReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "file_type") && (this.file_type = json.file_type!);
            _hasOwnProperty.call(json, "file_name") && (this.file_name = json.file_name!);
            _hasOwnProperty.call(json, "file_content") && (this.file_content = json.file_content!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenAcctUploadFileReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenAcctUploadFileReq._readFrom(is);
        }
    }

    export namespace TPOpenAcctUploadFileReq {
        export interface Object {
            uid?: string;
            msg_no?: string;
            file_type?: string;
            file_name?: string;
            file_content?: string;
        }
    }

    export class TPOpenAcctUploadFileRsp {
        original_code: number = 0;
        original_msg: string = "";
        msg_no: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOpenAcctUploadFileRsp";
        protected static _classname = "JV.TPOpenAcctUploadFileRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOpenAcctUploadFileRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.msg_no);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOpenAcctUploadFileRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                msg_no: this.msg_no
            };
        }

        readFromObject(json: TPOpenAcctUploadFileRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOpenAcctUploadFileRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOpenAcctUploadFileRsp._readFrom(is);
        }
    }

    export namespace TPOpenAcctUploadFileRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            msg_no?: string;
        }
    }

    export class TPBindCapitalAcctRsp {
        original_code: number = 0;
        original_msg: string = "";
        msg_no: string = "";
        online_flag: number = 0;
        account_id: string = "";
        client_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPBindCapitalAcctRsp";
        protected static _classname = "JV.TPBindCapitalAcctRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPBindCapitalAcctRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            tmp.online_flag = is.readInt32(3, false, 0);
            tmp.account_id = is.readString(4, false, "");
            tmp.client_id = is.readString(5, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.msg_no);
            os.writeInt32(3, this.online_flag);
            os.writeString(4, this.account_id);
            os.writeString(5, this.client_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPBindCapitalAcctRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                msg_no: this.msg_no,
                online_flag: this.online_flag,
                account_id: this.account_id,
                client_id: this.client_id
            };
        }

        readFromObject(json: TPBindCapitalAcctRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "online_flag") && (this.online_flag = json.online_flag!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPBindCapitalAcctRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPBindCapitalAcctRsp._readFrom(is);
        }
    }

    export namespace TPBindCapitalAcctRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            msg_no?: string;
            online_flag?: number;
            account_id?: string;
            client_id?: string;
        }
    }

    export class TPUnbindCapitalAcctReq {
        uid: string = "";
        msg_no: string = "";
        account_id: string = "";
        trade_passwd: string = "";
        tcc: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPUnbindCapitalAcctReq";
        protected static _classname = "JV.TPUnbindCapitalAcctReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPUnbindCapitalAcctReq;
            tmp.uid = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.trade_passwd = is.readString(3, false, "");
            tmp.tcc = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.msg_no);
            os.writeString(2, this.account_id);
            os.writeString(3, this.trade_passwd);
            os.writeString(4, this.tcc);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPUnbindCapitalAcctReq.Object { 
            return {
                uid: this.uid,
                msg_no: this.msg_no,
                account_id: this.account_id,
                trade_passwd: this.trade_passwd,
                tcc: this.tcc
            };
        }

        readFromObject(json: TPUnbindCapitalAcctReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "trade_passwd") && (this.trade_passwd = json.trade_passwd!);
            _hasOwnProperty.call(json, "tcc") && (this.tcc = json.tcc!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPUnbindCapitalAcctReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPUnbindCapitalAcctReq._readFrom(is);
        }
    }

    export namespace TPUnbindCapitalAcctReq {
        export interface Object {
            uid?: string;
            msg_no?: string;
            account_id?: string;
            trade_passwd?: string;
            tcc?: string;
        }
    }

    export class TPUnbindCapitalAcctRsp {
        original_code: number = 0;
        original_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPUnbindCapitalAcctRsp";
        protected static _classname = "JV.TPUnbindCapitalAcctRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPUnbindCapitalAcctRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPUnbindCapitalAcctRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg
            };
        }

        readFromObject(json: TPUnbindCapitalAcctRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPUnbindCapitalAcctRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPUnbindCapitalAcctRsp._readFrom(is);
        }
    }

    export namespace TPUnbindCapitalAcctRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
        }
    }

    export class TPUpdateRiskAssessmentReq {
        uid: string = "";
        msg_no: string = "";
        client_id: string = "";
        account_id: string = "";
        risk_version: string = "";
        risk_answer: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPUpdateRiskAssessmentReq";
        protected static _classname = "JV.TPUpdateRiskAssessmentReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPUpdateRiskAssessmentReq;
            tmp.uid = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.client_id = is.readString(2, false, "");
            tmp.account_id = is.readString(3, false, "");
            tmp.risk_version = is.readString(4, false, "");
            tmp.risk_answer = is.readString(5, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.msg_no);
            os.writeString(2, this.client_id);
            os.writeString(3, this.account_id);
            os.writeString(4, this.risk_version);
            os.writeString(5, this.risk_answer);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPUpdateRiskAssessmentReq.Object { 
            return {
                uid: this.uid,
                msg_no: this.msg_no,
                client_id: this.client_id,
                account_id: this.account_id,
                risk_version: this.risk_version,
                risk_answer: this.risk_answer
            };
        }

        readFromObject(json: TPUpdateRiskAssessmentReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "risk_version") && (this.risk_version = json.risk_version!);
            _hasOwnProperty.call(json, "risk_answer") && (this.risk_answer = json.risk_answer!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPUpdateRiskAssessmentReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPUpdateRiskAssessmentReq._readFrom(is);
        }
    }

    export namespace TPUpdateRiskAssessmentReq {
        export interface Object {
            uid?: string;
            msg_no?: string;
            client_id?: string;
            account_id?: string;
            risk_version?: string;
            risk_answer?: string;
        }
    }

    export class TPUpdateRiskAssessmentRsp {
        original_code: number = 0;
        original_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPUpdateRiskAssessmentRsp";
        protected static _classname = "JV.TPUpdateRiskAssessmentRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPUpdateRiskAssessmentRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPUpdateRiskAssessmentRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg
            };
        }

        readFromObject(json: TPUpdateRiskAssessmentRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPUpdateRiskAssessmentRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPUpdateRiskAssessmentRsp._readFrom(is);
        }
    }

    export namespace TPUpdateRiskAssessmentRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
        }
    }

    export class TPLoginBrokerReq {
        msg_no: string = "";
        uid: string = "";
        account_id: string = "";
        passwd: string = "";
        tcc: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPLoginBrokerReq";
        protected static _classname = "JV.TPLoginBrokerReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPLoginBrokerReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.uid = is.readString(1, true, "");
            tmp.account_id = is.readString(2, true, "");
            tmp.passwd = is.readString(3, true, "");
            tmp.tcc = is.readString(4, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.uid);
            os.writeString(2, this.account_id);
            os.writeString(3, this.passwd);
            os.writeString(4, this.tcc);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPLoginBrokerReq.Object { 
            return {
                msg_no: this.msg_no,
                uid: this.uid,
                account_id: this.account_id,
                passwd: this.passwd,
                tcc: this.tcc
            };
        }

        readFromObject(json: TPLoginBrokerReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id);
            _hasOwnProperty.call(json, "passwd") && (this.passwd = json.passwd);
            _hasOwnProperty.call(json, "tcc") && (this.tcc = json.tcc);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPLoginBrokerReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPLoginBrokerReq._readFrom(is);
        }
    }

    export namespace TPLoginBrokerReq {
        export interface Object {
            msg_no?: string;
            uid: string;
            account_id: string;
            passwd: string;
            tcc: string;
        }
    }

    export class TPLoginBrokerRsp {
        msg_no: string = "";
        broker_ret_code: number = 0;
        broker_ret_msg: string = "";
        rest_num: number = 0;
        query_ticket: string = "";
        query_ticket_expire: number = 0;
        trade_ticket: string = "";
        trade_ticket_expire: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPLoginBrokerRsp";
        protected static _classname = "JV.TPLoginBrokerRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPLoginBrokerRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.broker_ret_code = is.readInt32(1, true, 0);
            tmp.broker_ret_msg = is.readString(2, true, "");
            tmp.rest_num = is.readInt32(3, true, 0);
            tmp.query_ticket = is.readString(4, true, "");
            tmp.query_ticket_expire = is.readInt32(5, true, 0);
            tmp.trade_ticket = is.readString(6, true, "");
            tmp.trade_ticket_expire = is.readInt32(7, true, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.broker_ret_code);
            os.writeString(2, this.broker_ret_msg);
            os.writeInt32(3, this.rest_num);
            os.writeString(4, this.query_ticket);
            os.writeInt32(5, this.query_ticket_expire);
            os.writeString(6, this.trade_ticket);
            os.writeInt32(7, this.trade_ticket_expire);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPLoginBrokerRsp.Object { 
            return {
                msg_no: this.msg_no,
                broker_ret_code: this.broker_ret_code,
                broker_ret_msg: this.broker_ret_msg,
                rest_num: this.rest_num,
                query_ticket: this.query_ticket,
                query_ticket_expire: this.query_ticket_expire,
                trade_ticket: this.trade_ticket,
                trade_ticket_expire: this.trade_ticket_expire
            };
        }

        readFromObject(json: TPLoginBrokerRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "broker_ret_code") && (this.broker_ret_code = json.broker_ret_code);
            _hasOwnProperty.call(json, "broker_ret_msg") && (this.broker_ret_msg = json.broker_ret_msg);
            _hasOwnProperty.call(json, "rest_num") && (this.rest_num = json.rest_num);
            _hasOwnProperty.call(json, "query_ticket") && (this.query_ticket = json.query_ticket);
            _hasOwnProperty.call(json, "query_ticket_expire") && (this.query_ticket_expire = json.query_ticket_expire);
            _hasOwnProperty.call(json, "trade_ticket") && (this.trade_ticket = json.trade_ticket);
            _hasOwnProperty.call(json, "trade_ticket_expire") && (this.trade_ticket_expire = json.trade_ticket_expire);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPLoginBrokerRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPLoginBrokerRsp._readFrom(is);
        }
    }

    export namespace TPLoginBrokerRsp {
        export interface Object {
            msg_no?: string;
            broker_ret_code: number;
            broker_ret_msg: string;
            rest_num: number;
            query_ticket: string;
            query_ticket_expire: number;
            trade_ticket: string;
            trade_ticket_expire: number;
        }
    }

    export class TPOcrIdReq {
        uid: string = "";
        img_type: number = 0;
        img_data: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOcrIdReq";
        protected static _classname = "JV.TPOcrIdReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOcrIdReq;
            tmp.uid = is.readString(0, false, "");
            tmp.img_type = is.readInt32(1, false, 0);
            tmp.img_data = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeInt32(1, this.img_type);
            os.writeString(2, this.img_data);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOcrIdReq.Object { 
            return {
                uid: this.uid,
                img_type: this.img_type,
                img_data: this.img_data
            };
        }

        readFromObject(json: TPOcrIdReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "img_type") && (this.img_type = json.img_type!);
            _hasOwnProperty.call(json, "img_data") && (this.img_data = json.img_data!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOcrIdReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOcrIdReq._readFrom(is);
        }
    }

    export namespace TPOcrIdReq {
        export interface Object {
            uid?: string;
            img_type?: number;
            img_data?: string;
        }
    }

    export class TPOcrIdRsp {
        ret: number = 0;
        msg: string = "";
        id_code: string = "";
        id_name: string = "";
        ethnicity: number = 0;
        gender: number = 0;
        birth_date: string = "";
        address: string = "";
        id_issuing_authority: string = "";
        id_validity_begin: string = "";
        id_validity_end: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPOcrIdRsp";
        protected static _classname = "JV.TPOcrIdRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPOcrIdRsp;
            tmp.ret = is.readInt32(0, false, 0);
            tmp.msg = is.readString(1, false, "");
            tmp.id_code = is.readString(2, false, "");
            tmp.id_name = is.readString(3, false, "");
            tmp.ethnicity = is.readInt32(4, false, 0);
            tmp.gender = is.readInt32(5, false, 0);
            tmp.birth_date = is.readString(6, false, "");
            tmp.address = is.readString(7, false, "");
            tmp.id_issuing_authority = is.readString(8, false, "");
            tmp.id_validity_begin = is.readString(9, false, "");
            tmp.id_validity_end = is.readString(10, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.ret);
            os.writeString(1, this.msg);
            os.writeString(2, this.id_code);
            os.writeString(3, this.id_name);
            os.writeInt32(4, this.ethnicity);
            os.writeInt32(5, this.gender);
            os.writeString(6, this.birth_date);
            os.writeString(7, this.address);
            os.writeString(8, this.id_issuing_authority);
            os.writeString(9, this.id_validity_begin);
            os.writeString(10, this.id_validity_end);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPOcrIdRsp.Object { 
            return {
                ret: this.ret,
                msg: this.msg,
                id_code: this.id_code,
                id_name: this.id_name,
                ethnicity: this.ethnicity,
                gender: this.gender,
                birth_date: this.birth_date,
                address: this.address,
                id_issuing_authority: this.id_issuing_authority,
                id_validity_begin: this.id_validity_begin,
                id_validity_end: this.id_validity_end
            };
        }

        readFromObject(json: TPOcrIdRsp.Object) { 
            _hasOwnProperty.call(json, "ret") && (this.ret = json.ret!);
            _hasOwnProperty.call(json, "msg") && (this.msg = json.msg!);
            _hasOwnProperty.call(json, "id_code") && (this.id_code = json.id_code!);
            _hasOwnProperty.call(json, "id_name") && (this.id_name = json.id_name!);
            _hasOwnProperty.call(json, "ethnicity") && (this.ethnicity = json.ethnicity!);
            _hasOwnProperty.call(json, "gender") && (this.gender = json.gender!);
            _hasOwnProperty.call(json, "birth_date") && (this.birth_date = json.birth_date!);
            _hasOwnProperty.call(json, "address") && (this.address = json.address!);
            _hasOwnProperty.call(json, "id_issuing_authority") && (this.id_issuing_authority = json.id_issuing_authority!);
            _hasOwnProperty.call(json, "id_validity_begin") && (this.id_validity_begin = json.id_validity_begin!);
            _hasOwnProperty.call(json, "id_validity_end") && (this.id_validity_end = json.id_validity_end!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPOcrIdRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPOcrIdRsp._readFrom(is);
        }
    }

    export namespace TPOcrIdRsp {
        export interface Object {
            ret?: number;
            msg?: string;
            id_code?: string;
            id_name?: string;
            ethnicity?: number;
            gender?: number;
            birth_date?: string;
            address?: string;
            id_issuing_authority?: string;
            id_validity_begin?: string;
            id_validity_end?: string;
        }
    }

    export class TPImgUploadReq {
        uid: string = "";
        msg_no: string = "";
        img_type: number = 0;
        biz_type: number = 0;
        img_id: string = "";
        img_data: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPImgUploadReq";
        protected static _classname = "JV.TPImgUploadReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPImgUploadReq;
            tmp.uid = is.readString(0, false, "");
            tmp.msg_no = is.readString(1, false, "");
            tmp.img_type = is.readInt32(2, false, 0);
            tmp.biz_type = is.readInt32(3, false, 0);
            tmp.img_id = is.readString(4, false, "");
            tmp.img_data = is.readString(5, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.msg_no);
            os.writeInt32(2, this.img_type);
            os.writeInt32(3, this.biz_type);
            os.writeString(4, this.img_id);
            os.writeString(5, this.img_data);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPImgUploadReq.Object { 
            return {
                uid: this.uid,
                msg_no: this.msg_no,
                img_type: this.img_type,
                biz_type: this.biz_type,
                img_id: this.img_id,
                img_data: this.img_data
            };
        }

        readFromObject(json: TPImgUploadReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "img_type") && (this.img_type = json.img_type!);
            _hasOwnProperty.call(json, "biz_type") && (this.biz_type = json.biz_type!);
            _hasOwnProperty.call(json, "img_id") && (this.img_id = json.img_id!);
            _hasOwnProperty.call(json, "img_data") && (this.img_data = json.img_data!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPImgUploadReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPImgUploadReq._readFrom(is);
        }
    }

    export namespace TPImgUploadReq {
        export interface Object {
            uid?: string;
            msg_no?: string;
            img_type?: number;
            biz_type?: number;
            img_id?: string;
            img_data?: string;
        }
    }

    export class TPImgUploadRsp {
        ret: number = 0;
        msg: string = "";
        msg_no: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPImgUploadRsp";
        protected static _classname = "JV.TPImgUploadRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPImgUploadRsp;
            tmp.ret = is.readInt32(0, false, 0);
            tmp.msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.ret);
            os.writeString(1, this.msg);
            os.writeString(2, this.msg_no);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPImgUploadRsp.Object { 
            return {
                ret: this.ret,
                msg: this.msg,
                msg_no: this.msg_no
            };
        }

        readFromObject(json: TPImgUploadRsp.Object) { 
            _hasOwnProperty.call(json, "ret") && (this.ret = json.ret!);
            _hasOwnProperty.call(json, "msg") && (this.msg = json.msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPImgUploadRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPImgUploadRsp._readFrom(is);
        }
    }

    export namespace TPImgUploadRsp {
        export interface Object {
            ret?: number;
            msg?: string;
            msg_no?: string;
        }
    }

    export class TPUpdateUserInfoReq {
        uid: string = "";
        client_id: string = "";
        trade_session: string = "";
        tel_no: string = "";
        education: string = "";
        industry_type: string = "";
        occu_type: string = "";
        occu_options: string = "";
        job_title: string = "";
        income: string = "";
        company: string = "";
        address: string = "";
        zip_code: string = "";
        email: string = "";
        credit_record: string = "";
        credit_recode_options: string = "";
        address_input_type: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPUpdateUserInfoReq";
        protected static _classname = "JV.TPUpdateUserInfoReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPUpdateUserInfoReq;
            tmp.uid = is.readString(0, true, "");
            tmp.client_id = is.readString(1, true, "");
            tmp.trade_session = is.readString(2, true, "");
            tmp.tel_no = is.readString(3, false, "");
            tmp.education = is.readString(4, false, "");
            tmp.industry_type = is.readString(5, false, "");
            tmp.occu_type = is.readString(6, false, "");
            tmp.occu_options = is.readString(7, false, "");
            tmp.job_title = is.readString(8, false, "");
            tmp.income = is.readString(9, false, "");
            tmp.company = is.readString(10, false, "");
            tmp.address = is.readString(11, false, "");
            tmp.zip_code = is.readString(12, false, "");
            tmp.email = is.readString(13, false, "");
            tmp.credit_record = is.readString(14, false, "");
            tmp.credit_recode_options = is.readString(15, false, "");
            tmp.address_input_type = is.readInt32(16, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.uid);
            os.writeString(1, this.client_id);
            os.writeString(2, this.trade_session);
            os.writeString(3, this.tel_no);
            os.writeString(4, this.education);
            os.writeString(5, this.industry_type);
            os.writeString(6, this.occu_type);
            os.writeString(7, this.occu_options);
            os.writeString(8, this.job_title);
            os.writeString(9, this.income);
            os.writeString(10, this.company);
            os.writeString(11, this.address);
            os.writeString(12, this.zip_code);
            os.writeString(13, this.email);
            os.writeString(14, this.credit_record);
            os.writeString(15, this.credit_recode_options);
            os.writeInt32(16, this.address_input_type);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPUpdateUserInfoReq.Object { 
            return {
                uid: this.uid,
                client_id: this.client_id,
                trade_session: this.trade_session,
                tel_no: this.tel_no,
                education: this.education,
                industry_type: this.industry_type,
                occu_type: this.occu_type,
                occu_options: this.occu_options,
                job_title: this.job_title,
                income: this.income,
                company: this.company,
                address: this.address,
                zip_code: this.zip_code,
                email: this.email,
                credit_record: this.credit_record,
                credit_recode_options: this.credit_recode_options,
                address_input_type: this.address_input_type
            };
        }

        readFromObject(json: TPUpdateUserInfoReq.Object) { 
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id);
            _hasOwnProperty.call(json, "trade_session") && (this.trade_session = json.trade_session);
            _hasOwnProperty.call(json, "tel_no") && (this.tel_no = json.tel_no!);
            _hasOwnProperty.call(json, "education") && (this.education = json.education!);
            _hasOwnProperty.call(json, "industry_type") && (this.industry_type = json.industry_type!);
            _hasOwnProperty.call(json, "occu_type") && (this.occu_type = json.occu_type!);
            _hasOwnProperty.call(json, "occu_options") && (this.occu_options = json.occu_options!);
            _hasOwnProperty.call(json, "job_title") && (this.job_title = json.job_title!);
            _hasOwnProperty.call(json, "income") && (this.income = json.income!);
            _hasOwnProperty.call(json, "company") && (this.company = json.company!);
            _hasOwnProperty.call(json, "address") && (this.address = json.address!);
            _hasOwnProperty.call(json, "zip_code") && (this.zip_code = json.zip_code!);
            _hasOwnProperty.call(json, "email") && (this.email = json.email!);
            _hasOwnProperty.call(json, "credit_record") && (this.credit_record = json.credit_record!);
            _hasOwnProperty.call(json, "credit_recode_options") && (this.credit_recode_options = json.credit_recode_options!);
            _hasOwnProperty.call(json, "address_input_type") && (this.address_input_type = json.address_input_type!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPUpdateUserInfoReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPUpdateUserInfoReq._readFrom(is);
        }
    }

    export namespace TPUpdateUserInfoReq {
        export interface Object {
            uid: string;
            client_id: string;
            trade_session: string;
            tel_no?: string;
            education?: string;
            industry_type?: string;
            occu_type?: string;
            occu_options?: string;
            job_title?: string;
            income?: string;
            company?: string;
            address?: string;
            zip_code?: string;
            email?: string;
            credit_record?: string;
            credit_recode_options?: string;
            address_input_type?: number;
        }
    }

    export class TPUpdateUserInfoRsp {
        dummy: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPUpdateUserInfoRsp";
        protected static _classname = "JV.TPUpdateUserInfoRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPUpdateUserInfoRsp;
            tmp.dummy = is.readString(0, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.dummy);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPUpdateUserInfoRsp.Object { 
            return {
                dummy: this.dummy
            };
        }

        readFromObject(json: TPUpdateUserInfoRsp.Object) { 
            _hasOwnProperty.call(json, "dummy") && (this.dummy = json.dummy!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPUpdateUserInfoRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPUpdateUserInfoRsp._readFrom(is);
        }
    }

    export namespace TPUpdateUserInfoRsp {
        export interface Object {
            dummy?: string;
        }
    }

    export class TPQryUserBranchReq {
        context: _TARS_MODULE_B_.JV.TCommReqContext = new _TARS_MODULE_B_.JV.TCommReqContext;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserBranchReq";
        protected static _classname = "JV.TPQryUserBranchReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserBranchReq;
            tmp.context = is.readStruct(0, false, _TARS_MODULE_B_.JV.TCommReqContext);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeStruct(0, this.context);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserBranchReq.Object { 
            return {
                context: this.context.toObject()
            };
        }

        readFromObject(json: TPQryUserBranchReq.Object) { 
            _hasOwnProperty.call(json, "context") && (this.context.readFromObject(json.context!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserBranchReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserBranchReq._readFrom(is);
        }
    }

    export namespace TPQryUserBranchReq {
        export interface Object {
            context?: _TARS_MODULE_B_.JV.TCommReqContext.Object;
        }
    }

    export class TPQryUserBranchRsp {
        original_code: number = 0;
        original_msg: string = "";
        convert_code: string = "";
        msg_no: string = "";
        company_name: string = "";
        branch_code: string = "";
        branch_name: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserBranchRsp";
        protected static _classname = "JV.TPQryUserBranchRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserBranchRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.convert_code = is.readString(2, false, "");
            tmp.msg_no = is.readString(3, false, "");
            tmp.company_name = is.readString(4, false, "");
            tmp.branch_code = is.readString(5, false, "");
            tmp.branch_name = is.readString(6, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.convert_code);
            os.writeString(3, this.msg_no);
            os.writeString(4, this.company_name);
            os.writeString(5, this.branch_code);
            os.writeString(6, this.branch_name);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserBranchRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                convert_code: this.convert_code,
                msg_no: this.msg_no,
                company_name: this.company_name,
                branch_code: this.branch_code,
                branch_name: this.branch_name
            };
        }

        readFromObject(json: TPQryUserBranchRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "convert_code") && (this.convert_code = json.convert_code!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "company_name") && (this.company_name = json.company_name!);
            _hasOwnProperty.call(json, "branch_code") && (this.branch_code = json.branch_code!);
            _hasOwnProperty.call(json, "branch_name") && (this.branch_name = json.branch_name!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserBranchRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserBranchRsp._readFrom(is);
        }
    }

    export namespace TPQryUserBranchRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            convert_code?: string;
            msg_no?: string;
            company_name?: string;
            branch_code?: string;
            branch_name?: string;
        }
    }

    export class TPQryUserInfoReq {
        context: _TARS_MODULE_B_.JV.TCommReqContext = new _TARS_MODULE_B_.JV.TCommReqContext;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserInfoReq";
        protected static _classname = "JV.TPQryUserInfoReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserInfoReq;
            tmp.context = is.readStruct(0, false, _TARS_MODULE_B_.JV.TCommReqContext);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeStruct(0, this.context);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserInfoReq.Object { 
            return {
                context: this.context.toObject()
            };
        }

        readFromObject(json: TPQryUserInfoReq.Object) { 
            _hasOwnProperty.call(json, "context") && (this.context.readFromObject(json.context!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserInfoReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserInfoReq._readFrom(is);
        }
    }

    export namespace TPQryUserInfoReq {
        export interface Object {
            context?: _TARS_MODULE_B_.JV.TCommReqContext.Object;
        }
    }

    export class TPUserInfoItem {
        STATUS: string = "";
        ID_NAME: string = "";
        EDUCATION: string = "";
        OCCU_TYPE: string = "";
        M_TEL: string = "";
        ID_TYPE: string = "";
        ID_CODE: string = "";
        ACCOUNT_DATE: string = "";
        ACCOUNT: string = "";
        ID_BEG_DATE: string = "";
        ID_EXP_DATE: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPUserInfoItem";
        protected static _classname = "JV.TPUserInfoItem";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPUserInfoItem;
            tmp.STATUS = is.readString(0, false, "");
            tmp.ID_NAME = is.readString(1, false, "");
            tmp.EDUCATION = is.readString(2, false, "");
            tmp.OCCU_TYPE = is.readString(3, false, "");
            tmp.M_TEL = is.readString(4, false, "");
            tmp.ID_TYPE = is.readString(5, false, "");
            tmp.ID_CODE = is.readString(6, false, "");
            tmp.ACCOUNT_DATE = is.readString(7, false, "");
            tmp.ACCOUNT = is.readString(8, false, "");
            tmp.ID_BEG_DATE = is.readString(9, false, "");
            tmp.ID_EXP_DATE = is.readString(10, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.STATUS);
            os.writeString(1, this.ID_NAME);
            os.writeString(2, this.EDUCATION);
            os.writeString(3, this.OCCU_TYPE);
            os.writeString(4, this.M_TEL);
            os.writeString(5, this.ID_TYPE);
            os.writeString(6, this.ID_CODE);
            os.writeString(7, this.ACCOUNT_DATE);
            os.writeString(8, this.ACCOUNT);
            os.writeString(9, this.ID_BEG_DATE);
            os.writeString(10, this.ID_EXP_DATE);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPUserInfoItem.Object { 
            return {
                STATUS: this.STATUS,
                ID_NAME: this.ID_NAME,
                EDUCATION: this.EDUCATION,
                OCCU_TYPE: this.OCCU_TYPE,
                M_TEL: this.M_TEL,
                ID_TYPE: this.ID_TYPE,
                ID_CODE: this.ID_CODE,
                ACCOUNT_DATE: this.ACCOUNT_DATE,
                ACCOUNT: this.ACCOUNT,
                ID_BEG_DATE: this.ID_BEG_DATE,
                ID_EXP_DATE: this.ID_EXP_DATE
            };
        }

        readFromObject(json: TPUserInfoItem.Object) { 
            _hasOwnProperty.call(json, "STATUS") && (this.STATUS = json.STATUS!);
            _hasOwnProperty.call(json, "ID_NAME") && (this.ID_NAME = json.ID_NAME!);
            _hasOwnProperty.call(json, "EDUCATION") && (this.EDUCATION = json.EDUCATION!);
            _hasOwnProperty.call(json, "OCCU_TYPE") && (this.OCCU_TYPE = json.OCCU_TYPE!);
            _hasOwnProperty.call(json, "M_TEL") && (this.M_TEL = json.M_TEL!);
            _hasOwnProperty.call(json, "ID_TYPE") && (this.ID_TYPE = json.ID_TYPE!);
            _hasOwnProperty.call(json, "ID_CODE") && (this.ID_CODE = json.ID_CODE!);
            _hasOwnProperty.call(json, "ACCOUNT_DATE") && (this.ACCOUNT_DATE = json.ACCOUNT_DATE!);
            _hasOwnProperty.call(json, "ACCOUNT") && (this.ACCOUNT = json.ACCOUNT!);
            _hasOwnProperty.call(json, "ID_BEG_DATE") && (this.ID_BEG_DATE = json.ID_BEG_DATE!);
            _hasOwnProperty.call(json, "ID_EXP_DATE") && (this.ID_EXP_DATE = json.ID_EXP_DATE!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPUserInfoItem();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPUserInfoItem._readFrom(is);
        }
    }

    export namespace TPUserInfoItem {
        export interface Object {
            STATUS?: string;
            ID_NAME?: string;
            EDUCATION?: string;
            OCCU_TYPE?: string;
            M_TEL?: string;
            ID_TYPE?: string;
            ID_CODE?: string;
            ACCOUNT_DATE?: string;
            ACCOUNT?: string;
            ID_BEG_DATE?: string;
            ID_EXP_DATE?: string;
        }
    }

    export class TPQryUserInfoRsp {
        original_code: number = 0;
        original_msg: string = "";
        convert_code: string = "";
        item: JV.TPUserInfoItem = new JV.TPUserInfoItem;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserInfoRsp";
        protected static _classname = "JV.TPQryUserInfoRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserInfoRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.convert_code = is.readString(2, false, "");
            tmp.item = is.readStruct(3, false, JV.TPUserInfoItem);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.convert_code);
            os.writeStruct(3, this.item);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserInfoRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                convert_code: this.convert_code,
                item: this.item.toObject()
            };
        }

        readFromObject(json: TPQryUserInfoRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "convert_code") && (this.convert_code = json.convert_code!);
            _hasOwnProperty.call(json, "item") && (this.item.readFromObject(json.item!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserInfoRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserInfoRsp._readFrom(is);
        }
    }

    export namespace TPQryUserInfoRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            convert_code?: string;
            item?: JV.TPUserInfoItem.Object;
        }
    }

    export class TPQryUserBaseInfoReq {
        msg_no: string = "";
        uid: string = "";
        account_id: string = "";
        client_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserBaseInfoReq";
        protected static _classname = "JV.TPQryUserBaseInfoReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserBaseInfoReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.uid = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.client_id = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.uid);
            os.writeString(2, this.account_id);
            os.writeString(3, this.client_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserBaseInfoReq.Object { 
            return {
                msg_no: this.msg_no,
                uid: this.uid,
                account_id: this.account_id,
                client_id: this.client_id
            };
        }

        readFromObject(json: TPQryUserBaseInfoReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserBaseInfoReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserBaseInfoReq._readFrom(is);
        }
    }

    export namespace TPQryUserBaseInfoReq {
        export interface Object {
            msg_no?: string;
            uid?: string;
            account_id?: string;
            client_id?: string;
        }
    }

    export class TPQryUserBaseInfoRsp {
        original_code: number = 0;
        original_msg: string = "";
        msg_no: string = "";
        id_type: number = 0;
        id_code: string = "";
        id_name: string = "";
        id_validity_begin: string = "";
        id_validity_end: string = "";
        id_addr: string = "";
        id_issuing_authority: string = "";
        address: string = "";
        email: string = "";
        tel_no: string = "";
        ethnicity: string = "";
        citizenship: string = "";
        education: number = 0;
        occu_type: number = 0;
        occu_options: string = "";
        zip_code: string = "";
        income: number = 0;
        job_title: number = 0;
        branch: string = "";
        id_zip_code: string = "";
        gender: number = 0;
        birth_date: string = "";
        acc_time: string = "";
        company: string = "";
        industry_type: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserBaseInfoRsp";
        protected static _classname = "JV.TPQryUserBaseInfoRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserBaseInfoRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            tmp.id_type = is.readInt32(3, false, 0);
            tmp.id_code = is.readString(4, false, "");
            tmp.id_name = is.readString(5, false, "");
            tmp.id_validity_begin = is.readString(6, false, "");
            tmp.id_validity_end = is.readString(7, false, "");
            tmp.id_addr = is.readString(8, false, "");
            tmp.id_issuing_authority = is.readString(9, false, "");
            tmp.address = is.readString(10, false, "");
            tmp.email = is.readString(11, false, "");
            tmp.tel_no = is.readString(12, false, "");
            tmp.ethnicity = is.readString(13, false, "");
            tmp.citizenship = is.readString(14, false, "");
            tmp.education = is.readInt32(15, false, 0);
            tmp.occu_type = is.readInt32(16, false, 0);
            tmp.occu_options = is.readString(17, false, "");
            tmp.zip_code = is.readString(18, false, "");
            tmp.income = is.readInt32(19, false, 0);
            tmp.job_title = is.readInt32(20, false, 0);
            tmp.branch = is.readString(21, false, "");
            tmp.id_zip_code = is.readString(22, false, "");
            tmp.gender = is.readInt32(23, false, 0);
            tmp.birth_date = is.readString(24, false, "");
            tmp.acc_time = is.readString(25, false, "");
            tmp.company = is.readString(26, false, "");
            tmp.industry_type = is.readString(27, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.msg_no);
            os.writeInt32(3, this.id_type);
            os.writeString(4, this.id_code);
            os.writeString(5, this.id_name);
            os.writeString(6, this.id_validity_begin);
            os.writeString(7, this.id_validity_end);
            os.writeString(8, this.id_addr);
            os.writeString(9, this.id_issuing_authority);
            os.writeString(10, this.address);
            os.writeString(11, this.email);
            os.writeString(12, this.tel_no);
            os.writeString(13, this.ethnicity);
            os.writeString(14, this.citizenship);
            os.writeInt32(15, this.education);
            os.writeInt32(16, this.occu_type);
            os.writeString(17, this.occu_options);
            os.writeString(18, this.zip_code);
            os.writeInt32(19, this.income);
            os.writeInt32(20, this.job_title);
            os.writeString(21, this.branch);
            os.writeString(22, this.id_zip_code);
            os.writeInt32(23, this.gender);
            os.writeString(24, this.birth_date);
            os.writeString(25, this.acc_time);
            os.writeString(26, this.company);
            os.writeString(27, this.industry_type);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserBaseInfoRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                msg_no: this.msg_no,
                id_type: this.id_type,
                id_code: this.id_code,
                id_name: this.id_name,
                id_validity_begin: this.id_validity_begin,
                id_validity_end: this.id_validity_end,
                id_addr: this.id_addr,
                id_issuing_authority: this.id_issuing_authority,
                address: this.address,
                email: this.email,
                tel_no: this.tel_no,
                ethnicity: this.ethnicity,
                citizenship: this.citizenship,
                education: this.education,
                occu_type: this.occu_type,
                occu_options: this.occu_options,
                zip_code: this.zip_code,
                income: this.income,
                job_title: this.job_title,
                branch: this.branch,
                id_zip_code: this.id_zip_code,
                gender: this.gender,
                birth_date: this.birth_date,
                acc_time: this.acc_time,
                company: this.company,
                industry_type: this.industry_type
            };
        }

        readFromObject(json: TPQryUserBaseInfoRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type!);
            _hasOwnProperty.call(json, "id_code") && (this.id_code = json.id_code!);
            _hasOwnProperty.call(json, "id_name") && (this.id_name = json.id_name!);
            _hasOwnProperty.call(json, "id_validity_begin") && (this.id_validity_begin = json.id_validity_begin!);
            _hasOwnProperty.call(json, "id_validity_end") && (this.id_validity_end = json.id_validity_end!);
            _hasOwnProperty.call(json, "id_addr") && (this.id_addr = json.id_addr!);
            _hasOwnProperty.call(json, "id_issuing_authority") && (this.id_issuing_authority = json.id_issuing_authority!);
            _hasOwnProperty.call(json, "address") && (this.address = json.address!);
            _hasOwnProperty.call(json, "email") && (this.email = json.email!);
            _hasOwnProperty.call(json, "tel_no") && (this.tel_no = json.tel_no!);
            _hasOwnProperty.call(json, "ethnicity") && (this.ethnicity = json.ethnicity!);
            _hasOwnProperty.call(json, "citizenship") && (this.citizenship = json.citizenship!);
            _hasOwnProperty.call(json, "education") && (this.education = json.education!);
            _hasOwnProperty.call(json, "occu_type") && (this.occu_type = json.occu_type!);
            _hasOwnProperty.call(json, "occu_options") && (this.occu_options = json.occu_options!);
            _hasOwnProperty.call(json, "zip_code") && (this.zip_code = json.zip_code!);
            _hasOwnProperty.call(json, "income") && (this.income = json.income!);
            _hasOwnProperty.call(json, "job_title") && (this.job_title = json.job_title!);
            _hasOwnProperty.call(json, "branch") && (this.branch = json.branch!);
            _hasOwnProperty.call(json, "id_zip_code") && (this.id_zip_code = json.id_zip_code!);
            _hasOwnProperty.call(json, "gender") && (this.gender = json.gender!);
            _hasOwnProperty.call(json, "birth_date") && (this.birth_date = json.birth_date!);
            _hasOwnProperty.call(json, "acc_time") && (this.acc_time = json.acc_time!);
            _hasOwnProperty.call(json, "company") && (this.company = json.company!);
            _hasOwnProperty.call(json, "industry_type") && (this.industry_type = json.industry_type!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserBaseInfoRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserBaseInfoRsp._readFrom(is);
        }
    }

    export namespace TPQryUserBaseInfoRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            msg_no?: string;
            id_type?: number;
            id_code?: string;
            id_name?: string;
            id_validity_begin?: string;
            id_validity_end?: string;
            id_addr?: string;
            id_issuing_authority?: string;
            address?: string;
            email?: string;
            tel_no?: string;
            ethnicity?: string;
            citizenship?: string;
            education?: number;
            occu_type?: number;
            occu_options?: string;
            zip_code?: string;
            income?: number;
            job_title?: number;
            branch?: string;
            id_zip_code?: string;
            gender?: number;
            birth_date?: string;
            acc_time?: string;
            company?: string;
            industry_type?: string;
        }
    }

    export class TPQryUserComplianceReq {
        msg_no: string = "";
        uid: string = "";
        account_id: string = "";
        client_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserComplianceReq";
        protected static _classname = "JV.TPQryUserComplianceReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserComplianceReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.uid = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.client_id = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.uid);
            os.writeString(2, this.account_id);
            os.writeString(3, this.client_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserComplianceReq.Object { 
            return {
                msg_no: this.msg_no,
                uid: this.uid,
                account_id: this.account_id,
                client_id: this.client_id
            };
        }

        readFromObject(json: TPQryUserComplianceReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserComplianceReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserComplianceReq._readFrom(is);
        }
    }

    export namespace TPQryUserComplianceReq {
        export interface Object {
            msg_no?: string;
            uid?: string;
            account_id?: string;
            client_id?: string;
        }
    }

    export class TPQryUserComplianceRsp {
        original_code: number = 0;
        original_msg: string = "";
        msg_no: string = "";
        invest_class: string = "";
        expect_profit: number = 0;
        invest_duration: number = 0;
        risk_level: number = 0;
        expire_date: string = "";
        next_date: string = "";
        sign_date: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserComplianceRsp";
        protected static _classname = "JV.TPQryUserComplianceRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserComplianceRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            tmp.invest_class = is.readString(3, false, "");
            tmp.expect_profit = is.readInt32(4, false, 0);
            tmp.invest_duration = is.readInt32(5, false, 0);
            tmp.risk_level = is.readInt32(6, false, 0);
            tmp.expire_date = is.readString(7, false, "");
            tmp.next_date = is.readString(8, false, "");
            tmp.sign_date = is.readString(9, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.msg_no);
            os.writeString(3, this.invest_class);
            os.writeInt32(4, this.expect_profit);
            os.writeInt32(5, this.invest_duration);
            os.writeInt32(6, this.risk_level);
            os.writeString(7, this.expire_date);
            os.writeString(8, this.next_date);
            os.writeString(9, this.sign_date);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserComplianceRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                msg_no: this.msg_no,
                invest_class: this.invest_class,
                expect_profit: this.expect_profit,
                invest_duration: this.invest_duration,
                risk_level: this.risk_level,
                expire_date: this.expire_date,
                next_date: this.next_date,
                sign_date: this.sign_date
            };
        }

        readFromObject(json: TPQryUserComplianceRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "invest_class") && (this.invest_class = json.invest_class!);
            _hasOwnProperty.call(json, "expect_profit") && (this.expect_profit = json.expect_profit!);
            _hasOwnProperty.call(json, "invest_duration") && (this.invest_duration = json.invest_duration!);
            _hasOwnProperty.call(json, "risk_level") && (this.risk_level = json.risk_level!);
            _hasOwnProperty.call(json, "expire_date") && (this.expire_date = json.expire_date!);
            _hasOwnProperty.call(json, "next_date") && (this.next_date = json.next_date!);
            _hasOwnProperty.call(json, "sign_date") && (this.sign_date = json.sign_date!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserComplianceRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserComplianceRsp._readFrom(is);
        }
    }

    export namespace TPQryUserComplianceRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            msg_no?: string;
            invest_class?: string;
            expect_profit?: number;
            invest_duration?: number;
            risk_level?: number;
            expire_date?: string;
            next_date?: string;
            sign_date?: string;
        }
    }

    export class TPQryUserAccountReq {
        msg_no: string = "";
        uid: string = "";
        account_id: string = "";
        client_id: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserAccountReq";
        protected static _classname = "JV.TPQryUserAccountReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserAccountReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.uid = is.readString(1, false, "");
            tmp.account_id = is.readString(2, false, "");
            tmp.client_id = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.uid);
            os.writeString(2, this.account_id);
            os.writeString(3, this.client_id);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserAccountReq.Object { 
            return {
                msg_no: this.msg_no,
                uid: this.uid,
                account_id: this.account_id,
                client_id: this.client_id
            };
        }

        readFromObject(json: TPQryUserAccountReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "uid") && (this.uid = json.uid!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "client_id") && (this.client_id = json.client_id!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserAccountReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserAccountReq._readFrom(is);
        }
    }

    export namespace TPQryUserAccountReq {
        export interface Object {
            msg_no?: string;
            uid?: string;
            account_id?: string;
            client_id?: string;
        }
    }

    export class TPUserAccountItem {
        account: string = "";
        type: number = 0;
        open_account_time: string = "";
        stkex: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPUserAccountItem";
        protected static _classname = "JV.TPUserAccountItem";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPUserAccountItem;
            tmp.account = is.readString(0, false, "");
            tmp.type = is.readInt32(1, false, 0);
            tmp.open_account_time = is.readString(2, false, "");
            tmp.stkex = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.account);
            os.writeInt32(1, this.type);
            os.writeString(2, this.open_account_time);
            os.writeString(3, this.stkex);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPUserAccountItem.Object { 
            return {
                account: this.account,
                type: this.type,
                open_account_time: this.open_account_time,
                stkex: this.stkex
            };
        }

        readFromObject(json: TPUserAccountItem.Object) { 
            _hasOwnProperty.call(json, "account") && (this.account = json.account!);
            _hasOwnProperty.call(json, "type") && (this.type = json.type!);
            _hasOwnProperty.call(json, "open_account_time") && (this.open_account_time = json.open_account_time!);
            _hasOwnProperty.call(json, "stkex") && (this.stkex = json.stkex!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPUserAccountItem();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPUserAccountItem._readFrom(is);
        }
    }

    export namespace TPUserAccountItem {
        export interface Object {
            account?: string;
            type?: number;
            open_account_time?: string;
            stkex?: string;
        }
    }

    export class TPQryUserAccountRsp {
        original_code: number = 0;
        original_msg: string = "";
        msg_no: string = "";
        all_account: TarsStream.List<JV.TPUserAccountItem> = new TarsStream.List(JV.TPUserAccountItem);

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserAccountRsp";
        protected static _classname = "JV.TPQryUserAccountRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserAccountRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.msg_no = is.readString(2, false, "");
            tmp.all_account = is.readList(3, false, TarsStream.List(JV.TPUserAccountItem));
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.msg_no);
            os.writeList(3, this.all_account);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserAccountRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                msg_no: this.msg_no,
                all_account: this.all_account.toObject()
            };
        }

        readFromObject(json: TPQryUserAccountRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "all_account") && (this.all_account.readFromObject(json.all_account!));
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserAccountRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserAccountRsp._readFrom(is);
        }
    }

    export namespace TPQryUserAccountRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            msg_no?: string;
            all_account?: Array<JV.TPUserAccountItem.Object>;
        }
    }

    export class TPQryUserIdByPwdReq {
        msg_no: string = "";
        account_id: string = "";
        passwd: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserIdByPwdReq";
        protected static _classname = "JV.TPQryUserIdByPwdReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserIdByPwdReq;
            tmp.msg_no = is.readString(0, false, "");
            tmp.account_id = is.readString(1, false, "");
            tmp.passwd = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeString(1, this.account_id);
            os.writeString(2, this.passwd);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserIdByPwdReq.Object { 
            return {
                msg_no: this.msg_no,
                account_id: this.account_id,
                passwd: this.passwd
            };
        }

        readFromObject(json: TPQryUserIdByPwdReq.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "account_id") && (this.account_id = json.account_id!);
            _hasOwnProperty.call(json, "passwd") && (this.passwd = json.passwd!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserIdByPwdReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserIdByPwdReq._readFrom(is);
        }
    }

    export namespace TPQryUserIdByPwdReq {
        export interface Object {
            msg_no?: string;
            account_id?: string;
            passwd?: string;
        }
    }

    export class TPQryUserIdByPwdRsp {
        msg_no: string = "";
        original_code: number = 0;
        original_msg: string = "";
        id_code: string = "";
        id_type: number = 0;

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUserIdByPwdRsp";
        protected static _classname = "JV.TPQryUserIdByPwdRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUserIdByPwdRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.original_code = is.readInt32(1, false, 0);
            tmp.original_msg = is.readString(2, false, "");
            tmp.id_code = is.readString(3, false, "");
            tmp.id_type = is.readInt32(4, false, 0);
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.original_code);
            os.writeString(2, this.original_msg);
            os.writeString(3, this.id_code);
            os.writeInt32(4, this.id_type);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUserIdByPwdRsp.Object { 
            return {
                msg_no: this.msg_no,
                original_code: this.original_code,
                original_msg: this.original_msg,
                id_code: this.id_code,
                id_type: this.id_type
            };
        }

        readFromObject(json: TPQryUserIdByPwdRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "id_code") && (this.id_code = json.id_code!);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUserIdByPwdRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUserIdByPwdRsp._readFrom(is);
        }
    }

    export namespace TPQryUserIdByPwdRsp {
        export interface Object {
            msg_no?: string;
            original_code?: number;
            original_msg?: string;
            id_code?: string;
            id_type?: number;
        }
    }

    export class TPResetPasswordReq {
        USER_ID: string = "";
        ACCOUNT: string = "";
        COMPANY_ID: string = "";
        ID_TYPE: string = "";
        ID: string = "";
        M_TEL: string = "";
        ID_IMG_1: string = "";
        ID_IMG_2: string = "";
        ID_IMG_3: string = "";
        FACE_FLAG: string = "";
        CHECK_STR: string = "";
        NEW_CAPITAL_PWD: string = "";
        NEW_TRD_PWD: string = "";
        XID_SESSION: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPResetPasswordReq";
        protected static _classname = "JV.TPResetPasswordReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPResetPasswordReq;
            tmp.USER_ID = is.readString(0, false, "");
            tmp.ACCOUNT = is.readString(1, false, "");
            tmp.COMPANY_ID = is.readString(2, false, "");
            tmp.ID_TYPE = is.readString(3, false, "");
            tmp.ID = is.readString(4, false, "");
            tmp.M_TEL = is.readString(5, false, "");
            tmp.ID_IMG_1 = is.readString(6, false, "");
            tmp.ID_IMG_2 = is.readString(7, false, "");
            tmp.ID_IMG_3 = is.readString(8, false, "");
            tmp.FACE_FLAG = is.readString(9, false, "");
            tmp.CHECK_STR = is.readString(10, false, "");
            tmp.NEW_CAPITAL_PWD = is.readString(11, false, "");
            tmp.NEW_TRD_PWD = is.readString(12, false, "");
            tmp.XID_SESSION = is.readString(13, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.USER_ID);
            os.writeString(1, this.ACCOUNT);
            os.writeString(2, this.COMPANY_ID);
            os.writeString(3, this.ID_TYPE);
            os.writeString(4, this.ID);
            os.writeString(5, this.M_TEL);
            os.writeString(6, this.ID_IMG_1);
            os.writeString(7, this.ID_IMG_2);
            os.writeString(8, this.ID_IMG_3);
            os.writeString(9, this.FACE_FLAG);
            os.writeString(10, this.CHECK_STR);
            os.writeString(11, this.NEW_CAPITAL_PWD);
            os.writeString(12, this.NEW_TRD_PWD);
            os.writeString(13, this.XID_SESSION);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPResetPasswordReq.Object { 
            return {
                USER_ID: this.USER_ID,
                ACCOUNT: this.ACCOUNT,
                COMPANY_ID: this.COMPANY_ID,
                ID_TYPE: this.ID_TYPE,
                ID: this.ID,
                M_TEL: this.M_TEL,
                ID_IMG_1: this.ID_IMG_1,
                ID_IMG_2: this.ID_IMG_2,
                ID_IMG_3: this.ID_IMG_3,
                FACE_FLAG: this.FACE_FLAG,
                CHECK_STR: this.CHECK_STR,
                NEW_CAPITAL_PWD: this.NEW_CAPITAL_PWD,
                NEW_TRD_PWD: this.NEW_TRD_PWD,
                XID_SESSION: this.XID_SESSION
            };
        }

        readFromObject(json: TPResetPasswordReq.Object) { 
            _hasOwnProperty.call(json, "USER_ID") && (this.USER_ID = json.USER_ID!);
            _hasOwnProperty.call(json, "ACCOUNT") && (this.ACCOUNT = json.ACCOUNT!);
            _hasOwnProperty.call(json, "COMPANY_ID") && (this.COMPANY_ID = json.COMPANY_ID!);
            _hasOwnProperty.call(json, "ID_TYPE") && (this.ID_TYPE = json.ID_TYPE!);
            _hasOwnProperty.call(json, "ID") && (this.ID = json.ID!);
            _hasOwnProperty.call(json, "M_TEL") && (this.M_TEL = json.M_TEL!);
            _hasOwnProperty.call(json, "ID_IMG_1") && (this.ID_IMG_1 = json.ID_IMG_1!);
            _hasOwnProperty.call(json, "ID_IMG_2") && (this.ID_IMG_2 = json.ID_IMG_2!);
            _hasOwnProperty.call(json, "ID_IMG_3") && (this.ID_IMG_3 = json.ID_IMG_3!);
            _hasOwnProperty.call(json, "FACE_FLAG") && (this.FACE_FLAG = json.FACE_FLAG!);
            _hasOwnProperty.call(json, "CHECK_STR") && (this.CHECK_STR = json.CHECK_STR!);
            _hasOwnProperty.call(json, "NEW_CAPITAL_PWD") && (this.NEW_CAPITAL_PWD = json.NEW_CAPITAL_PWD!);
            _hasOwnProperty.call(json, "NEW_TRD_PWD") && (this.NEW_TRD_PWD = json.NEW_TRD_PWD!);
            _hasOwnProperty.call(json, "XID_SESSION") && (this.XID_SESSION = json.XID_SESSION!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPResetPasswordReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPResetPasswordReq._readFrom(is);
        }
    }

    export namespace TPResetPasswordReq {
        export interface Object {
            USER_ID?: string;
            ACCOUNT?: string;
            COMPANY_ID?: string;
            ID_TYPE?: string;
            ID?: string;
            M_TEL?: string;
            ID_IMG_1?: string;
            ID_IMG_2?: string;
            ID_IMG_3?: string;
            FACE_FLAG?: string;
            CHECK_STR?: string;
            NEW_CAPITAL_PWD?: string;
            NEW_TRD_PWD?: string;
            XID_SESSION?: string;
        }
    }

    export class TPResetPasswordRsp {
        original_code: string = "";
        original_msg: string = "";
        convert_code: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPResetPasswordRsp";
        protected static _classname = "JV.TPResetPasswordRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPResetPasswordRsp;
            tmp.original_code = is.readString(0, false, "");
            tmp.original_msg = is.readString(1, false, "");
            tmp.convert_code = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.convert_code);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPResetPasswordRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                convert_code: this.convert_code
            };
        }

        readFromObject(json: TPResetPasswordRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "convert_code") && (this.convert_code = json.convert_code!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPResetPasswordRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPResetPasswordRsp._readFrom(is);
        }
    }

    export namespace TPResetPasswordRsp {
        export interface Object {
            original_code?: string;
            original_msg?: string;
            convert_code?: string;
        }
    }

    export class TPQryResetPasswordReq {
        USER_ID: string = "";
        ACCOUNT: string = "";
        COMPANY_ID: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryResetPasswordReq";
        protected static _classname = "JV.TPQryResetPasswordReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryResetPasswordReq;
            tmp.USER_ID = is.readString(0, false, "");
            tmp.ACCOUNT = is.readString(1, false, "");
            tmp.COMPANY_ID = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.USER_ID);
            os.writeString(1, this.ACCOUNT);
            os.writeString(2, this.COMPANY_ID);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryResetPasswordReq.Object { 
            return {
                USER_ID: this.USER_ID,
                ACCOUNT: this.ACCOUNT,
                COMPANY_ID: this.COMPANY_ID
            };
        }

        readFromObject(json: TPQryResetPasswordReq.Object) { 
            _hasOwnProperty.call(json, "USER_ID") && (this.USER_ID = json.USER_ID!);
            _hasOwnProperty.call(json, "ACCOUNT") && (this.ACCOUNT = json.ACCOUNT!);
            _hasOwnProperty.call(json, "COMPANY_ID") && (this.COMPANY_ID = json.COMPANY_ID!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryResetPasswordReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryResetPasswordReq._readFrom(is);
        }
    }

    export namespace TPQryResetPasswordReq {
        export interface Object {
            USER_ID?: string;
            ACCOUNT?: string;
            COMPANY_ID?: string;
        }
    }

    export class TPQryResetPasswordRsp {
        original_code: string = "";
        original_msg: string = "";
        convert_code: string = "";
        RESET_TYPE: string = "";
        STATUS: string = "";
        FAIL_TEXT: string = "";
        FAIL_REASON: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryResetPasswordRsp";
        protected static _classname = "JV.TPQryResetPasswordRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryResetPasswordRsp;
            tmp.original_code = is.readString(0, false, "");
            tmp.original_msg = is.readString(1, false, "");
            tmp.convert_code = is.readString(2, false, "");
            tmp.RESET_TYPE = is.readString(3, false, "");
            tmp.STATUS = is.readString(4, false, "");
            tmp.FAIL_TEXT = is.readString(5, false, "");
            tmp.FAIL_REASON = is.readString(6, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.convert_code);
            os.writeString(3, this.RESET_TYPE);
            os.writeString(4, this.STATUS);
            os.writeString(5, this.FAIL_TEXT);
            os.writeString(6, this.FAIL_REASON);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryResetPasswordRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                convert_code: this.convert_code,
                RESET_TYPE: this.RESET_TYPE,
                STATUS: this.STATUS,
                FAIL_TEXT: this.FAIL_TEXT,
                FAIL_REASON: this.FAIL_REASON
            };
        }

        readFromObject(json: TPQryResetPasswordRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "convert_code") && (this.convert_code = json.convert_code!);
            _hasOwnProperty.call(json, "RESET_TYPE") && (this.RESET_TYPE = json.RESET_TYPE!);
            _hasOwnProperty.call(json, "STATUS") && (this.STATUS = json.STATUS!);
            _hasOwnProperty.call(json, "FAIL_TEXT") && (this.FAIL_TEXT = json.FAIL_TEXT!);
            _hasOwnProperty.call(json, "FAIL_REASON") && (this.FAIL_REASON = json.FAIL_REASON!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryResetPasswordRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryResetPasswordRsp._readFrom(is);
        }
    }

    export namespace TPQryResetPasswordRsp {
        export interface Object {
            original_code?: string;
            original_msg?: string;
            convert_code?: string;
            RESET_TYPE?: string;
            STATUS?: string;
            FAIL_TEXT?: string;
            FAIL_REASON?: string;
        }
    }

    export class TPUpdateIDCardReq {
        USER_ID: string = "";
        ACCOUNT: string = "";
        COMPANY_ID: string = "";
        SESSION: string = "";
        ID_TYPE: string = "";
        ID_NAME: string = "";
        ID_CODE: string = "";
        ID_ADDR: string = "";
        ID_BEG_DATE: string = "";
        ID_EXP_DATE: string = "";
        ID_ZIP_CODE: string = "";
        ID_IMG_1: string = "";
        ID_IMG_2: string = "";
        ID_IMG_3: string = "";
        SEX: string = "";
        ISSUE_AUTHORITY: string = "";
        BRITH_DATE: string = "";
        NATION: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPUpdateIDCardReq";
        protected static _classname = "JV.TPUpdateIDCardReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPUpdateIDCardReq;
            tmp.USER_ID = is.readString(0, false, "");
            tmp.ACCOUNT = is.readString(1, false, "");
            tmp.COMPANY_ID = is.readString(2, false, "");
            tmp.SESSION = is.readString(3, false, "");
            tmp.ID_TYPE = is.readString(4, false, "");
            tmp.ID_NAME = is.readString(5, false, "");
            tmp.ID_CODE = is.readString(6, false, "");
            tmp.ID_ADDR = is.readString(7, false, "");
            tmp.ID_BEG_DATE = is.readString(8, false, "");
            tmp.ID_EXP_DATE = is.readString(9, false, "");
            tmp.ID_ZIP_CODE = is.readString(10, false, "");
            tmp.ID_IMG_1 = is.readString(11, false, "");
            tmp.ID_IMG_2 = is.readString(12, false, "");
            tmp.ID_IMG_3 = is.readString(13, false, "");
            tmp.SEX = is.readString(14, false, "");
            tmp.ISSUE_AUTHORITY = is.readString(15, false, "");
            tmp.BRITH_DATE = is.readString(16, false, "");
            tmp.NATION = is.readString(17, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.USER_ID);
            os.writeString(1, this.ACCOUNT);
            os.writeString(2, this.COMPANY_ID);
            os.writeString(3, this.SESSION);
            os.writeString(4, this.ID_TYPE);
            os.writeString(5, this.ID_NAME);
            os.writeString(6, this.ID_CODE);
            os.writeString(7, this.ID_ADDR);
            os.writeString(8, this.ID_BEG_DATE);
            os.writeString(9, this.ID_EXP_DATE);
            os.writeString(10, this.ID_ZIP_CODE);
            os.writeString(11, this.ID_IMG_1);
            os.writeString(12, this.ID_IMG_2);
            os.writeString(13, this.ID_IMG_3);
            os.writeString(14, this.SEX);
            os.writeString(15, this.ISSUE_AUTHORITY);
            os.writeString(16, this.BRITH_DATE);
            os.writeString(17, this.NATION);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPUpdateIDCardReq.Object { 
            return {
                USER_ID: this.USER_ID,
                ACCOUNT: this.ACCOUNT,
                COMPANY_ID: this.COMPANY_ID,
                SESSION: this.SESSION,
                ID_TYPE: this.ID_TYPE,
                ID_NAME: this.ID_NAME,
                ID_CODE: this.ID_CODE,
                ID_ADDR: this.ID_ADDR,
                ID_BEG_DATE: this.ID_BEG_DATE,
                ID_EXP_DATE: this.ID_EXP_DATE,
                ID_ZIP_CODE: this.ID_ZIP_CODE,
                ID_IMG_1: this.ID_IMG_1,
                ID_IMG_2: this.ID_IMG_2,
                ID_IMG_3: this.ID_IMG_3,
                SEX: this.SEX,
                ISSUE_AUTHORITY: this.ISSUE_AUTHORITY,
                BRITH_DATE: this.BRITH_DATE,
                NATION: this.NATION
            };
        }

        readFromObject(json: TPUpdateIDCardReq.Object) { 
            _hasOwnProperty.call(json, "USER_ID") && (this.USER_ID = json.USER_ID!);
            _hasOwnProperty.call(json, "ACCOUNT") && (this.ACCOUNT = json.ACCOUNT!);
            _hasOwnProperty.call(json, "COMPANY_ID") && (this.COMPANY_ID = json.COMPANY_ID!);
            _hasOwnProperty.call(json, "SESSION") && (this.SESSION = json.SESSION!);
            _hasOwnProperty.call(json, "ID_TYPE") && (this.ID_TYPE = json.ID_TYPE!);
            _hasOwnProperty.call(json, "ID_NAME") && (this.ID_NAME = json.ID_NAME!);
            _hasOwnProperty.call(json, "ID_CODE") && (this.ID_CODE = json.ID_CODE!);
            _hasOwnProperty.call(json, "ID_ADDR") && (this.ID_ADDR = json.ID_ADDR!);
            _hasOwnProperty.call(json, "ID_BEG_DATE") && (this.ID_BEG_DATE = json.ID_BEG_DATE!);
            _hasOwnProperty.call(json, "ID_EXP_DATE") && (this.ID_EXP_DATE = json.ID_EXP_DATE!);
            _hasOwnProperty.call(json, "ID_ZIP_CODE") && (this.ID_ZIP_CODE = json.ID_ZIP_CODE!);
            _hasOwnProperty.call(json, "ID_IMG_1") && (this.ID_IMG_1 = json.ID_IMG_1!);
            _hasOwnProperty.call(json, "ID_IMG_2") && (this.ID_IMG_2 = json.ID_IMG_2!);
            _hasOwnProperty.call(json, "ID_IMG_3") && (this.ID_IMG_3 = json.ID_IMG_3!);
            _hasOwnProperty.call(json, "SEX") && (this.SEX = json.SEX!);
            _hasOwnProperty.call(json, "ISSUE_AUTHORITY") && (this.ISSUE_AUTHORITY = json.ISSUE_AUTHORITY!);
            _hasOwnProperty.call(json, "BRITH_DATE") && (this.BRITH_DATE = json.BRITH_DATE!);
            _hasOwnProperty.call(json, "NATION") && (this.NATION = json.NATION!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPUpdateIDCardReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPUpdateIDCardReq._readFrom(is);
        }
    }

    export namespace TPUpdateIDCardReq {
        export interface Object {
            USER_ID?: string;
            ACCOUNT?: string;
            COMPANY_ID?: string;
            SESSION?: string;
            ID_TYPE?: string;
            ID_NAME?: string;
            ID_CODE?: string;
            ID_ADDR?: string;
            ID_BEG_DATE?: string;
            ID_EXP_DATE?: string;
            ID_ZIP_CODE?: string;
            ID_IMG_1?: string;
            ID_IMG_2?: string;
            ID_IMG_3?: string;
            SEX?: string;
            ISSUE_AUTHORITY?: string;
            BRITH_DATE?: string;
            NATION?: string;
        }
    }

    export class TPUpdateIDCardRsp {
        original_code: string = "";
        original_msg: string = "";
        convert_code: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPUpdateIDCardRsp";
        protected static _classname = "JV.TPUpdateIDCardRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPUpdateIDCardRsp;
            tmp.original_code = is.readString(0, false, "");
            tmp.original_msg = is.readString(1, false, "");
            tmp.convert_code = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.convert_code);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPUpdateIDCardRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                convert_code: this.convert_code
            };
        }

        readFromObject(json: TPUpdateIDCardRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "convert_code") && (this.convert_code = json.convert_code!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPUpdateIDCardRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPUpdateIDCardRsp._readFrom(is);
        }
    }

    export namespace TPUpdateIDCardRsp {
        export interface Object {
            original_code?: string;
            original_msg?: string;
            convert_code?: string;
        }
    }

    export class TPQryUpdateIDCardReq {
        USER_ID: string = "";
        ACCOUNT: string = "";
        COMPANY_ID: string = "";
        SESSION: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUpdateIDCardReq";
        protected static _classname = "JV.TPQryUpdateIDCardReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUpdateIDCardReq;
            tmp.USER_ID = is.readString(0, false, "");
            tmp.ACCOUNT = is.readString(1, false, "");
            tmp.COMPANY_ID = is.readString(2, false, "");
            tmp.SESSION = is.readString(3, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.USER_ID);
            os.writeString(1, this.ACCOUNT);
            os.writeString(2, this.COMPANY_ID);
            os.writeString(3, this.SESSION);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUpdateIDCardReq.Object { 
            return {
                USER_ID: this.USER_ID,
                ACCOUNT: this.ACCOUNT,
                COMPANY_ID: this.COMPANY_ID,
                SESSION: this.SESSION
            };
        }

        readFromObject(json: TPQryUpdateIDCardReq.Object) { 
            _hasOwnProperty.call(json, "USER_ID") && (this.USER_ID = json.USER_ID!);
            _hasOwnProperty.call(json, "ACCOUNT") && (this.ACCOUNT = json.ACCOUNT!);
            _hasOwnProperty.call(json, "COMPANY_ID") && (this.COMPANY_ID = json.COMPANY_ID!);
            _hasOwnProperty.call(json, "SESSION") && (this.SESSION = json.SESSION!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUpdateIDCardReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUpdateIDCardReq._readFrom(is);
        }
    }

    export namespace TPQryUpdateIDCardReq {
        export interface Object {
            USER_ID?: string;
            ACCOUNT?: string;
            COMPANY_ID?: string;
            SESSION?: string;
        }
    }

    export class TPQryUpdateIDCardRsp {
        original_code: string = "";
        original_msg: string = "";
        convert_code: string = "";
        STATUS: string = "";
        FAIL_TEXT: string = "";
        FAIL_REASON: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPQryUpdateIDCardRsp";
        protected static _classname = "JV.TPQryUpdateIDCardRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPQryUpdateIDCardRsp;
            tmp.original_code = is.readString(0, false, "");
            tmp.original_msg = is.readString(1, false, "");
            tmp.convert_code = is.readString(2, false, "");
            tmp.STATUS = is.readString(3, false, "");
            tmp.FAIL_TEXT = is.readString(4, false, "");
            tmp.FAIL_REASON = is.readString(5, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.convert_code);
            os.writeString(3, this.STATUS);
            os.writeString(4, this.FAIL_TEXT);
            os.writeString(5, this.FAIL_REASON);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPQryUpdateIDCardRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                convert_code: this.convert_code,
                STATUS: this.STATUS,
                FAIL_TEXT: this.FAIL_TEXT,
                FAIL_REASON: this.FAIL_REASON
            };
        }

        readFromObject(json: TPQryUpdateIDCardRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "convert_code") && (this.convert_code = json.convert_code!);
            _hasOwnProperty.call(json, "STATUS") && (this.STATUS = json.STATUS!);
            _hasOwnProperty.call(json, "FAIL_TEXT") && (this.FAIL_TEXT = json.FAIL_TEXT!);
            _hasOwnProperty.call(json, "FAIL_REASON") && (this.FAIL_REASON = json.FAIL_REASON!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPQryUpdateIDCardRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPQryUpdateIDCardRsp._readFrom(is);
        }
    }

    export namespace TPQryUpdateIDCardRsp {
        export interface Object {
            original_code?: string;
            original_msg?: string;
            convert_code?: string;
            STATUS?: string;
            FAIL_TEXT?: string;
            FAIL_REASON?: string;
        }
    }

    export class TPWZQUpdateUserInfoReq {
        USER_ID: string = "";
        ACCOUNT: string = "";
        COMPANY_ID: string = "";
        SESSION: string = "";
        EDUCATION: string = "";
        OCCU_TYPE: string = "";
        M_TEL: string = "";
        SMS_CODE: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPWZQUpdateUserInfoReq";
        protected static _classname = "JV.TPWZQUpdateUserInfoReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPWZQUpdateUserInfoReq;
            tmp.USER_ID = is.readString(0, false, "");
            tmp.ACCOUNT = is.readString(1, false, "");
            tmp.COMPANY_ID = is.readString(2, false, "");
            tmp.SESSION = is.readString(3, false, "");
            tmp.EDUCATION = is.readString(4, false, "");
            tmp.OCCU_TYPE = is.readString(5, false, "");
            tmp.M_TEL = is.readString(6, false, "");
            tmp.SMS_CODE = is.readString(7, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.USER_ID);
            os.writeString(1, this.ACCOUNT);
            os.writeString(2, this.COMPANY_ID);
            os.writeString(3, this.SESSION);
            os.writeString(4, this.EDUCATION);
            os.writeString(5, this.OCCU_TYPE);
            os.writeString(6, this.M_TEL);
            os.writeString(7, this.SMS_CODE);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPWZQUpdateUserInfoReq.Object { 
            return {
                USER_ID: this.USER_ID,
                ACCOUNT: this.ACCOUNT,
                COMPANY_ID: this.COMPANY_ID,
                SESSION: this.SESSION,
                EDUCATION: this.EDUCATION,
                OCCU_TYPE: this.OCCU_TYPE,
                M_TEL: this.M_TEL,
                SMS_CODE: this.SMS_CODE
            };
        }

        readFromObject(json: TPWZQUpdateUserInfoReq.Object) { 
            _hasOwnProperty.call(json, "USER_ID") && (this.USER_ID = json.USER_ID!);
            _hasOwnProperty.call(json, "ACCOUNT") && (this.ACCOUNT = json.ACCOUNT!);
            _hasOwnProperty.call(json, "COMPANY_ID") && (this.COMPANY_ID = json.COMPANY_ID!);
            _hasOwnProperty.call(json, "SESSION") && (this.SESSION = json.SESSION!);
            _hasOwnProperty.call(json, "EDUCATION") && (this.EDUCATION = json.EDUCATION!);
            _hasOwnProperty.call(json, "OCCU_TYPE") && (this.OCCU_TYPE = json.OCCU_TYPE!);
            _hasOwnProperty.call(json, "M_TEL") && (this.M_TEL = json.M_TEL!);
            _hasOwnProperty.call(json, "SMS_CODE") && (this.SMS_CODE = json.SMS_CODE!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPWZQUpdateUserInfoReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPWZQUpdateUserInfoReq._readFrom(is);
        }
    }

    export namespace TPWZQUpdateUserInfoReq {
        export interface Object {
            USER_ID?: string;
            ACCOUNT?: string;
            COMPANY_ID?: string;
            SESSION?: string;
            EDUCATION?: string;
            OCCU_TYPE?: string;
            M_TEL?: string;
            SMS_CODE?: string;
        }
    }

    export class TPWZQUpdateUserInfoRsp {
        original_code: number = 0;
        original_msg: string = "";
        convert_code: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TPWZQUpdateUserInfoRsp";
        protected static _classname = "JV.TPWZQUpdateUserInfoRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TPWZQUpdateUserInfoRsp;
            tmp.original_code = is.readInt32(0, false, 0);
            tmp.original_msg = is.readString(1, false, "");
            tmp.convert_code = is.readString(2, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeInt32(0, this.original_code);
            os.writeString(1, this.original_msg);
            os.writeString(2, this.convert_code);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TPWZQUpdateUserInfoRsp.Object { 
            return {
                original_code: this.original_code,
                original_msg: this.original_msg,
                convert_code: this.convert_code
            };
        }

        readFromObject(json: TPWZQUpdateUserInfoRsp.Object) { 
            _hasOwnProperty.call(json, "original_code") && (this.original_code = json.original_code!);
            _hasOwnProperty.call(json, "original_msg") && (this.original_msg = json.original_msg!);
            _hasOwnProperty.call(json, "convert_code") && (this.convert_code = json.convert_code!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TPWZQUpdateUserInfoRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TPWZQUpdateUserInfoRsp._readFrom(is);
        }
    }

    export namespace TPWZQUpdateUserInfoRsp {
        export interface Object {
            original_code?: number;
            original_msg?: string;
            convert_code?: string;
        }
    }

    export class TAddWhiteListReq {
        name: string = "";
        id_type: number = 0;
        id_card: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAddWhiteListReq";
        protected static _classname = "JV.TAddWhiteListReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAddWhiteListReq;
            tmp.name = is.readString(0, true, "");
            tmp.id_type = is.readInt32(1, true, 0);
            tmp.id_card = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.name);
            os.writeInt32(1, this.id_type);
            os.writeString(2, this.id_card);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAddWhiteListReq.Object { 
            return {
                name: this.name,
                id_type: this.id_type,
                id_card: this.id_card
            };
        }

        readFromObject(json: TAddWhiteListReq.Object) { 
            _hasOwnProperty.call(json, "name") && (this.name = json.name);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type);
            _hasOwnProperty.call(json, "id_card") && (this.id_card = json.id_card);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAddWhiteListReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAddWhiteListReq._readFrom(is);
        }
    }

    export namespace TAddWhiteListReq {
        export interface Object {
            name: string;
            id_type: number;
            id_card: string;
        }
    }

    export class TAddWhiteListRsp {
        msg_no: string = "";
        ret_code: number = 0;
        ret_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TAddWhiteListRsp";
        protected static _classname = "JV.TAddWhiteListRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TAddWhiteListRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.ret_code = is.readInt32(1, true, 0);
            tmp.ret_msg = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.ret_code);
            os.writeString(2, this.ret_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TAddWhiteListRsp.Object { 
            return {
                msg_no: this.msg_no,
                ret_code: this.ret_code,
                ret_msg: this.ret_msg
            };
        }

        readFromObject(json: TAddWhiteListRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "ret_code") && (this.ret_code = json.ret_code);
            _hasOwnProperty.call(json, "ret_msg") && (this.ret_msg = json.ret_msg);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TAddWhiteListRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TAddWhiteListRsp._readFrom(is);
        }
    }

    export namespace TAddWhiteListRsp {
        export interface Object {
            msg_no?: string;
            ret_code: number;
            ret_msg: string;
        }
    }

    export class TDeleteWhiteListReq {
        name: string = "";
        id_type: number = 0;
        id_card: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TDeleteWhiteListReq";
        protected static _classname = "JV.TDeleteWhiteListReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TDeleteWhiteListReq;
            tmp.name = is.readString(0, true, "");
            tmp.id_type = is.readInt32(1, true, 0);
            tmp.id_card = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.name);
            os.writeInt32(1, this.id_type);
            os.writeString(2, this.id_card);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TDeleteWhiteListReq.Object { 
            return {
                name: this.name,
                id_type: this.id_type,
                id_card: this.id_card
            };
        }

        readFromObject(json: TDeleteWhiteListReq.Object) { 
            _hasOwnProperty.call(json, "name") && (this.name = json.name);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type);
            _hasOwnProperty.call(json, "id_card") && (this.id_card = json.id_card);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TDeleteWhiteListReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TDeleteWhiteListReq._readFrom(is);
        }
    }

    export namespace TDeleteWhiteListReq {
        export interface Object {
            name: string;
            id_type: number;
            id_card: string;
        }
    }

    export class TDeleteWhiteListRsp {
        msg_no: string = "";
        ret_code: number = 0;
        ret_msg: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TDeleteWhiteListRsp";
        protected static _classname = "JV.TDeleteWhiteListRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TDeleteWhiteListRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.ret_code = is.readInt32(1, true, 0);
            tmp.ret_msg = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.ret_code);
            os.writeString(2, this.ret_msg);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TDeleteWhiteListRsp.Object { 
            return {
                msg_no: this.msg_no,
                ret_code: this.ret_code,
                ret_msg: this.ret_msg
            };
        }

        readFromObject(json: TDeleteWhiteListRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "ret_code") && (this.ret_code = json.ret_code);
            _hasOwnProperty.call(json, "ret_msg") && (this.ret_msg = json.ret_msg);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TDeleteWhiteListRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TDeleteWhiteListRsp._readFrom(is);
        }
    }

    export namespace TDeleteWhiteListRsp {
        export interface Object {
            msg_no?: string;
            ret_code: number;
            ret_msg: string;
        }
    }

    export class TQueryWhiteListReq {
        name: string = "";
        id_type: number = 0;
        id_card: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryWhiteListReq";
        protected static _classname = "JV.TQueryWhiteListReq";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryWhiteListReq;
            tmp.name = is.readString(0, true, "");
            tmp.id_type = is.readInt32(1, true, 0);
            tmp.id_card = is.readString(2, true, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.name);
            os.writeInt32(1, this.id_type);
            os.writeString(2, this.id_card);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryWhiteListReq.Object { 
            return {
                name: this.name,
                id_type: this.id_type,
                id_card: this.id_card
            };
        }

        readFromObject(json: TQueryWhiteListReq.Object) { 
            _hasOwnProperty.call(json, "name") && (this.name = json.name);
            _hasOwnProperty.call(json, "id_type") && (this.id_type = json.id_type);
            _hasOwnProperty.call(json, "id_card") && (this.id_card = json.id_card);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryWhiteListReq();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryWhiteListReq._readFrom(is);
        }
    }

    export namespace TQueryWhiteListReq {
        export interface Object {
            name: string;
            id_type: number;
            id_card: string;
        }
    }

    export class TQueryWhiteListRsp {
        msg_no: string = "";
        ret_code: number = 0;
        ret_msg: string = "";
        query_state: string = "";
        query_result: string = "";

        protected _proto_struct_name_ = "";
        protected _classname = "JV.TQueryWhiteListRsp";
        protected static _classname = "JV.TQueryWhiteListRsp";
        protected static _write(os: TarsStream.TarsOutputStream, tag: number, val: any) { os.writeStruct(tag, val); }
        protected static _read(is: TarsStream.TarsInputStream, tag: number, def?: any) { return is.readStruct(tag, true, def); }
        protected static _readFrom(is: TarsStream.TarsInputStream) {
            const tmp = new TQueryWhiteListRsp;
            tmp.msg_no = is.readString(0, false, "");
            tmp.ret_code = is.readInt32(1, true, 0);
            tmp.ret_msg = is.readString(2, true, "");
            tmp.query_state = is.readString(3, true, "");
            tmp.query_result = is.readString(4, false, "");
            return tmp;
        }

        protected _writeTo(os: TarsStream.TarsOutputStream) {
            os.writeString(0, this.msg_no);
            os.writeInt32(1, this.ret_code);
            os.writeString(2, this.ret_msg);
            os.writeString(3, this.query_state);
            os.writeString(4, this.query_result);
        }

        protected _equal() {
            assert.fail("this structure not define key operation");
        }

        protected _genKey() {
            if (!this._proto_struct_name_) {
                this._proto_struct_name_ = "STRUCT" + Math.random();
            }
            return this._proto_struct_name_;
        }

        toObject(): TQueryWhiteListRsp.Object { 
            return {
                msg_no: this.msg_no,
                ret_code: this.ret_code,
                ret_msg: this.ret_msg,
                query_state: this.query_state,
                query_result: this.query_result
            };
        }

        readFromObject(json: TQueryWhiteListRsp.Object) { 
            _hasOwnProperty.call(json, "msg_no") && (this.msg_no = json.msg_no!);
            _hasOwnProperty.call(json, "ret_code") && (this.ret_code = json.ret_code);
            _hasOwnProperty.call(json, "ret_msg") && (this.ret_msg = json.ret_msg);
            _hasOwnProperty.call(json, "query_state") && (this.query_state = json.query_state);
            _hasOwnProperty.call(json, "query_result") && (this.query_result = json.query_result!);
            return this;
        }

        toBinBuffer() {
            const os = new TarsStream.TarsOutputStream();
            this._writeTo(os);
            return os.getBinBuffer();
        }

        static new() {
            return new TQueryWhiteListRsp();
        }

        static create(is: TarsStream.TarsInputStream) {
            return JV.TQueryWhiteListRsp._readFrom(is);
        }
    }

    export namespace TQueryWhiteListRsp {
        export interface Object {
            msg_no?: string;
            ret_code: number;
            ret_msg: string;
            query_state: string;
            query_result?: string;
        }
    }

    export class ZtAcctTradeProxyServantProxy {
        protected _name!: string
        protected _worker!: TarsRpc.ObjectProxy

        setTimeout (iTimeout: number) { this._worker.timeout = iTimeout; }
        getTimeout () { return this._worker.timeout; }
        setVersion (iVersion: number) { this._worker.version = iVersion; }
        getVersion () { return this._worker.version; }

        static QueryUserCapitalOprationStatus = _castFunctionInfo({
            name: "QueryUserCapitalOprationStatus",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TQueryUserCapitalOprationStatusReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TQueryUserCapitalOprationStatusRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TQueryUserCapitalOprationStatusReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TQueryUserCapitalOprationStatusRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TQueryUserCapitalOprationStatusReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TQueryUserCapitalOprationStatusRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::QueryUserCapitalOprationStatus failed");
            }
        })

        QueryUserCapitalOprationStatus(req: JV.TQueryUserCapitalOprationStatusReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("QueryUserCapitalOprationStatus", ZtAcctTradeProxyServantProxy.QueryUserCapitalOprationStatus.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.QueryUserCapitalOprationStatus).then(ZtAcctTradeProxyServantProxy.QueryUserCapitalOprationStatus.tupDecoder, ZtAcctTradeProxyServantProxy.QueryUserCapitalOprationStatus.errorResponser);
            } else {
                return this._worker.tars_invoke("QueryUserCapitalOprationStatus", ZtAcctTradeProxyServantProxy.QueryUserCapitalOprationStatus.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.QueryUserCapitalOprationStatus).then(ZtAcctTradeProxyServantProxy.QueryUserCapitalOprationStatus.tarsDecoder, ZtAcctTradeProxyServantProxy.QueryUserCapitalOprationStatus.errorResponser);
            }
        }

        static addWhiteList = _castFunctionInfo({
            name: "addWhiteList",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TAddWhiteListReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TAddWhiteListRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TAddWhiteListReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TAddWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TAddWhiteListReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TAddWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::addWhiteList failed");
            }
        })

        addWhiteList(req: JV.TAddWhiteListReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("addWhiteList", ZtAcctTradeProxyServantProxy.addWhiteList.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.addWhiteList).then(ZtAcctTradeProxyServantProxy.addWhiteList.tupDecoder, ZtAcctTradeProxyServantProxy.addWhiteList.errorResponser);
            } else {
                return this._worker.tars_invoke("addWhiteList", ZtAcctTradeProxyServantProxy.addWhiteList.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.addWhiteList).then(ZtAcctTradeProxyServantProxy.addWhiteList.tarsDecoder, ZtAcctTradeProxyServantProxy.addWhiteList.errorResponser);
            }
        }

        static bindCapitalAcct = _castFunctionInfo({
            name: "bindCapitalAcct",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPBindCapitalAcctReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPBindCapitalAcctRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPBindCapitalAcctReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPBindCapitalAcctRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPBindCapitalAcctReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPBindCapitalAcctRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::bindCapitalAcct failed");
            }
        })

        bindCapitalAcct(req: JV.TPBindCapitalAcctReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("bindCapitalAcct", ZtAcctTradeProxyServantProxy.bindCapitalAcct.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.bindCapitalAcct).then(ZtAcctTradeProxyServantProxy.bindCapitalAcct.tupDecoder, ZtAcctTradeProxyServantProxy.bindCapitalAcct.errorResponser);
            } else {
                return this._worker.tars_invoke("bindCapitalAcct", ZtAcctTradeProxyServantProxy.bindCapitalAcct.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.bindCapitalAcct).then(ZtAcctTradeProxyServantProxy.bindCapitalAcct.tarsDecoder, ZtAcctTradeProxyServantProxy.bindCapitalAcct.errorResponser);
            }
        }

        static cancelUserFrozenOpration = _castFunctionInfo({
            name: "cancelUserFrozenOpration",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TcancelUserFrozenOprationReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TcancelUserFrozenOprationRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TcancelUserFrozenOprationReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TcancelUserFrozenOprationRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TcancelUserFrozenOprationReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TcancelUserFrozenOprationRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::cancelUserFrozenOpration failed");
            }
        })

        cancelUserFrozenOpration(req: JV.TcancelUserFrozenOprationReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("cancelUserFrozenOpration", ZtAcctTradeProxyServantProxy.cancelUserFrozenOpration.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.cancelUserFrozenOpration).then(ZtAcctTradeProxyServantProxy.cancelUserFrozenOpration.tupDecoder, ZtAcctTradeProxyServantProxy.cancelUserFrozenOpration.errorResponser);
            } else {
                return this._worker.tars_invoke("cancelUserFrozenOpration", ZtAcctTradeProxyServantProxy.cancelUserFrozenOpration.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.cancelUserFrozenOpration).then(ZtAcctTradeProxyServantProxy.cancelUserFrozenOpration.tarsDecoder, ZtAcctTradeProxyServantProxy.cancelUserFrozenOpration.errorResponser);
            }
        }

        static changeBindBank = _castFunctionInfo({
            name: "changeBindBank",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPChangeBindBankReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPChangeBindBankRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPChangeBindBankReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPChangeBindBankRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPChangeBindBankReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPChangeBindBankRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::changeBindBank failed");
            }
        })

        changeBindBank(req: JV.TPChangeBindBankReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("changeBindBank", ZtAcctTradeProxyServantProxy.changeBindBank.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.changeBindBank).then(ZtAcctTradeProxyServantProxy.changeBindBank.tupDecoder, ZtAcctTradeProxyServantProxy.changeBindBank.errorResponser);
            } else {
                return this._worker.tars_invoke("changeBindBank", ZtAcctTradeProxyServantProxy.changeBindBank.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.changeBindBank).then(ZtAcctTradeProxyServantProxy.changeBindBank.tarsDecoder, ZtAcctTradeProxyServantProxy.changeBindBank.errorResponser);
            }
        }

        static changePassword = _castFunctionInfo({
            name: "changePassword",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TChangePasswordReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TChangePasswordRsp",
                direction: "out"
            }],
            tarsEncoder(req: _TARS_MODULE_A_.JV.TChangePasswordReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, _TARS_MODULE_A_.JV.TChangePasswordRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: _TARS_MODULE_A_.JV.TChangePasswordReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", _TARS_MODULE_A_.JV.TChangePasswordRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::changePassword failed");
            }
        })

        changePassword(req: _TARS_MODULE_A_.JV.TChangePasswordReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("changePassword", ZtAcctTradeProxyServantProxy.changePassword.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.changePassword).then(ZtAcctTradeProxyServantProxy.changePassword.tupDecoder, ZtAcctTradeProxyServantProxy.changePassword.errorResponser);
            } else {
                return this._worker.tars_invoke("changePassword", ZtAcctTradeProxyServantProxy.changePassword.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.changePassword).then(ZtAcctTradeProxyServantProxy.changePassword.tarsDecoder, ZtAcctTradeProxyServantProxy.changePassword.errorResponser);
            }
        }

        static checkChangeBindBank = _castFunctionInfo({
            name: "checkChangeBindBank",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPCheckChangeBindBankReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPCheckChangeBindBankRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPCheckChangeBindBankReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPCheckChangeBindBankRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPCheckChangeBindBankReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPCheckChangeBindBankRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::checkChangeBindBank failed");
            }
        })

        checkChangeBindBank(req: JV.TPCheckChangeBindBankReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("checkChangeBindBank", ZtAcctTradeProxyServantProxy.checkChangeBindBank.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.checkChangeBindBank).then(ZtAcctTradeProxyServantProxy.checkChangeBindBank.tupDecoder, ZtAcctTradeProxyServantProxy.checkChangeBindBank.errorResponser);
            } else {
                return this._worker.tars_invoke("checkChangeBindBank", ZtAcctTradeProxyServantProxy.checkChangeBindBank.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.checkChangeBindBank).then(ZtAcctTradeProxyServantProxy.checkChangeBindBank.tarsDecoder, ZtAcctTradeProxyServantProxy.checkChangeBindBank.errorResponser);
            }
        }

        static checkFundPasswd = _castFunctionInfo({
            name: "checkFundPasswd",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TCheckTransPasswdReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TCheckTransPasswdRsp",
                direction: "out"
            }],
            tarsEncoder(req: _TARS_MODULE_A_.JV.TCheckTransPasswdReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, _TARS_MODULE_A_.JV.TCheckTransPasswdRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: _TARS_MODULE_A_.JV.TCheckTransPasswdReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", _TARS_MODULE_A_.JV.TCheckTransPasswdRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::checkFundPasswd failed");
            }
        })

        checkFundPasswd(req: _TARS_MODULE_A_.JV.TCheckTransPasswdReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("checkFundPasswd", ZtAcctTradeProxyServantProxy.checkFundPasswd.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.checkFundPasswd).then(ZtAcctTradeProxyServantProxy.checkFundPasswd.tupDecoder, ZtAcctTradeProxyServantProxy.checkFundPasswd.errorResponser);
            } else {
                return this._worker.tars_invoke("checkFundPasswd", ZtAcctTradeProxyServantProxy.checkFundPasswd.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.checkFundPasswd).then(ZtAcctTradeProxyServantProxy.checkFundPasswd.tarsDecoder, ZtAcctTradeProxyServantProxy.checkFundPasswd.errorResponser);
            }
        }

        static checkTransPasswd = _castFunctionInfo({
            name: "checkTransPasswd",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TCheckTransPasswdReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TCheckTransPasswdRsp",
                direction: "out"
            }],
            tarsEncoder(req: _TARS_MODULE_A_.JV.TCheckTransPasswdReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, _TARS_MODULE_A_.JV.TCheckTransPasswdRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: _TARS_MODULE_A_.JV.TCheckTransPasswdReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", _TARS_MODULE_A_.JV.TCheckTransPasswdRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::checkTransPasswd failed");
            }
        })

        checkTransPasswd(req: _TARS_MODULE_A_.JV.TCheckTransPasswdReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("checkTransPasswd", ZtAcctTradeProxyServantProxy.checkTransPasswd.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.checkTransPasswd).then(ZtAcctTradeProxyServantProxy.checkTransPasswd.tupDecoder, ZtAcctTradeProxyServantProxy.checkTransPasswd.errorResponser);
            } else {
                return this._worker.tars_invoke("checkTransPasswd", ZtAcctTradeProxyServantProxy.checkTransPasswd.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.checkTransPasswd).then(ZtAcctTradeProxyServantProxy.checkTransPasswd.tarsDecoder, ZtAcctTradeProxyServantProxy.checkTransPasswd.errorResponser);
            }
        }

        static commitQueryBankCardBalance = _castFunctionInfo({
            name: "commitQueryBankCardBalance",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TCommitQueryBankCardBalanceReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TCommitQueryBankCardBalanceRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TCommitQueryBankCardBalanceReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TCommitQueryBankCardBalanceRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TCommitQueryBankCardBalanceReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TCommitQueryBankCardBalanceRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::commitQueryBankCardBalance failed");
            }
        })

        commitQueryBankCardBalance(req: JV.TCommitQueryBankCardBalanceReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("commitQueryBankCardBalance", ZtAcctTradeProxyServantProxy.commitQueryBankCardBalance.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.commitQueryBankCardBalance).then(ZtAcctTradeProxyServantProxy.commitQueryBankCardBalance.tupDecoder, ZtAcctTradeProxyServantProxy.commitQueryBankCardBalance.errorResponser);
            } else {
                return this._worker.tars_invoke("commitQueryBankCardBalance", ZtAcctTradeProxyServantProxy.commitQueryBankCardBalance.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.commitQueryBankCardBalance).then(ZtAcctTradeProxyServantProxy.commitQueryBankCardBalance.tarsDecoder, ZtAcctTradeProxyServantProxy.commitQueryBankCardBalance.errorResponser);
            }
        }

        static deleteWhiteList = _castFunctionInfo({
            name: "deleteWhiteList",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TDeleteWhiteListReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TDeleteWhiteListRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TDeleteWhiteListReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TDeleteWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TDeleteWhiteListReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TDeleteWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::deleteWhiteList failed");
            }
        })

        deleteWhiteList(req: JV.TDeleteWhiteListReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("deleteWhiteList", ZtAcctTradeProxyServantProxy.deleteWhiteList.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.deleteWhiteList).then(ZtAcctTradeProxyServantProxy.deleteWhiteList.tupDecoder, ZtAcctTradeProxyServantProxy.deleteWhiteList.errorResponser);
            } else {
                return this._worker.tars_invoke("deleteWhiteList", ZtAcctTradeProxyServantProxy.deleteWhiteList.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.deleteWhiteList).then(ZtAcctTradeProxyServantProxy.deleteWhiteList.tarsDecoder, ZtAcctTradeProxyServantProxy.deleteWhiteList.errorResponser);
            }
        }

        static doQueryBankCardBalance = _castFunctionInfo({
            name: "doQueryBankCardBalance",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TDoQueryBankCardBalanceReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TDoQueryBankCardBalanceRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TDoQueryBankCardBalanceReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TDoQueryBankCardBalanceRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TDoQueryBankCardBalanceReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TDoQueryBankCardBalanceRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::doQueryBankCardBalance failed");
            }
        })

        doQueryBankCardBalance(req: JV.TDoQueryBankCardBalanceReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("doQueryBankCardBalance", ZtAcctTradeProxyServantProxy.doQueryBankCardBalance.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.doQueryBankCardBalance).then(ZtAcctTradeProxyServantProxy.doQueryBankCardBalance.tupDecoder, ZtAcctTradeProxyServantProxy.doQueryBankCardBalance.errorResponser);
            } else {
                return this._worker.tars_invoke("doQueryBankCardBalance", ZtAcctTradeProxyServantProxy.doQueryBankCardBalance.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.doQueryBankCardBalance).then(ZtAcctTradeProxyServantProxy.doQueryBankCardBalance.tarsDecoder, ZtAcctTradeProxyServantProxy.doQueryBankCardBalance.errorResponser);
            }
        }

        static frozenUserCapital = _castFunctionInfo({
            name: "frozenUserCapital",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TFrozenUserCapitalReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TFrozenUserCapitalRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TFrozenUserCapitalReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TFrozenUserCapitalRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TFrozenUserCapitalReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TFrozenUserCapitalRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::frozenUserCapital failed");
            }
        })

        frozenUserCapital(req: JV.TFrozenUserCapitalReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("frozenUserCapital", ZtAcctTradeProxyServantProxy.frozenUserCapital.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.frozenUserCapital).then(ZtAcctTradeProxyServantProxy.frozenUserCapital.tupDecoder, ZtAcctTradeProxyServantProxy.frozenUserCapital.errorResponser);
            } else {
                return this._worker.tars_invoke("frozenUserCapital", ZtAcctTradeProxyServantProxy.frozenUserCapital.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.frozenUserCapital).then(ZtAcctTradeProxyServantProxy.frozenUserCapital.tarsDecoder, ZtAcctTradeProxyServantProxy.frozenUserCapital.errorResponser);
            }
        }

        static frozenUserCapitalWithPwd = _castFunctionInfo({
            name: "frozenUserCapitalWithPwd",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TFrozenUserCapitalWithPwdReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TFrozenUserCapitalWithPwdRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TFrozenUserCapitalWithPwdReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TFrozenUserCapitalWithPwdRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TFrozenUserCapitalWithPwdReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TFrozenUserCapitalWithPwdRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::frozenUserCapitalWithPwd failed");
            }
        })

        frozenUserCapitalWithPwd(req: JV.TFrozenUserCapitalWithPwdReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("frozenUserCapitalWithPwd", ZtAcctTradeProxyServantProxy.frozenUserCapitalWithPwd.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.frozenUserCapitalWithPwd).then(ZtAcctTradeProxyServantProxy.frozenUserCapitalWithPwd.tupDecoder, ZtAcctTradeProxyServantProxy.frozenUserCapitalWithPwd.errorResponser);
            } else {
                return this._worker.tars_invoke("frozenUserCapitalWithPwd", ZtAcctTradeProxyServantProxy.frozenUserCapitalWithPwd.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.frozenUserCapitalWithPwd).then(ZtAcctTradeProxyServantProxy.frozenUserCapitalWithPwd.tarsDecoder, ZtAcctTradeProxyServantProxy.frozenUserCapitalWithPwd.errorResponser);
            }
        }

        static getOpenAcctState = _castFunctionInfo({
            name: "getOpenAcctState",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPGetOpenAcctStateReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPGetOpenAcctStateRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPGetOpenAcctStateReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPGetOpenAcctStateRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPGetOpenAcctStateReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPGetOpenAcctStateRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::getOpenAcctState failed");
            }
        })

        getOpenAcctState(req: JV.TPGetOpenAcctStateReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("getOpenAcctState", ZtAcctTradeProxyServantProxy.getOpenAcctState.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.getOpenAcctState).then(ZtAcctTradeProxyServantProxy.getOpenAcctState.tupDecoder, ZtAcctTradeProxyServantProxy.getOpenAcctState.errorResponser);
            } else {
                return this._worker.tars_invoke("getOpenAcctState", ZtAcctTradeProxyServantProxy.getOpenAcctState.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.getOpenAcctState).then(ZtAcctTradeProxyServantProxy.getOpenAcctState.tarsDecoder, ZtAcctTradeProxyServantProxy.getOpenAcctState.errorResponser);
            }
        }

        static loginBrokerSystem = _castFunctionInfo({
            name: "loginBrokerSystem",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPLoginBrokerReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPLoginBrokerRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPLoginBrokerReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPLoginBrokerRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPLoginBrokerReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPLoginBrokerRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::loginBrokerSystem failed");
            }
        })

        loginBrokerSystem(req: JV.TPLoginBrokerReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("loginBrokerSystem", ZtAcctTradeProxyServantProxy.loginBrokerSystem.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.loginBrokerSystem).then(ZtAcctTradeProxyServantProxy.loginBrokerSystem.tupDecoder, ZtAcctTradeProxyServantProxy.loginBrokerSystem.errorResponser);
            } else {
                return this._worker.tars_invoke("loginBrokerSystem", ZtAcctTradeProxyServantProxy.loginBrokerSystem.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.loginBrokerSystem).then(ZtAcctTradeProxyServantProxy.loginBrokerSystem.tarsDecoder, ZtAcctTradeProxyServantProxy.loginBrokerSystem.errorResponser);
            }
        }

        static openAcctBindBank = _castFunctionInfo({
            name: "openAcctBindBank",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPOpenAcctBindBankReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPOpenAcctBindBankRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPOpenAcctBindBankReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPOpenAcctBindBankRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPOpenAcctBindBankReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPOpenAcctBindBankRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::openAcctBindBank failed");
            }
        })

        openAcctBindBank(req: JV.TPOpenAcctBindBankReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("openAcctBindBank", ZtAcctTradeProxyServantProxy.openAcctBindBank.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.openAcctBindBank).then(ZtAcctTradeProxyServantProxy.openAcctBindBank.tupDecoder, ZtAcctTradeProxyServantProxy.openAcctBindBank.errorResponser);
            } else {
                return this._worker.tars_invoke("openAcctBindBank", ZtAcctTradeProxyServantProxy.openAcctBindBank.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.openAcctBindBank).then(ZtAcctTradeProxyServantProxy.openAcctBindBank.tarsDecoder, ZtAcctTradeProxyServantProxy.openAcctBindBank.errorResponser);
            }
        }

        static openAcctResurvey = _castFunctionInfo({
            name: "openAcctResurvey",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPOpenAcctResurveyReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPOpenAcctResurveyRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPOpenAcctResurveyReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPOpenAcctResurveyRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPOpenAcctResurveyReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPOpenAcctResurveyRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::openAcctResurvey failed");
            }
        })

        openAcctResurvey(req: JV.TPOpenAcctResurveyReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("openAcctResurvey", ZtAcctTradeProxyServantProxy.openAcctResurvey.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.openAcctResurvey).then(ZtAcctTradeProxyServantProxy.openAcctResurvey.tupDecoder, ZtAcctTradeProxyServantProxy.openAcctResurvey.errorResponser);
            } else {
                return this._worker.tars_invoke("openAcctResurvey", ZtAcctTradeProxyServantProxy.openAcctResurvey.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.openAcctResurvey).then(ZtAcctTradeProxyServantProxy.openAcctResurvey.tarsDecoder, ZtAcctTradeProxyServantProxy.openAcctResurvey.errorResponser);
            }
        }

        static openCapitalAcct = _castFunctionInfo({
            name: "openCapitalAcct",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPOpenCapiAcctReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPOpenCapiAcctRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPOpenCapiAcctReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPOpenCapiAcctRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPOpenCapiAcctReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPOpenCapiAcctRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::openCapitalAcct failed");
            }
        })

        openCapitalAcct(req: JV.TPOpenCapiAcctReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("openCapitalAcct", ZtAcctTradeProxyServantProxy.openCapitalAcct.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.openCapitalAcct).then(ZtAcctTradeProxyServantProxy.openCapitalAcct.tupDecoder, ZtAcctTradeProxyServantProxy.openCapitalAcct.errorResponser);
            } else {
                return this._worker.tars_invoke("openCapitalAcct", ZtAcctTradeProxyServantProxy.openCapitalAcct.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.openCapitalAcct).then(ZtAcctTradeProxyServantProxy.openCapitalAcct.tarsDecoder, ZtAcctTradeProxyServantProxy.openCapitalAcct.errorResponser);
            }
        }

        static openCapitalAcctV2 = _castFunctionInfo({
            name: "openCapitalAcctV2",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPOpenCapiAcctV2Req",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPOpenCapiAcctV2Rsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPOpenCapiAcctV2Req) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPOpenCapiAcctV2Rsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPOpenCapiAcctV2Req, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPOpenCapiAcctV2Rsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::openCapitalAcctV2 failed");
            }
        })

        openCapitalAcctV2(req: JV.TPOpenCapiAcctV2Req, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("openCapitalAcctV2", ZtAcctTradeProxyServantProxy.openCapitalAcctV2.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.openCapitalAcctV2).then(ZtAcctTradeProxyServantProxy.openCapitalAcctV2.tupDecoder, ZtAcctTradeProxyServantProxy.openCapitalAcctV2.errorResponser);
            } else {
                return this._worker.tars_invoke("openCapitalAcctV2", ZtAcctTradeProxyServantProxy.openCapitalAcctV2.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.openCapitalAcctV2).then(ZtAcctTradeProxyServantProxy.openCapitalAcctV2.tarsDecoder, ZtAcctTradeProxyServantProxy.openCapitalAcctV2.errorResponser);
            }
        }

        static openCapitalAndStockAcct = _castFunctionInfo({
            name: "openCapitalAndStockAcct",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPOpenCapiAndStockAcctReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPOpenCapiAndStockAcctRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPOpenCapiAndStockAcctReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPOpenCapiAndStockAcctRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPOpenCapiAndStockAcctReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPOpenCapiAndStockAcctRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::openCapitalAndStockAcct failed");
            }
        })

        openCapitalAndStockAcct(req: JV.TPOpenCapiAndStockAcctReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("openCapitalAndStockAcct", ZtAcctTradeProxyServantProxy.openCapitalAndStockAcct.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.openCapitalAndStockAcct).then(ZtAcctTradeProxyServantProxy.openCapitalAndStockAcct.tupDecoder, ZtAcctTradeProxyServantProxy.openCapitalAndStockAcct.errorResponser);
            } else {
                return this._worker.tars_invoke("openCapitalAndStockAcct", ZtAcctTradeProxyServantProxy.openCapitalAndStockAcct.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.openCapitalAndStockAcct).then(ZtAcctTradeProxyServantProxy.openCapitalAndStockAcct.tarsDecoder, ZtAcctTradeProxyServantProxy.openCapitalAndStockAcct.errorResponser);
            }
        }

        static qryBankCardInfo = _castFunctionInfo({
            name: "qryBankCardInfo",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryBankCardInfoReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryBankCardInfoRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryBankCardInfoReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryBankCardInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryBankCardInfoReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryBankCardInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryBankCardInfo failed");
            }
        })

        qryBankCardInfo(req: JV.TPQryBankCardInfoReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryBankCardInfo", ZtAcctTradeProxyServantProxy.qryBankCardInfo.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryBankCardInfo).then(ZtAcctTradeProxyServantProxy.qryBankCardInfo.tupDecoder, ZtAcctTradeProxyServantProxy.qryBankCardInfo.errorResponser);
            } else {
                return this._worker.tars_invoke("qryBankCardInfo", ZtAcctTradeProxyServantProxy.qryBankCardInfo.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryBankCardInfo).then(ZtAcctTradeProxyServantProxy.qryBankCardInfo.tarsDecoder, ZtAcctTradeProxyServantProxy.qryBankCardInfo.errorResponser);
            }
        }

        static qryCapiAcctBySerialNo = _castFunctionInfo({
            name: "qryCapiAcctBySerialNo",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryCapiAcctBySerialNoReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryCapiAcctBySerialNoRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryCapiAcctBySerialNoReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryCapiAcctBySerialNoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryCapiAcctBySerialNoReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryCapiAcctBySerialNoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryCapiAcctBySerialNo failed");
            }
        })

        qryCapiAcctBySerialNo(req: JV.TPQryCapiAcctBySerialNoReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryCapiAcctBySerialNo", ZtAcctTradeProxyServantProxy.qryCapiAcctBySerialNo.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryCapiAcctBySerialNo).then(ZtAcctTradeProxyServantProxy.qryCapiAcctBySerialNo.tupDecoder, ZtAcctTradeProxyServantProxy.qryCapiAcctBySerialNo.errorResponser);
            } else {
                return this._worker.tars_invoke("qryCapiAcctBySerialNo", ZtAcctTradeProxyServantProxy.qryCapiAcctBySerialNo.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryCapiAcctBySerialNo).then(ZtAcctTradeProxyServantProxy.qryCapiAcctBySerialNo.tarsDecoder, ZtAcctTradeProxyServantProxy.qryCapiAcctBySerialNo.errorResponser);
            }
        }

        static qryCapiAcctByUid = _castFunctionInfo({
            name: "qryCapiAcctByUid",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryCapiAcctByUidReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryCapiAcctByUidRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryCapiAcctByUidReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryCapiAcctByUidRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryCapiAcctByUidReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryCapiAcctByUidRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryCapiAcctByUid failed");
            }
        })

        qryCapiAcctByUid(req: JV.TPQryCapiAcctByUidReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryCapiAcctByUid", ZtAcctTradeProxyServantProxy.qryCapiAcctByUid.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryCapiAcctByUid).then(ZtAcctTradeProxyServantProxy.qryCapiAcctByUid.tupDecoder, ZtAcctTradeProxyServantProxy.qryCapiAcctByUid.errorResponser);
            } else {
                return this._worker.tars_invoke("qryCapiAcctByUid", ZtAcctTradeProxyServantProxy.qryCapiAcctByUid.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryCapiAcctByUid).then(ZtAcctTradeProxyServantProxy.qryCapiAcctByUid.tarsDecoder, ZtAcctTradeProxyServantProxy.qryCapiAcctByUid.errorResponser);
            }
        }

        static qryCapiAcctList = _castFunctionInfo({
            name: "qryCapiAcctList",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryCapiAcctListReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryCapiAcctListRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryCapiAcctListReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryCapiAcctListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryCapiAcctListReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryCapiAcctListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryCapiAcctList failed");
            }
        })

        qryCapiAcctList(req: JV.TPQryCapiAcctListReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryCapiAcctList", ZtAcctTradeProxyServantProxy.qryCapiAcctList.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryCapiAcctList).then(ZtAcctTradeProxyServantProxy.qryCapiAcctList.tupDecoder, ZtAcctTradeProxyServantProxy.qryCapiAcctList.errorResponser);
            } else {
                return this._worker.tars_invoke("qryCapiAcctList", ZtAcctTradeProxyServantProxy.qryCapiAcctList.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryCapiAcctList).then(ZtAcctTradeProxyServantProxy.qryCapiAcctList.tarsDecoder, ZtAcctTradeProxyServantProxy.qryCapiAcctList.errorResponser);
            }
        }

        static qryResetPassword = _castFunctionInfo({
            name: "qryResetPassword",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryResetPasswordReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryResetPasswordRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryResetPasswordReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryResetPasswordRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryResetPasswordReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryResetPasswordRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryResetPassword failed");
            }
        })

        qryResetPassword(req: JV.TPQryResetPasswordReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryResetPassword", ZtAcctTradeProxyServantProxy.qryResetPassword.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryResetPassword).then(ZtAcctTradeProxyServantProxy.qryResetPassword.tupDecoder, ZtAcctTradeProxyServantProxy.qryResetPassword.errorResponser);
            } else {
                return this._worker.tars_invoke("qryResetPassword", ZtAcctTradeProxyServantProxy.qryResetPassword.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryResetPassword).then(ZtAcctTradeProxyServantProxy.qryResetPassword.tarsDecoder, ZtAcctTradeProxyServantProxy.qryResetPassword.errorResponser);
            }
        }

        static qryUpdateIDCard = _castFunctionInfo({
            name: "qryUpdateIDCard",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryUpdateIDCardReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryUpdateIDCardRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryUpdateIDCardReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryUpdateIDCardRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryUpdateIDCardReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryUpdateIDCardRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryUpdateIDCard failed");
            }
        })

        qryUpdateIDCard(req: JV.TPQryUpdateIDCardReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryUpdateIDCard", ZtAcctTradeProxyServantProxy.qryUpdateIDCard.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryUpdateIDCard).then(ZtAcctTradeProxyServantProxy.qryUpdateIDCard.tupDecoder, ZtAcctTradeProxyServantProxy.qryUpdateIDCard.errorResponser);
            } else {
                return this._worker.tars_invoke("qryUpdateIDCard", ZtAcctTradeProxyServantProxy.qryUpdateIDCard.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryUpdateIDCard).then(ZtAcctTradeProxyServantProxy.qryUpdateIDCard.tarsDecoder, ZtAcctTradeProxyServantProxy.qryUpdateIDCard.errorResponser);
            }
        }

        static qryUserAccount = _castFunctionInfo({
            name: "qryUserAccount",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryUserAccountReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryUserAccountRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryUserAccountReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryUserAccountRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryUserAccountReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryUserAccountRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryUserAccount failed");
            }
        })

        qryUserAccount(req: JV.TPQryUserAccountReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryUserAccount", ZtAcctTradeProxyServantProxy.qryUserAccount.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryUserAccount).then(ZtAcctTradeProxyServantProxy.qryUserAccount.tupDecoder, ZtAcctTradeProxyServantProxy.qryUserAccount.errorResponser);
            } else {
                return this._worker.tars_invoke("qryUserAccount", ZtAcctTradeProxyServantProxy.qryUserAccount.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryUserAccount).then(ZtAcctTradeProxyServantProxy.qryUserAccount.tarsDecoder, ZtAcctTradeProxyServantProxy.qryUserAccount.errorResponser);
            }
        }

        static qryUserBaseInfo = _castFunctionInfo({
            name: "qryUserBaseInfo",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryUserBaseInfoReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryUserBaseInfoRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryUserBaseInfoReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryUserBaseInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryUserBaseInfoReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryUserBaseInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryUserBaseInfo failed");
            }
        })

        qryUserBaseInfo(req: JV.TPQryUserBaseInfoReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryUserBaseInfo", ZtAcctTradeProxyServantProxy.qryUserBaseInfo.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryUserBaseInfo).then(ZtAcctTradeProxyServantProxy.qryUserBaseInfo.tupDecoder, ZtAcctTradeProxyServantProxy.qryUserBaseInfo.errorResponser);
            } else {
                return this._worker.tars_invoke("qryUserBaseInfo", ZtAcctTradeProxyServantProxy.qryUserBaseInfo.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryUserBaseInfo).then(ZtAcctTradeProxyServantProxy.qryUserBaseInfo.tarsDecoder, ZtAcctTradeProxyServantProxy.qryUserBaseInfo.errorResponser);
            }
        }

        static qryUserBranch = _castFunctionInfo({
            name: "qryUserBranch",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryUserBranchReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryUserBranchRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryUserBranchReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryUserBranchRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryUserBranchReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryUserBranchRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryUserBranch failed");
            }
        })

        qryUserBranch(req: JV.TPQryUserBranchReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryUserBranch", ZtAcctTradeProxyServantProxy.qryUserBranch.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryUserBranch).then(ZtAcctTradeProxyServantProxy.qryUserBranch.tupDecoder, ZtAcctTradeProxyServantProxy.qryUserBranch.errorResponser);
            } else {
                return this._worker.tars_invoke("qryUserBranch", ZtAcctTradeProxyServantProxy.qryUserBranch.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryUserBranch).then(ZtAcctTradeProxyServantProxy.qryUserBranch.tarsDecoder, ZtAcctTradeProxyServantProxy.qryUserBranch.errorResponser);
            }
        }

        static qryUserCompliance = _castFunctionInfo({
            name: "qryUserCompliance",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryUserComplianceReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryUserComplianceRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryUserComplianceReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryUserComplianceRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryUserComplianceReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryUserComplianceRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryUserCompliance failed");
            }
        })

        qryUserCompliance(req: JV.TPQryUserComplianceReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryUserCompliance", ZtAcctTradeProxyServantProxy.qryUserCompliance.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryUserCompliance).then(ZtAcctTradeProxyServantProxy.qryUserCompliance.tupDecoder, ZtAcctTradeProxyServantProxy.qryUserCompliance.errorResponser);
            } else {
                return this._worker.tars_invoke("qryUserCompliance", ZtAcctTradeProxyServantProxy.qryUserCompliance.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryUserCompliance).then(ZtAcctTradeProxyServantProxy.qryUserCompliance.tarsDecoder, ZtAcctTradeProxyServantProxy.qryUserCompliance.errorResponser);
            }
        }

        static qryUserIdByPwd = _castFunctionInfo({
            name: "qryUserIdByPwd",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryUserIdByPwdReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryUserIdByPwdRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryUserIdByPwdReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryUserIdByPwdRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryUserIdByPwdReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryUserIdByPwdRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryUserIdByPwd failed");
            }
        })

        qryUserIdByPwd(req: JV.TPQryUserIdByPwdReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryUserIdByPwd", ZtAcctTradeProxyServantProxy.qryUserIdByPwd.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryUserIdByPwd).then(ZtAcctTradeProxyServantProxy.qryUserIdByPwd.tupDecoder, ZtAcctTradeProxyServantProxy.qryUserIdByPwd.errorResponser);
            } else {
                return this._worker.tars_invoke("qryUserIdByPwd", ZtAcctTradeProxyServantProxy.qryUserIdByPwd.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryUserIdByPwd).then(ZtAcctTradeProxyServantProxy.qryUserIdByPwd.tarsDecoder, ZtAcctTradeProxyServantProxy.qryUserIdByPwd.errorResponser);
            }
        }

        static qryUserInfo = _castFunctionInfo({
            name: "qryUserInfo",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQryUserInfoReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQryUserInfoRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQryUserInfoReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQryUserInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQryUserInfoReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQryUserInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::qryUserInfo failed");
            }
        })

        qryUserInfo(req: JV.TPQryUserInfoReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("qryUserInfo", ZtAcctTradeProxyServantProxy.qryUserInfo.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.qryUserInfo).then(ZtAcctTradeProxyServantProxy.qryUserInfo.tupDecoder, ZtAcctTradeProxyServantProxy.qryUserInfo.errorResponser);
            } else {
                return this._worker.tars_invoke("qryUserInfo", ZtAcctTradeProxyServantProxy.qryUserInfo.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.qryUserInfo).then(ZtAcctTradeProxyServantProxy.qryUserInfo.tarsDecoder, ZtAcctTradeProxyServantProxy.qryUserInfo.errorResponser);
            }
        }

        static queryChangeBindBank = _castFunctionInfo({
            name: "queryChangeBindBank",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPQueryChangeBindBankReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPQueryChangeBindBankRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPQueryChangeBindBankReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPQueryChangeBindBankRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPQueryChangeBindBankReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPQueryChangeBindBankRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::queryChangeBindBank failed");
            }
        })

        queryChangeBindBank(req: JV.TPQueryChangeBindBankReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryChangeBindBank", ZtAcctTradeProxyServantProxy.queryChangeBindBank.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.queryChangeBindBank).then(ZtAcctTradeProxyServantProxy.queryChangeBindBank.tupDecoder, ZtAcctTradeProxyServantProxy.queryChangeBindBank.errorResponser);
            } else {
                return this._worker.tars_invoke("queryChangeBindBank", ZtAcctTradeProxyServantProxy.queryChangeBindBank.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.queryChangeBindBank).then(ZtAcctTradeProxyServantProxy.queryChangeBindBank.tarsDecoder, ZtAcctTradeProxyServantProxy.queryChangeBindBank.errorResponser);
            }
        }

        static querySysAvailable = _castFunctionInfo({
            name: "querySysAvailable",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TQuerySysAvailableReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TQuerySysAvailableRsp",
                direction: "out"
            }],
            tarsEncoder(req: _TARS_MODULE_A_.JV.TQuerySysAvailableReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, _TARS_MODULE_A_.JV.TQuerySysAvailableRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: _TARS_MODULE_A_.JV.TQuerySysAvailableReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", _TARS_MODULE_A_.JV.TQuerySysAvailableRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::querySysAvailable failed");
            }
        })

        querySysAvailable(req: _TARS_MODULE_A_.JV.TQuerySysAvailableReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("querySysAvailable", ZtAcctTradeProxyServantProxy.querySysAvailable.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.querySysAvailable).then(ZtAcctTradeProxyServantProxy.querySysAvailable.tupDecoder, ZtAcctTradeProxyServantProxy.querySysAvailable.errorResponser);
            } else {
                return this._worker.tars_invoke("querySysAvailable", ZtAcctTradeProxyServantProxy.querySysAvailable.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.querySysAvailable).then(ZtAcctTradeProxyServantProxy.querySysAvailable.tarsDecoder, ZtAcctTradeProxyServantProxy.querySysAvailable.errorResponser);
            }
        }

        static queryTransferResult = _castFunctionInfo({
            name: "queryTransferResult",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TQueryTransferResultReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TQueryTransferResultRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TQueryTransferResultReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TQueryTransferResultRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TQueryTransferResultReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TQueryTransferResultRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::queryTransferResult failed");
            }
        })

        queryTransferResult(req: JV.TQueryTransferResultReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryTransferResult", ZtAcctTradeProxyServantProxy.queryTransferResult.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.queryTransferResult).then(ZtAcctTradeProxyServantProxy.queryTransferResult.tupDecoder, ZtAcctTradeProxyServantProxy.queryTransferResult.errorResponser);
            } else {
                return this._worker.tars_invoke("queryTransferResult", ZtAcctTradeProxyServantProxy.queryTransferResult.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.queryTransferResult).then(ZtAcctTradeProxyServantProxy.queryTransferResult.tarsDecoder, ZtAcctTradeProxyServantProxy.queryTransferResult.errorResponser);
            }
        }

        static queryUserBalance = _castFunctionInfo({
            name: "queryUserBalance",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TQueryCapiAcctBalanceReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TQueryCapiAcctBalanceRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TQueryCapiAcctBalanceReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TQueryCapiAcctBalanceRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TQueryCapiAcctBalanceReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TQueryCapiAcctBalanceRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::queryUserBalance failed");
            }
        })

        queryUserBalance(req: JV.TQueryCapiAcctBalanceReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryUserBalance", ZtAcctTradeProxyServantProxy.queryUserBalance.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.queryUserBalance).then(ZtAcctTradeProxyServantProxy.queryUserBalance.tupDecoder, ZtAcctTradeProxyServantProxy.queryUserBalance.errorResponser);
            } else {
                return this._worker.tars_invoke("queryUserBalance", ZtAcctTradeProxyServantProxy.queryUserBalance.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.queryUserBalance).then(ZtAcctTradeProxyServantProxy.queryUserBalance.tarsDecoder, ZtAcctTradeProxyServantProxy.queryUserBalance.errorResponser);
            }
        }

        static queryWhiteList = _castFunctionInfo({
            name: "queryWhiteList",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TQueryWhiteListReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TQueryWhiteListRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TQueryWhiteListReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TQueryWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TQueryWhiteListReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TQueryWhiteListRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::queryWhiteList failed");
            }
        })

        queryWhiteList(req: JV.TQueryWhiteListReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("queryWhiteList", ZtAcctTradeProxyServantProxy.queryWhiteList.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.queryWhiteList).then(ZtAcctTradeProxyServantProxy.queryWhiteList.tupDecoder, ZtAcctTradeProxyServantProxy.queryWhiteList.errorResponser);
            } else {
                return this._worker.tars_invoke("queryWhiteList", ZtAcctTradeProxyServantProxy.queryWhiteList.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.queryWhiteList).then(ZtAcctTradeProxyServantProxy.queryWhiteList.tarsDecoder, ZtAcctTradeProxyServantProxy.queryWhiteList.errorResponser);
            }
        }

        static resetPassword = _castFunctionInfo({
            name: "resetPassword",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPResetPasswordReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPResetPasswordRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPResetPasswordReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPResetPasswordRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPResetPasswordReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPResetPasswordRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::resetPassword failed");
            }
        })

        resetPassword(req: JV.TPResetPasswordReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("resetPassword", ZtAcctTradeProxyServantProxy.resetPassword.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.resetPassword).then(ZtAcctTradeProxyServantProxy.resetPassword.tupDecoder, ZtAcctTradeProxyServantProxy.resetPassword.errorResponser);
            } else {
                return this._worker.tars_invoke("resetPassword", ZtAcctTradeProxyServantProxy.resetPassword.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.resetPassword).then(ZtAcctTradeProxyServantProxy.resetPassword.tarsDecoder, ZtAcctTradeProxyServantProxy.resetPassword.errorResponser);
            }
        }

        static resetPassword4JV = _castFunctionInfo({
            name: "resetPassword4JV",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TResetPasswordReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TResetPasswordRsp",
                direction: "out"
            }],
            tarsEncoder(req: _TARS_MODULE_A_.JV.TResetPasswordReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, _TARS_MODULE_A_.JV.TResetPasswordRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: _TARS_MODULE_A_.JV.TResetPasswordReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", _TARS_MODULE_A_.JV.TResetPasswordRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::resetPassword4JV failed");
            }
        })

        resetPassword4JV(req: _TARS_MODULE_A_.JV.TResetPasswordReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("resetPassword4JV", ZtAcctTradeProxyServantProxy.resetPassword4JV.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.resetPassword4JV).then(ZtAcctTradeProxyServantProxy.resetPassword4JV.tupDecoder, ZtAcctTradeProxyServantProxy.resetPassword4JV.errorResponser);
            } else {
                return this._worker.tars_invoke("resetPassword4JV", ZtAcctTradeProxyServantProxy.resetPassword4JV.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.resetPassword4JV).then(ZtAcctTradeProxyServantProxy.resetPassword4JV.tarsDecoder, ZtAcctTradeProxyServantProxy.resetPassword4JV.errorResponser);
            }
        }

        static transferFromBankCard = _castFunctionInfo({
            name: "transferFromBankCard",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TTransferFromBankCardReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TTransferFromBankCardRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TTransferFromBankCardReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TTransferFromBankCardRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TTransferFromBankCardReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TTransferFromBankCardRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::transferFromBankCard failed");
            }
        })

        transferFromBankCard(req: JV.TTransferFromBankCardReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("transferFromBankCard", ZtAcctTradeProxyServantProxy.transferFromBankCard.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.transferFromBankCard).then(ZtAcctTradeProxyServantProxy.transferFromBankCard.tupDecoder, ZtAcctTradeProxyServantProxy.transferFromBankCard.errorResponser);
            } else {
                return this._worker.tars_invoke("transferFromBankCard", ZtAcctTradeProxyServantProxy.transferFromBankCard.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.transferFromBankCard).then(ZtAcctTradeProxyServantProxy.transferFromBankCard.tarsDecoder, ZtAcctTradeProxyServantProxy.transferFromBankCard.errorResponser);
            }
        }

        static transferToBankCard = _castFunctionInfo({
            name: "transferToBankCard",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TTransferToBankCardReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TTransferToBankCardRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TTransferToBankCardReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TTransferToBankCardRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TTransferToBankCardReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TTransferToBankCardRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::transferToBankCard failed");
            }
        })

        transferToBankCard(req: JV.TTransferToBankCardReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("transferToBankCard", ZtAcctTradeProxyServantProxy.transferToBankCard.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.transferToBankCard).then(ZtAcctTradeProxyServantProxy.transferToBankCard.tupDecoder, ZtAcctTradeProxyServantProxy.transferToBankCard.errorResponser);
            } else {
                return this._worker.tars_invoke("transferToBankCard", ZtAcctTradeProxyServantProxy.transferToBankCard.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.transferToBankCard).then(ZtAcctTradeProxyServantProxy.transferToBankCard.tarsDecoder, ZtAcctTradeProxyServantProxy.transferToBankCard.errorResponser);
            }
        }

        static unbindCapitalAcct = _castFunctionInfo({
            name: "unbindCapitalAcct",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPUnbindCapitalAcctReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPUnbindCapitalAcctRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPUnbindCapitalAcctReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPUnbindCapitalAcctRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPUnbindCapitalAcctReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPUnbindCapitalAcctRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::unbindCapitalAcct failed");
            }
        })

        unbindCapitalAcct(req: JV.TPUnbindCapitalAcctReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("unbindCapitalAcct", ZtAcctTradeProxyServantProxy.unbindCapitalAcct.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.unbindCapitalAcct).then(ZtAcctTradeProxyServantProxy.unbindCapitalAcct.tupDecoder, ZtAcctTradeProxyServantProxy.unbindCapitalAcct.errorResponser);
            } else {
                return this._worker.tars_invoke("unbindCapitalAcct", ZtAcctTradeProxyServantProxy.unbindCapitalAcct.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.unbindCapitalAcct).then(ZtAcctTradeProxyServantProxy.unbindCapitalAcct.tarsDecoder, ZtAcctTradeProxyServantProxy.unbindCapitalAcct.errorResponser);
            }
        }

        static unfrozenUserCapital = _castFunctionInfo({
            name: "unfrozenUserCapital",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TUnfrozenUserCapitalReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TUnfrozenUserCapitalRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TUnfrozenUserCapitalReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TUnfrozenUserCapitalRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TUnfrozenUserCapitalReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TUnfrozenUserCapitalRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::unfrozenUserCapital failed");
            }
        })

        unfrozenUserCapital(req: JV.TUnfrozenUserCapitalReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("unfrozenUserCapital", ZtAcctTradeProxyServantProxy.unfrozenUserCapital.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.unfrozenUserCapital).then(ZtAcctTradeProxyServantProxy.unfrozenUserCapital.tupDecoder, ZtAcctTradeProxyServantProxy.unfrozenUserCapital.errorResponser);
            } else {
                return this._worker.tars_invoke("unfrozenUserCapital", ZtAcctTradeProxyServantProxy.unfrozenUserCapital.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.unfrozenUserCapital).then(ZtAcctTradeProxyServantProxy.unfrozenUserCapital.tarsDecoder, ZtAcctTradeProxyServantProxy.unfrozenUserCapital.errorResponser);
            }
        }

        static unfrozenUserCapitalWithPwd = _castFunctionInfo({
            name: "unfrozenUserCapitalWithPwd",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TUnfrozenUserCapitalWithPwdReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TUnfrozenUserCapitalWithPwdRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TUnfrozenUserCapitalWithPwdReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TUnfrozenUserCapitalWithPwdRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TUnfrozenUserCapitalWithPwdReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TUnfrozenUserCapitalWithPwdRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::unfrozenUserCapitalWithPwd failed");
            }
        })

        unfrozenUserCapitalWithPwd(req: JV.TUnfrozenUserCapitalWithPwdReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("unfrozenUserCapitalWithPwd", ZtAcctTradeProxyServantProxy.unfrozenUserCapitalWithPwd.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.unfrozenUserCapitalWithPwd).then(ZtAcctTradeProxyServantProxy.unfrozenUserCapitalWithPwd.tupDecoder, ZtAcctTradeProxyServantProxy.unfrozenUserCapitalWithPwd.errorResponser);
            } else {
                return this._worker.tars_invoke("unfrozenUserCapitalWithPwd", ZtAcctTradeProxyServantProxy.unfrozenUserCapitalWithPwd.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.unfrozenUserCapitalWithPwd).then(ZtAcctTradeProxyServantProxy.unfrozenUserCapitalWithPwd.tarsDecoder, ZtAcctTradeProxyServantProxy.unfrozenUserCapitalWithPwd.errorResponser);
            }
        }

        static updateIDCard = _castFunctionInfo({
            name: "updateIDCard",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPUpdateIDCardReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPUpdateIDCardRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPUpdateIDCardReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPUpdateIDCardRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPUpdateIDCardReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPUpdateIDCardRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::updateIDCard failed");
            }
        })

        updateIDCard(req: JV.TPUpdateIDCardReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("updateIDCard", ZtAcctTradeProxyServantProxy.updateIDCard.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.updateIDCard).then(ZtAcctTradeProxyServantProxy.updateIDCard.tupDecoder, ZtAcctTradeProxyServantProxy.updateIDCard.errorResponser);
            } else {
                return this._worker.tars_invoke("updateIDCard", ZtAcctTradeProxyServantProxy.updateIDCard.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.updateIDCard).then(ZtAcctTradeProxyServantProxy.updateIDCard.tarsDecoder, ZtAcctTradeProxyServantProxy.updateIDCard.errorResponser);
            }
        }

        static updateRiskAssessment = _castFunctionInfo({
            name: "updateRiskAssessment",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPUpdateRiskAssessmentReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPUpdateRiskAssessmentRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPUpdateRiskAssessmentReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPUpdateRiskAssessmentRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPUpdateRiskAssessmentReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPUpdateRiskAssessmentRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::updateRiskAssessment failed");
            }
        })

        updateRiskAssessment(req: JV.TPUpdateRiskAssessmentReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("updateRiskAssessment", ZtAcctTradeProxyServantProxy.updateRiskAssessment.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.updateRiskAssessment).then(ZtAcctTradeProxyServantProxy.updateRiskAssessment.tupDecoder, ZtAcctTradeProxyServantProxy.updateRiskAssessment.errorResponser);
            } else {
                return this._worker.tars_invoke("updateRiskAssessment", ZtAcctTradeProxyServantProxy.updateRiskAssessment.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.updateRiskAssessment).then(ZtAcctTradeProxyServantProxy.updateRiskAssessment.tarsDecoder, ZtAcctTradeProxyServantProxy.updateRiskAssessment.errorResponser);
            }
        }

        static updateUserInfo = _castFunctionInfo({
            name: "updateUserInfo",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPUpdateUserInfoReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPUpdateUserInfoRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPUpdateUserInfoReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPUpdateUserInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPUpdateUserInfoReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPUpdateUserInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::updateUserInfo failed");
            }
        })

        updateUserInfo(req: JV.TPUpdateUserInfoReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("updateUserInfo", ZtAcctTradeProxyServantProxy.updateUserInfo.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.updateUserInfo).then(ZtAcctTradeProxyServantProxy.updateUserInfo.tupDecoder, ZtAcctTradeProxyServantProxy.updateUserInfo.errorResponser);
            } else {
                return this._worker.tars_invoke("updateUserInfo", ZtAcctTradeProxyServantProxy.updateUserInfo.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.updateUserInfo).then(ZtAcctTradeProxyServantProxy.updateUserInfo.tarsDecoder, ZtAcctTradeProxyServantProxy.updateUserInfo.errorResponser);
            }
        }

        static wzqUpdateUserInfo = _castFunctionInfo({
            name: "wzqUpdateUserInfo",
            return: "int32",
            arguments: [{
                name: "req",
                class: "JV.TPWZQUpdateUserInfoReq",
                direction: "in"
            }, {
                name: "rsp",
                class: "JV.TPWZQUpdateUserInfoRsp",
                direction: "out"
            }],
            tarsEncoder(req: JV.TPWZQUpdateUserInfoReq) {
                const os = new TarsStream.TarsOutputStream();
                os.writeStruct(1, req);
                return os.getBinBuffer();
            },
            tarsDecoder(data: TarsRpc.RpcResponse) {
                try {
                    var is = new TarsStream.TarsInputStream(data.response.sBuffer);
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: is.readInt32(0, true, 0),
                            arguments: {
                                rsp: is.readStruct(2, true, JV.TPWZQUpdateUserInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            tupEncoder(req: JV.TPWZQUpdateUserInfoReq, __$PROTOCOL$VERSION: number) {
                const tup = new TarsStream.UniAttribute();
                tup.tupVersion = __$PROTOCOL$VERSION;
                tup.writeStruct("req", req);
                return tup;
            },
            tupDecoder(data: TarsRpc.RpcResponse) {
                try {
                    const tup: TarsStream.UniAttribute = (data.response as any).tup;
                    return {
                        request: data.request,
                        response: {
                            costtime: data.request.costtime,
                            return: tup.readInt32("", 0),
                            arguments: {
                                rsp: tup.readStruct("rsp", JV.TPWZQUpdateUserInfoRsp)
                            }
                        }
                    };
                } catch (e) {
                    throw _makeError(data, e.message, TarsRpc.error.CLIENT.DECODE_ERROR);
                }
            },
            errorResponser(data: TarsRpc.RpcResponse) {
                throw _makeError(data, "Call ZtAcctTradeProxyServant::wzqUpdateUserInfo failed");
            }
        })

        wzqUpdateUserInfo(req: JV.TPWZQUpdateUserInfoReq, options?: TarsRpc.InvokeProperty) {
            const version = this._worker.version;
            if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
                return this._worker.tup_invoke("wzqUpdateUserInfo", ZtAcctTradeProxyServantProxy.wzqUpdateUserInfo.tupEncoder(req, version), options, ZtAcctTradeProxyServantProxy.wzqUpdateUserInfo).then(ZtAcctTradeProxyServantProxy.wzqUpdateUserInfo.tupDecoder, ZtAcctTradeProxyServantProxy.wzqUpdateUserInfo.errorResponser);
            } else {
                return this._worker.tars_invoke("wzqUpdateUserInfo", ZtAcctTradeProxyServantProxy.wzqUpdateUserInfo.tarsEncoder(req), options, ZtAcctTradeProxyServantProxy.wzqUpdateUserInfo).then(ZtAcctTradeProxyServantProxy.wzqUpdateUserInfo.tarsDecoder, ZtAcctTradeProxyServantProxy.wzqUpdateUserInfo.errorResponser);
            }
        }


    }

}


